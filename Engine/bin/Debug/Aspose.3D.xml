<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aspose.3D</name>
    </assembly>
    <members>
        <member name="T:Aspose.ThreeD.Animation.AnimationChannel">
            <summary>
            A channel maps property's component field to a set of keyframe sequences
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationChannel.ComponentType">
            <summary>
            Gets the component field's type
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationChannel.Name">
             <summary>
            Gets the name of the channel
             </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationChannel.DefaultValue">
            <summary>
            Gets or sets the Default value of the channel.
            If a channel has no keyframe sequences connected, the default value will be used during the animation evaluation.
            A real scenario: Animation only animates a node's x coordinate, the y and z are not changed, 
            then the default value will be used during full translation evaluation.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationChannel.KeyframeSequences">
            <summary>
            Gets all keyframe sequences inside this channel
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationChannel.AddKeyframeSequence(Aspose.ThreeD.Animation.KeyframeSequence)">
            <summary>
            Adds keyframe sequence to this channel
            </summary>
            <param name="sequence">The keyframe sequence to add.</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationChannel.GetEnumerator">
            <summary>
            Gets an enumerator to walk through all keyframe sequences inside this channel
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:Aspose.ThreeD.Animation.NamespaceDoc">
            <summary>
            The animation namespace of Aspose.3D, all animation related classes are defined in this namespace
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Animation.AnimationNode">
            <summary>
            Aspose.3D's supports animation hierarchy, each animation can be composed by several animations and animation's key-frame definition.
            
            <see cref="T:Aspose.ThreeD.Animation.AnimationNode"/> defines the transformation of a property value over time, for example, animation node can be used to control a node's transformation or other <see cref="T:Aspose.ThreeD.A3DObject"/> object's numerical properties.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.AnimationNode"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.AnimationNode"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationNode.BindPoints">
            <summary>
            Gets the current property bind points
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationNode.SubAnimations">
            <summary>
            Gets the sub-animation nodes under current animations
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationNode.FindBindPoint(System.String)">
            <summary>
            Finds the bind point by name.
            </summary>
            <returns>The bind point.</returns>
            <param name="name">Bind point's name to find.</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationNode.GetBindPoint(Aspose.ThreeD.A3DObject,System.String,System.Boolean)">
            <summary>
            Gets the animation bind point on given property.
            </summary>
            <returns>The bind point.</returns>
            <param name="target">On which object to create the bind point.</param>
            <param name="propName">The property's name.</param>
            <param name="create">If set to <c>true</c> create the bind point if it's not existing.</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationNode.GetKeyframeSequence(Aspose.ThreeD.A3DObject,System.String,System.String,System.Boolean)">
            <summary>
            Gets the keyframe sequence on given property and channel.
            </summary>
            <returns>The keyframe sequence.</returns>
            <param name="target">On which instance to create the keyframe sequence.</param>
            <param name="propName">The property's name.</param>
            <param name="channelName">The channel name.</param>
            <param name="create">If set to <c>true</c> create the animation sequence if it's not existing.</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationNode.GetKeyframeSequence(Aspose.ThreeD.A3DObject,System.String,System.Boolean)">
            <summary>
            Gets the keyframe sequence on given property.
            </summary>
            <returns>The keyframe sequence.</returns>
            <param name="target">On which instance to create the keyframe sequence.</param>
            <param name="propName">The property's name.</param>
            <param name="create">If set to <c>true</c>, create the sequence if it's not existing.</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationNode.CreateBindPoint(Aspose.ThreeD.A3DObject,System.String)">
            <summary>
            Creates a BindPoint based on the property data type. 
            </summary>
            <returns>The bind point instance or null if the property is not defined.</returns>
            <param name="obj">Object.</param>
            <param name="propName">Property name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Animation.AnimationClip">
            <summary>
            The Animation clip is a collection of animations.
            The scene can have one or more animation clips. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationClip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.AnimationClip"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationClip.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.AnimationClip"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationClip.Animations">
            <summary>
            Gets the animations contained inside the clip.
            </summary>
            <value>The layers.</value>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationClip.Description">
            <summary>
            Gets or sets the description of this animation clip
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationClip.Start">
            <summary>
              Gets or sets the time in seconds of the beginning of the clip.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.AnimationClip.Stop">
            <summary>
            Gets or sets the time in seconds of the end of the clip.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.AnimationClip.CreateAnimationNode(System.String)">
            <summary>
            A shorthand function to create and register the animation node on current clip.
            </summary>
            <param name="nodeName">New animation node's name</param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Animation.BindPoint">
            <summary>
            A <see cref="T:Aspose.ThreeD.Animation.BindPoint"/> is usually created on an object's property, some property types contains multiple component fields(like a Vector3 field),
            <see cref="T:Aspose.ThreeD.Animation.BindPoint"/> will generate channel for each component field and connects the field to one or more keyframe sequence instance(s) through the channels.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.#ctor(Aspose.ThreeD.Scene,Aspose.ThreeD.Property)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.BindPoint"/> class.
            </summary>
            <param name="scene">The scene that contains the animation.</param>
            <param name="prop">Property.</param>
        </member>
        <member name="P:Aspose.ThreeD.Animation.BindPoint.Property">
            <summary>
            Gets the property associated with the CurveMapping
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.GetKeyframeSequence(System.String)">
            <summary>
            Gets the first keyframe sequence in specified channel 
            </summary>
            <param name="channelName">The channel name to find</param>
            <returns>First keyframe sequence with the channel name</returns>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.GetKeyframeSequences(System.String)">
            <summary>
            Gets all keyframe sequences in specified channel
            </summary>
            <param name="channelName">The channel name to find</param>
            <returns>Keyframe sequence list with the channel name</returns>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.GetKeyframeSequence(System.String,System.Int32,System.String)">
            <summary>
            Get n-th keyframe sequence in specified channel with given keyframe sequence's name
            </summary>
            <returns>The keyframe sequence.</returns>
            <param name="channelName">Channel name.</param>
            <param name="id">Identifier.</param>
            <param name="curveName">Keyframe sequence's name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.CreateKeyframeSequence(System.String)">
            <summary>
            Creates a new curve and connects it to the first channel of the curve mapping
            </summary>
            <param name="name">The new sequence's name.</param>
            <returns>The keyframe sequence.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.CreateKeyframeSequence(System.String,System.String)">
            <summary>
            Creates a named keyframe sequence instance and connects it to specified channel
            </summary>
            <param name="sequenceName">Keyframe sequence's name</param>
            <param name="channelName">Channel name</param>
            <returns>Created keyframe sequence</returns>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.BindKeyframeSequence(System.String,Aspose.ThreeD.Animation.KeyframeSequence)">
            <summary>
            Bind the keyframe sequence to specified channel
            </summary>
            <param name="channelName">Which channel the keyframe sequence will be bound to</param>
            <param name="sequence">The keyframe sequence to bind</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.GetChannel(System.String)">
            <summary>
            Gets channel by given name
            </summary>
            <param name="channelName">The channel name to find</param>
            <returns>Channel with the name</returns>
        </member>
        <member name="P:Aspose.ThreeD.Animation.BindPoint.Item(System.String)">
            <summary>
            Gets channel by given name
            </summary>
            <param name="channelName">Channel name</param>
            <returns>Animation channel</returns>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.AddChannel``1(System.String,``0)">
            <summary>
            Adds the specified channel property. 
            </summary>
            <returns>true, if channel was added, false otherwise.</returns>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.AddChannel(System.String,System.Object)">
            <summary>
            Adds the specified channel property. 
            </summary>
            <returns>true, if channel was added, false otherwise.</returns>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.AddChannel(System.String,System.Type,System.Object)">
            <summary>
            Adds the specified channel property. 
            </summary>
            <returns>true, if channel was added, false otherwise.</returns>
            <param name="name">Name.</param>
            <param name="type">Type.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.ResetChannels">
            <summary>
            Empties the property channels of this animation curve mapping. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.BindPoint.ChannelsCount">
            <summary>
            Gets the total number of property channels defined in this animation curve mapping. 
            </summary>
            <returns>The channels count.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Animation.BindPoint.ToString">
            <summary>
            Formats object to string
            </summary>
            <returns>Object string</returns>
        </member>
        <member name="T:Aspose.ThreeD.Animation.KeyframeSequence">
            <summary>
            The sequence of key-frames, it describes the transformation of a sampled value over time.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyframeSequence.BindPoint">
            <summary>
            Gets the property bind point which owns this curve
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyframeSequence.KeyFrames">
            <summary>
            Gets the key frames of this curve.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyframeSequence.PostBehavior">
            <summary>
            Gets the post behavior indicates what the sampled value should be after the last key frame.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyframeSequence.PreBehavior">
            <summary>
            Gets the pre behavior indicates what the sampled value should be before the first key.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.KeyframeSequence"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.KeyframeSequence"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.Add(System.Double,System.Single)">
            <summary>
            Create a new key frame with specified value
            </summary>
            <param name="time">Time position(measured in seconds)</param>
            <param name="value">The value at this time position</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.Add(System.Double,System.Single,Aspose.ThreeD.Animation.Interpolation)">
            <summary>
            Create a new key frame with specified value
            </summary>
            <param name="time">Time position(measured in seconds)</param>
            <param name="value">The value at this time position</param>
            <param name="interpolation">The interpolation type of this key frame</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.Reset">
            <summary>
            Removes all key frames and reset the post/pre behaviors.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyframeSequence.GetEnumerator">
            <summary>
            Gets the enumerator to traverse all key frames.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Animation.Interpolation">
            <summary>
            The key frame's interpolation type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.Interpolation.Constant">
            <summary>
            The value will remains constant to the value of the first point until the next segment.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.Interpolation.Linear">
            <summary>
            Linear interpolation is a straight line between two points.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.Interpolation.Bezier">
            <summary>
            A bezier or hermite spline.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.Interpolation.BSpline">
            <summary>
            Basis splines are defined by a series of control points, for which the curve is guaranteed only to go through the first and the last point.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.Interpolation.CardinalSpline">
            <summary>
            A cardinal spline is a cubic hermite spline whose tangents are defined by the endpoints and a tension parameter.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.Interpolation.TCBSpline">
            <summary>
            Also called Kochanek-Bartels spline, the behavior of tangent is defined by tension/bias/continuity
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Animation.WeightedMode">
            <summary>
            Weighted mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.WeightedMode.None">
            <summary>
            Both out and next in weights are not used.
            When calculation needs tangent information, default value(0.3333) will be used.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.WeightedMode.OutWeight">
            <summary>
            Out(right) tangent is weighted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.WeightedMode.NextInWeight">
            <summary>
            Next in(left) tangent is weighted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.WeightedMode.Both">
            <summary>
            Both out and next in tangents are weighted.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Animation.StepMode">
            <summary>
            Interpolation step mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.StepMode.PreviousValue">
            <summary>
            Curve value of a segment always uses the value from previous key frame
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.StepMode.NextValue">
            <summary>
            Curve value of a segment always uses the value from the next key frame
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Animation.ExtrapolationType">
            <summary>
            Extrapolation type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.Constant">
            <summary>
            Value will keep the same value of the last value
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.Gradient">
            <summary>
            Value will keep the same slope by time
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.Cycle">
            <summary>
            The repetition.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.CycleRelative">
            <summary>
            Repeat the previous pattern based on the last value
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Animation.ExtrapolationType.Oscillate">
            <summary>
            The mirror repetition.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Animation.KeyFrame">
            <summary>
            A key frame is mainly defined by a time and a value, for some interpolation types, tangent/tension/bias/continuity is also used by calculating the final sampled value.
            Sampled values in a non-key-frame time position is interpolated by key-frames between the previous and next key-frames
            Value before/after the first/last key-frame are calculated by the <see cref="T:Aspose.ThreeD.Animation.Extrapolation"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyFrame.#ctor(Aspose.ThreeD.Utilities.ArrayList{Aspose.ThreeD.Animation.KeyFrameData},System.Int32)">
            <summary>
            Default weight
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyFrame.#ctor(Aspose.ThreeD.Animation.KeyframeSequence,System.Double)">
            <summary>
            Create a new key frame on specified curve
            </summary>
            <param name="curve">The curve that the key frame will be created on</param>
            <param name="time">The time position of the key frame</param>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyFrame.ToString">
            <summary>
            Gets the string representation of the key frame
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.Time">
            <summary>
            Gets or sets the time position of list.data[index] key frame, measured in seconds.
            </summary>
            <value>The time.</value>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.Value">
            <summary>
            Gets or sets the key-frame's value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.Interpolation">
            <summary>
            Gets or sets the key's interpolation type, list.data[index] defines the algorithm how the sampled value is calculated.
            </summary>
            <value>The interpolation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.TangentWeightMode">
            <summary>
            Gets or sets the key's tangent weight mode.
            The out tangent or the next in tangent can be customized by select correct <see cref="T:Aspose.ThreeD.Animation.WeightedMode"/>
            </summary>
            <value>The tangent weight mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.StepMode">
            <summary>
            Gets or sets the key's step mode.
            If the interpolation type is <see cref="F:Aspose.ThreeD.Animation.Interpolation.Constant"/>, list.data[index] decides which key-frame's value will be used during interpolation.  
            A <see cref="F:Aspose.ThreeD.Animation.StepMode.PreviousValue"/> means the left key-frame's value will be used  
            A <see cref="F:Aspose.ThreeD.Animation.StepMode.NextValue"/> means the next right key-frame's value will be used  
            </summary>
            <value>The step mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.NextInTangent">
            <summary>
            Gets or sets the next in(left) tangent on this key frame.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.OutTangent">
            <summary>
             Gets or sets the out(right) tangent on this key frame.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.OutWeight">
            <summary>
             Gets or sets the out(right) weight on this key frame.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.NextInWeight">
            <summary>
             Gets or sets the next in(left) weight on this key frame.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.Tension">
            <summary>
             Gets or sets tension used in TCB spline
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.Continuity">
            <summary>
             Gets or sets the continuity used in TCB spline
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.Bias">
            <summary>
             Gets or sets the bias used in TCB spline
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.IndependentTangent">
            <summary>
             Gets or sets the out and next in tangents are independent.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.Flat">
            <summary>
            Get or set if the key frame is flat.
            Key frame should be flat if next or previous key frame has the same value.
            Flat key frame has flat tangents and fixed interpolation.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.KeyFrame.TimeIndependentTangent">
            <summary>
             Gets or sets the tangent is time-independent
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Animation.KeyFrame.#ctor(System.Double,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Animation.KeyFrame"/> class.
            </summary>
            <param name="time">Time position of list.data[index] key frame.</param>
            <param name="value">Value .</param>
        </member>
        <member name="T:Aspose.ThreeD.Animation.Extrapolation">
            <summary>
            Extrapolation defines how to do when sampled value is out of the range which defined by the first and last key-frames.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Animation.Extrapolation.Type">
            <summary>
            Gets and sets the sampling pattern of extrapolation
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Aspose.ThreeD.Animation.Extrapolation.RepeatCount">
            <summary>
            Gets and sets the repeat times of the extrapolation pattern.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Aspose.ThreeD.Entities.ExtrusionBuilder">
            <summary>
            The base class of building extrusion,
            Derived class should provide the transform for each slice, and the number of the slice
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ExtrusionBuilder.up">
            <summary>
            The up vector of the swept area, which is the normal of the area.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.ExtrusionBuilder.CalculateSlices">
            <summary>
            Calculate how many slices that will be used in the extrusion
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.RevolvedAreaSolid">
            <summary>
            This class represents a solid model by revolving a cross section provided by a profile about an axis.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RevolvedAreaSolid.AngleStart">
            <summary>
            Gets or sets the starting angle of the revolving procedure, measured in radian, default value is 0.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RevolvedAreaSolid.AngleEnd">
            <summary>
            Gets or sets the ending angle of the revolving procedure, measured in radian, default value is pi.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RevolvedAreaSolid.Axis">
            <summary>
            Gets or sets the axis direction, default value is (0, 1, 0).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RevolvedAreaSolid.Origin">
            <summary>
            Gets or sets the origin point of the revolving, default value is (0, 0, 0).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RevolvedAreaSolid.Shape">
            <summary>
            Gets or sets the base profile used to revolve.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.RevolvedAreaSolid.ToMesh">
            <summary>
            Convert the <see cref="T:Aspose.ThreeD.Entities.RevolvedAreaSolid"/> into a mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.UnboundedLine">
            <summary>
            
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.EndPoint">
            <summary>
            The end point to trim the curve, can be a parameter value or a cartesian point.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.EndPoint.#ctor(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Entities.EndPoint"/> from a cartesian point.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.EndPoint.#ctor(System.Double)">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Entities.EndPoint"/> from a real parameter.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.EndPoint.FromDegree(System.Double)">
            <summary>
            Create an end point measured in degree.
            </summary>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.EndPoint.FromRadian(System.Double)">
            <summary>
            Create an end point measured in radian.
            </summary>
            <param name="degree"></param>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Entities.EndPoint.IsCartesianPoint">
            <summary>
            Is the end point a cartesian point?
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.EndPoint.AsPoint">
            <summary>
            Gets the end point as cartesian point, or thrown an exception.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.EndPoint.AsValue">
            <summary>
            Gets the end point as a real parameter, or throw an exception.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.EndPoint.ToString">
            <summary>
            Returns a string representation of the current end point.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Curve">
            <summary>
            The base class of all curve implementations.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Curve.Color">
            <summary>
            Gets or sets the color of the line, default value is white(1, 1, 1)
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Curve.GetEntityRendererKey">
            <summary>
            Gets the key of the entity renderer registered in the renderer 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Circle">
            <summary>
            A <see cref="T:Aspose.ThreeD.Entities.Circle"/> curve consists of a set of points in the edge of the circle shape.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Circle.Radius">
            <summary>
            The radius of the circle curve, default value is 10
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Circle.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.Circle"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Circle.#ctor(System.Double)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.Circle"/>
            </summary>
            <param name="radius">The radius of the circle curve.</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.CompositeCurve">
            <summary>
            A <see cref="T:Aspose.ThreeD.Entities.CompositeCurve"/> is consisting of several curve segments.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.CompositeCurve.Segment">
            <summary>
            The curve segment 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CompositeCurve.Segment.Curve">
            <summary>
            The curve used in the segment
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CompositeCurve.Segment.SameDirection">
            <summary>
            Use the same direction of the original curve, or use reversed direction
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CompositeCurve.Segments">
            <summary>
            The segments of the curve.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.CompositeCurve.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.CompositeCurve"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.CompositeCurve.AddSegment(Aspose.ThreeD.Entities.Curve,System.Boolean)">
            <summary>
            The 
            </summary>
            <param name="curve"></param>
            <param name="sameDirection"></param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Ellipse">
            <summary>
            An <see cref="T:Aspose.ThreeD.Entities.Ellipse"/> defines a set of points that form the shape of ellipse.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Ellipse.SemiAxis1">
            <summary>
            Radius on X-axis
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Ellipse.SemiAxis2">
            <summary>
            Radius on Y-axis
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Ellipse.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.Ellipse"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Ellipse.#ctor(System.Double,System.Double)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.Ellipse"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.TrimmedCurve">
            <summary>
            A bounded curve that trimmed the basis curve at both ends.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TrimmedCurve.BasisCurve">
            <summary>
            The basis curve to be trimmed.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TrimmedCurve.First">
            <summary>
            The first end point to trim, can be a cartesian point or a real parameter.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TrimmedCurve.Second">
            <summary>
            The second end point to trim, can be a cartesian point or a real parameter.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TrimmedCurve.SameDirection">
            <summary>
            Gets or sets whether the trimmed result uses the same direction of the basis curve.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TrimmedCurve.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.TrimmedCurve"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.TransformedCurve">
            <summary>
            A <see cref="T:Aspose.ThreeD.Entities.TransformedCurve"/> gives a curve a placement by using a transformation matrix.
            This allows to perform a transformation inside a <see cref="T:Aspose.ThreeD.Entities.TrimmedCurve"/> or <see cref="T:Aspose.ThreeD.Entities.CompositeCurve"/>.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TransformedCurve.TransformMatrix">
            <summary>
            The transformation matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TransformedCurve.BasisCurve">
            <summary>
            The basis curve.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TransformedCurve.#ctor">
            <summary>
            The constructor of <see cref="T:Aspose.ThreeD.Entities.TransformedCurve"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TransformedCurve.#ctor(Aspose.ThreeD.Entities.Curve,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            The constructor of <see cref="T:Aspose.ThreeD.Entities.TransformedCurve"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.SweptAreaSolid">
            <summary>
            A <see cref="T:Aspose.ThreeD.Entities.SweptAreaSolid"/> constructs a geometry by swepting a profile along a directrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.SweptAreaSolid.Shape">
            <summary>
            The base profile to construct the geometry.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.SweptAreaSolid.Directrix">
            <summary>
            The directrix that the swept area swepting along with.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.SweptAreaSolid.StartPoint">
            <summary>
            The start point of the directrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.SweptAreaSolid.EndPoint">
            <summary>
            The end point of the directrix.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.SweptAreaSolid.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.PointCloud">
            <summary>
            The point cloud contains no topology information but only the control points and the vertex elements.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PointCloud.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.PointCloud"/>
            </summary>
            <param name="name">The name of this entity</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PointCloud.GetEntityRendererKey">
            <summary>
            Gets the key of the entity renderer registered in the renderer 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PointCloud.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.PointCloud"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PointCloud.FromGeometry(Aspose.ThreeD.Entities.Geometry)">
            <summary>
            Create a new PointCloud instance from a geometry object
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.LinearExtrusion">
            <summary>
            Linear extrusion takes a 2D shape as input and extends the shape in the 3rd dimension.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Shape">
            <summary>
            The base shape to be extruded.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Direction">
            <summary>
            The direction of extrusion, default value is (0, 0, 1) 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Height">
            <summary>
            The height of the extruded geometry, default value is 1.0
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Slices">
            <summary>
            The slices of the twisted extruded geometry, default value is 1.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Center">
            <summary>
            If this value is false, the linear extrusion Z range is from 0 to height, otherwise the range is from -height/2 to height/2.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.TwistOffset">
            <summary>
            The offset that used in twisting, default value is (0, 0, 0).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LinearExtrusion.Twist">
            <summary>
            The number of degrees of through which the shape is extruded.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.LinearExtrusion.#ctor">
            <summary>
            Constructor of instance <see cref="T:Aspose.ThreeD.Entities.LinearExtrusion"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.LinearExtrusion.#ctor(Aspose.ThreeD.Profiles.Profile,System.Double)">
            <summary>
            Constructor of instance <see cref="T:Aspose.ThreeD.Entities.LinearExtrusion"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.LinearExtrusion.ToMesh">
            <summary>
            Convert the extrusion to mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.ProjectionType">
            <summary>
            Camera's projection types.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ProjectionType.Perspective">
            <summary>
            The camera uses perspective projection. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ProjectionType.Orthographic">
            <summary>
            The camera uses orthographic projection.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.RotationMode">
            <summary>
            The frustum's rotation mode
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.RotationMode.FixedTarget">
            <summary>
            Target is fixed, direction is calculated by the look at target
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.RotationMode.FixedDirection">
            <summary>
            Direction is fixed, look at is calculated by the direction
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Frustum">
            <summary>
            The base class of <see cref="T:Aspose.ThreeD.Entities.Camera"/> and <see cref="T:Aspose.ThreeD.Entities.Light"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.RotationMode">
            <summary>
            Gets or sets the frustum's orientation mode
            This property only works when the <see cref="P:Aspose.ThreeD.Entities.Frustum.Target"/> is null.
            If the value is <see cref="F:Aspose.ThreeD.Entities.RotationMode.FixedTarget"/>, the direction is always calculated by the property <see cref="P:Aspose.ThreeD.Entities.Frustum.LookAt"/>
            Otherwise the <see cref="P:Aspose.ThreeD.Entities.Frustum.LookAt"/> is always calculated by the <see cref="P:Aspose.ThreeD.Entities.Frustum.Direction"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.NearPlane">
            <summary>
            Gets or sets the frustum's near plane distance.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.FarPlane">
            <summary>
            Gets or sets the frustum's far plane distance.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.Aspect">
            <summary>
            Gets or sets the aspect ratio of the frustum
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.OrthoHeight">
            <summary>
            Gets or sets the height when frustum in orthographic projection.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.Position">
            <summary>
            Gets or sets the position of the object, this is obsoleted, please use <see cref="P:Aspose.ThreeD.Node.Transform"/> to modify camera/light's position
            This property will be removed in the future.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.Up">
            <summary>
            Gets or sets the up direction of the camera
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.LookAt">
            <summary>
            Gets or sets the the interested position that the camera is looking at.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.Direction">
            <summary>
            Gets or sets the direction that the camera is looking at.
            Changes on this property will also affects the <see cref="P:Aspose.ThreeD.Entities.Frustum.LookAt"/> and <see cref="P:Aspose.ThreeD.Entities.Frustum.Target"/>.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Frustum.Target">
            <summary>
            Gets or sets the target that the camera is looking at.
            If the user supports this property, it should be prior to <see cref="P:Aspose.ThreeD.Entities.Frustum.LookAt"/> property.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.IMeshConvertible">
            <summary>
            Entities that implemented this interface can be converted to <see cref="T:Aspose.ThreeD.Entities.Mesh"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.IMeshConvertible.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.IOrientable">
            <summary>
            Orientable entities shall implement this interface.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.IOrientable.Direction">
            <summary>
            Gets or sets the direction that the entity is looking at.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.IOrientable.Target">
            <summary>
            Gets or sets the target that the entity is looking at.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.MeshTriangulator">
            <summary>
            This class encapsulates the algorithm to split polygon-based mesh into triangle-based mesh
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.MeshTriangulator.NewellNormal(System.Int32,Aspose.ThreeD.Utilities.Vector3[])">
            Compute the normal of an arbitrary polygon in R3.
            
              The code is based on Newell's formula, that is a polygons normal is the ratio
              of its area when projected onto the three coordinate axes.
            
              @param out Receives the output normal
              @param num Number of input vertices
              @param x X data source. x[ofs_x*n] is the n'th element.
              @param y Y data source. y[ofs_y*n] is the y'th element
              @param z Z data source. z[ofs_z*n] is the z'th element
            
              @note The data arrays must have storage for at least num+2 elements. Using
              this method is much faster than the 'other' NewellNormal()
        </member>
        <member name="T:Aspose.ThreeD.Entities.PolygonModifier">
            <summary>
            Utilities to modify polygons
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(Aspose.ThreeD.Scene)">
            <summary>
            Convert all polygon-based meshes into full triangle mesh
            </summary>
            <param name="scene">The scene to process</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(Aspose.ThreeD.Entities.Mesh)">
            <summary>
            Convert a polygon-based mesh into full triangle mesh
            </summary>
            <param name="mesh">The original non-triangle mesh</param>
            <returns>The generated new triangle mesh</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4},System.Collections.Generic.IList{System.Int32[]},System.Boolean,Aspose.ThreeD.Utilities.Vector3[]@)">
            <summary>
            Convert a polygon-based mesh into full triangle mesh
            </summary>
            <param name="controlPoints">Control points of the mesh</param>
            <param name="polygons">Polygon faces</param>
            <param name="generateNormals">Generate normals</param>
            <param name="nor_out">Generated Per-control point normal</param>
            <returns>A set of triangles</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4},System.Collections.Generic.IList{System.Int32[]})">
            <summary>
            Convert a polygon-based mesh into triangles
            </summary>
            <param name="controlPoints">Control points of the mesh</param>
            <param name="polygons">Polygon faces</param>
            <returns>A set of triangles</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4},System.Int32[])">
            <summary>
            Convert a polygon into triangles
            </summary>
            <param name="controlPoints">Control points of the mesh</param>
            <param name="polygon">Polygon face</param>
            <returns>A set of triangles</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Triangulate(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4})">
            <summary>
            Convert a polygon into triangles, the order of the polygon is defined by the <paramref name="controlPoints"/>
            </summary>
            <param name="controlPoints">Control points of the mesh</param>
            <returns>A set of triangles</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.MergeMesh(Aspose.ThreeD.Scene)">
            <summary>
            Convert a whole scene to a single transformed mesh
            Vertex elements like normal/texture coordinates are not supported yet
            </summary>
            <param name="scene">The scene to merge</param>
            <returns>The merged mesh</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.MergePointCloud(Aspose.ThreeD.Scene)">
            <summary>
            Convert the whole scene to a point cloud
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.MergePointCloud(Aspose.ThreeD.Node)">
            <summary>
            Convert a whole node to a single transformed point cloud
            Vertex elements like normal/texture coordinates are not supported yet
            </summary>
            <param name="node">The node to merge</param>
            <returns>Merged mesh</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.MergeMesh(System.Collections.Generic.IList{Aspose.ThreeD.Node})">
            <summary>
            Convert a whole node to a single transformed mesh
            Vertex elements like normal/texture coordinates are not supported yet
            </summary>
            <param name="nodes">The nodes to merge</param>
            <returns>Merged mesh</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.MergeMesh(Aspose.ThreeD.Node)">
            <summary>
            Convert a whole node to a single transformed mesh
            Vertex elements like normal/texture coordinates are not supported yet
            </summary>
            <param name="node">The node to merge</param>
            <returns>Merged mesh</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Scale(Aspose.ThreeD.Scene,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Scale all geometries(Scale the control points not the transformation matrix) in this scene
            </summary>
            <param name="scene">The scene to scale</param>
            <param name="scale">The scale factor</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.Scale(Aspose.ThreeD.Node,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Scale all geometries(Scale the control points not the transformation matrix) in this node
            </summary>
            <param name="node">The node to scale</param>
            <param name="scale">The scale factor</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.GenerateNormal(Aspose.ThreeD.Entities.Mesh)">
            <summary>
            Generate normal data from Mesh definition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.GenerateUV(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Entities.VertexElementNormal)">
            <summary>
            Generate UV data from the given input mesh and specified normal data.
            </summary>
            <param name="mesh">The input mesh</param>
            <param name="normals">The normal data</param>
            <returns>Generated UV data</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.GenerateUV(Aspose.ThreeD.Entities.Mesh)">
            <summary>
            Generate UV data from the given input mesh
            </summary>
            <param name="mesh">The input mesh</param>
            <returns>Generated UV data</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.SplitMesh(Aspose.ThreeD.Node,Aspose.ThreeD.Entities.SplitMeshPolicy,System.Boolean,System.Boolean)">
            <summary>
            Split mesh into sub-meshes by <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/>.
            Each sub-mesh will use only one material.
            Perform mesh splitting on a node
            </summary>
            <param name="node"></param>
            <param name="policy"></param>
            <param name="createChildNodes">Create child nodes for each sub-mesh.</param>
            <param name="removeOldMesh">Remove the old mesh after splitted, if this parameter is false, the old and new meshes will co-exists.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.SplitMesh(Aspose.ThreeD.Scene,Aspose.ThreeD.Entities.SplitMeshPolicy,System.Boolean)">
            <summary>
            Split mesh into sub-meshes by <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/>.
            Each sub-mesh will use only one material.
            Perform mesh splitting on all nodes of the scene.
            </summary>
            <param name="scene"></param>
            <param name="policy"></param>
            <param name="removeOldMesh"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.SplitMesh(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Entities.SplitMeshPolicy)">
            <summary>
            Split mesh into sub-meshes by <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/>.
            Each sub-mesh will use only one material.
            The original mesh will not get changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.BuildTangentBinormal(Aspose.ThreeD.Scene)">
            <summary>
            This will create tangent and binormal on all meshes of the scene
            Normal is required, if normal is not existing on the mesh, it will also create the normal data from position.
            UV is also required, the mesh will be ignored if no UV is defined.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifier.BuildTangentBinormal(Aspose.ThreeD.Entities.Mesh)">
            <summary>
            This will create tangent and binormal on the mesh
            Normal is required, if normal is not existing on the mesh, it will also create the normal data from position.
            UV is also required, an exception will be raised if no UV found.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.UVGenerator.GetProjectFace(Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            1 :YX
            2: XZ
            3: XY
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.SplitMeshPolicy">
            <summary>
            Share vertex/control point data between sub-meshes or each sub-mesh has its own compacted data.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.SplitMeshPolicy.CloneData">
            <summary>
            Control points and vertex elements data will be cloned
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.SplitMeshPolicy.CompactData">
            <summary>
            Only used control points and vertex elements data will be copied to the sub-mesh
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.SplitMesh(Aspose.ThreeD.Node,Aspose.ThreeD.Entities.SplitMeshPolicy,System.Boolean,System.Boolean)">
            <summary>
            Split mesh into sub-meshes by <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/>.
            Each sub-mesh will use only one material.
            Perform mesh splitting on a node
            </summary>
            <param name="node"></param>
            <param name="policy"></param>
            <param name="createChildNodes">Create child nodes for each sub-mesh.</param>
            <param name="removeOldMesh">Remove the old mesh after splitted, if this parameter is false, the old and new meshes will co-exists.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.SplitMesh(Aspose.ThreeD.Scene,Aspose.ThreeD.Entities.SplitMeshPolicy,System.Boolean)">
            <summary>
            Split mesh into sub-meshes by <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/>.
            Each sub-mesh will use only one material.
            Perform mesh splitting on all nodes of the scene.
            </summary>
            <param name="scene"></param>
            <param name="policy"></param>
            <param name="removeOldMesh"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.SplitMesh(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Entities.SplitMeshPolicy)">
            <summary>
            Split mesh into sub-meshes by <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/>.
            Each sub-mesh will use only one material.
            The original mesh will not get changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.DispatchCompactData(Aspose.ThreeD.Entities.VertexElement[],Aspose.ThreeD.Entities.VertexElementVector4,System.Int32[][])">
            <summary>
            Dispatch data referenced by index to vertex elements, indice will be rebuilt during this procedure.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.DispatchCompactData``1(Aspose.ThreeD.Entities.VertexElement[],Aspose.ThreeD.Entities.VertexElementTemplate{``0},System.Int32[][])">
            <summary>
            Dispatch data referenced by index to vertex elements, indice will be rebuilt during this procedure.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.DispatchCompactIndiceByControlPoint(Aspose.ThreeD.Entities.VertexElement[],Aspose.ThreeD.Utilities.IntList,System.Int32[][])">
            <summary>
            Dispatch indice mapped by control point to each vertex elements
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.DispatchCompactDataByControlPoint(Aspose.ThreeD.Entities.VertexElement[],Aspose.ThreeD.Utilities.Vector4List,System.Int32[][])">
            <summary>
            Dispatch data mapped by control point to each vertex elements
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.DispatchCompactDataByControlPoint``1(Aspose.ThreeD.Entities.VertexElement[],Aspose.ThreeD.Utilities.ArrayList{``0},System.Int32[][])">
            <summary>
            Dispatch data mapped by control point to each vertex elements
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.DispatchData(Aspose.ThreeD.Utilities.IntList,Aspose.ThreeD.Entities.VertexElement[],Aspose.ThreeD.Utilities.Vector4List,System.Int32[])">
            <summary>
            Dispatch data from original vertex element to sub mesh's vertex elements
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.DispatchData``1(Aspose.ThreeD.Utilities.IntList,Aspose.ThreeD.Entities.VertexElement[],Aspose.ThreeD.Utilities.ArrayList{``0},System.Int32[])">
            <summary>
            Dispatch data from original vertex element to sub mesh's vertex elements
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonModifierSplitMeshImpl.CloneMeshData(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Entities.Mesh)">
            <summary>
            Clone control points, and data of each vertex element
            </summary>
            <param name="dst"></param>
            <param name="src"></param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.PolygonIndicesList">
            <summary>
            This class stores the polygon indices data in a compact memory model to reduce memory fragments and GC overheads.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.PolygonIndicesList.maxPolygonSize">
            <summary>
            The max number of polygon vertices
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.PolygonIndicesList.Count">
            <summary>
            Gets the count of polygons
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.PolygonIndicesList.PolygonVertexCount">
            <summary>
            Gets the count of polygon vertices
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.SplineUtils.FindSpan(System.Int32,System.Double[],System.Int32,System.Double,System.Double)">
            <summary>
            Find the span of the knots
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.SplineUtils.NormalizeKnots(System.Double[])">
            <summary>
            Normalize the knots to 0~1
            </summary>
            <param name="knots"></param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.BasisFunction">
            <summary>
            Cached basis function for spline curve/surface calculation
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.PolygonBuilder">
            <summary>
            A helper class to build polygon for <see cref="T:Aspose.ThreeD.Entities.Mesh"/>
            </summary>
            <example>
            <code>
            PolygonBuilder builder = new PolygonBuilder(mesh);
            builder.Begin();
            builder.AddVertex(0);
            builder.AddVertex(1);
            builder.AddVertex(2);
            Builder.End();
            </code>
            Equals to :
            <code>
            int[] indices = new int[] {0, 1, 2};
            mesh.CreatePolygon(indices);
            </code>
            If all indices are ready to use, <see cref="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32[])"/> is preferred, otherwise <see cref="T:Aspose.ThreeD.Entities.PolygonBuilder"/> would be a better choice.
            </example>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonBuilder.#ctor(Aspose.ThreeD.Entities.Mesh)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.PolygonBuilder"/> class.
            </summary>
            <param name="mesh">On which mesh to build polygon.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonBuilder.Begin">
            <summary>
            Begins to add a new polygon
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonBuilder.AddVertex(System.Int32)">
            <summary>
            Adds a vertex index to the polygon
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.PolygonBuilder.End">
            <summary>
            Finishes the polygon creation
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Box">
            <summary>
            Box.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Box.LengthSegments">
            <summary>
            Gets or sets the length segments.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Box.WidthSegments">
            <summary>
            Gets or sets the width segments
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Box.HeightSegments">
            <summary>
            gets or sets the height segments.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Box.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Box"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Box.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Box"/> class.
            </summary>
            <param name="length">Length of the box aligned in z-axis.</param>
            <param name="width">Width of the box aligned in x-axis.</param>
            <param name="height">Height of the box aligned in y-axis.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Box.#ctor(System.String,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Box"/> class.
            </summary>
            <param name="name">Name of the box.</param>
            <param name="length">Length of the box aligned in z-axis.</param>
            <param name="width">Width of the box aligned in x-axis.</param>
            <param name="height">Height of the box aligned in y-axis.</param>
            <param name="lengthSegments">Length segments.</param>
            <param name="widthSegments">Width segments.</param>
            <param name="heightSegments">Height segments.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Box.Length">
            <summary>
            Gets or sets the length of the box aligned in z-axis.
            </summary>
            <value>The length aligned in z-axis.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Box.Width">
            <summary>
            Gets or sets the width of the box aligned in x-axis.
            </summary>
            <value>The width aligned in x-axis.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Box.Height">
            <summary>
            Gets or sets the height of the box aligned in y-axis.
            </summary>
            <value>The height aligned in y-axis.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Box.GetHashCode">
            <summary>
            Gets the hash code of current primitive instance
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Box"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Box.Equals(System.Object)">
            <summary>
            Check if two boxes equal
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all properties are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Box.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Box.GetBoundingBox(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Gets the bounding box of current entity in its object space coordinate system.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Cylinder">
            <summary>
            Parameterized Cylinder.
            It can also be used to represent the cone when one of radiusTop/radiusBottom is zero.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.OffsetBottom">
            <summary>
            Gets or sets the vertices transformation offset of the bottom side.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.OffsetTop">
            <summary>
            Gets or sets the vertices transformation offset of the top side.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.GenerateFanCylinder">
            <summary>
            Gets or sets whether to generate the fan-style cylinder when the ThetaLength is less than 2*PI, otherwise the model will not be cut.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.ShearBottom">
            <summary>
            Gets or sets of the shear transform of the bottom side, vector stores the (x-axis, z-axis) shear value that measured in radian, default value is (0, 0)
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.ShearTop">
            <summary>
            Gets or sets of the shear transform of the top side, vector stores the (x-axis, z-axis) shear value that measured in radian, default value is (0, 0)
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder"/> class.
            </summary>
            <param name="radius">Radius of the top and bottom cap.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder"/> class.
            </summary>
            <param name="radiusTop">Radius top.</param>
            <param name="radiusBottom">Radius bottom.</param>
            <param name="height">Height.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder"/> class.
            </summary>
            <param name="radiusTop">Radius of cylinder's top cap.</param>
            <param name="radiusBottom">Radius of cylinder's bottom cap.</param>
            <param name="height">Height of the cylinder.</param>
            <param name="radialSegments">Radial segments of both top and bottom circles..</param>
            <param name="heightSegments">Height segments.</param>
            <param name="openEnded">If set to <c>true</c> the cylinder would have no bottom/top caps..</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cylinder.#ctor(System.String,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cylinder"/> class.
            </summary>
            <param name="name"> The name of this object</param>
            <param name="radiusTop">Radius of cylinder's top cap.</param>
            <param name="radiusBottom">Radius of cylinder's bottom cap.</param>
            <param name="height">Height of the cylinder.</param>
            <param name="radialSegments">Radial segments of both top and bottom circles..</param>
            <param name="heightSegments">Height segments.</param>
            <param name="openEnded">If set to <c>true</c> the cylinder would have no bottom/top caps..</param>
            <param name="thetaStart">Theta start.</param>
            <param name="thetaLength">Theta length.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.RadiusTop">
            <summary>
            Gets or sets the radius of cylinder's top cap.
            </summary>
            <value>The radius of the top cap.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.RadiusBottom">
            <summary>
            Gets or sets the radius bottoof cylinder's bottom cap.
            </summary>
            <value>The radius of the bottom cap.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.Height">
            <summary>
            Gets or sets the height of the cylinder.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.RadialSegments">
            <summary>
            Gets or sets the radial segments.
            </summary>
            <value>The radial segments.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.HeightSegments">
            <summary>
            Gets or sets the height segments.
            </summary>
            <value>The height segments.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.OpenEnded">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Entities.Cylinder"/> open ended.
            The default value is false.
            </summary>
            <value><c>true</c> if open ended; otherwise, top/bottom caps exists.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.ThetaStart">
            <summary>
            Gets or sets the theta start.
            The default value is 0.
            </summary>
            <value>The theta start.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Cylinder.ThetaLength">
            <summary>
            Gets or sets the length of the theta.
            The default value is 2π.
            </summary>
            <value>The length of the theta.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cylinder.GetHashCode">
            <summary>
            Gets the hash code of current primitive instance
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Cylinder"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cylinder.Equals(System.Object)">
            <summary>
            Check if two cylinders equal
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all properties are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cylinder.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cylinder.GetBoundingBox(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Gets the bounding box of current entity in its object space coordinate system.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Dish">
            <summary>
            Parameterized dish.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Dish.Height">
            <summary>
            Height of the dish
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Dish.Radius">
            <summary>
            Radius of the dish
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Dish.WidthSegments">
            <summary>
            Gets or sets the width segments
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Dish.HeightSegments">
            <summary>
            Gets or sets the height segments
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Dish.#ctor">
            <summary>
            Create a new dish instance with default radius(10) and default height(5)
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Dish.#ctor(System.Double,System.Double)">
            <summary>
            Create a new dish instance with specified radius and height
            </summary>
            <param name="radius">The radius of the dish</param>
            <param name="height">The height of the dish</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Dish.#ctor(System.String,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Create a new dish instance with specified radius and height
            </summary>
            <param name="name">The name of the dish</param>
            <param name="radius">The radius of the dish</param>
            <param name="height">The height of the dish</param>
            <param name="widthSegments">The width segment of the dish</param>
            <param name="heightSegments">The height segment of the dish</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Dish.GetHashCode">
            <summary>
            Gets the hash code of current primitive instance
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Dish"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Dish.Equals(System.Object)">
            <summary>
            Check if two dishes equal
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all properties are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Dish.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Plane">
            <summary>
            Parameterized plane.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Plane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Plane"/> with default size 1x1.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Plane.Up">
            <summary>
            Gets or sets the up vector of the plane, default value is (0, 1, 0), this affects the generation of the plane
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Plane.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Plane"/>.
            </summary>
            <param name="length">Length of the plane.</param>
            <param name="width">Width of the plane.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Plane.#ctor(System.String,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Plane"/>.
            </summary>
            <param name="name">Name.</param>
            <param name="length">Length of the plane.</param>
            <param name="width">Width of the plane.</param>
            <param name="lengthSegments">Length segments.</param>
            <param name="widthSegments">Width segments.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Plane.GetHashCode">
            <summary>
            Gets the hash code of current primitive instance
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Plane"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Plane.Equals(System.Object)">
            <summary>
            Check if two planes equal
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all properties are identically equal.</returns>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Plane.Length">
            <summary>
            Gets or sets the length of the plane.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Plane.Width">
            <summary>
            Gets or sets the width of the plane.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Plane.LengthSegments">
            <summary>
            Gets or sets the length segments.
            </summary>
            <value>The length segments.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Plane.WidthSegments">
            <summary>
            Gets or sets the width segments.
            </summary>
            <value>The width segments.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Plane.GetBoundingBox(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Gets the bounding box of current entity in its object space coordinate system.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Plane.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Primitive">
            <summary>
            Base class for all primitives
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Primitive.CastShadows">
            <summary>
            Gets or sets wheather this geometry can cast shadow
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Primitive.ReceiveShadows">
            <summary>
            Gets or sets wheather this geometry can receive shadow.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Primitive.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Primitive"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Primitive.Merge(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Utilities.Vector4[]@,Aspose.ThreeD.Utilities.Vector4[]@,Aspose.ThreeD.Utilities.Vector2[]@)">
            <summary>
            Merge the specified mesh, positions, normals and uvs.
            </summary>
            <param name="mesh">Mesh.</param>
            <param name="positions">Positions.</param>
            <param name="normals">Normals.</param>
            <param name="uvs">Uvs.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Primitive.Setup(Aspose.ThreeD.Entities.Mesh,Aspose.ThreeD.Utilities.Vector4[],Aspose.ThreeD.Utilities.Vector4[],Aspose.ThreeD.Utilities.Vector4[])">
            <summary>
            Build the mesh from given positions/normals/uvs.
            </summary>
            <param name="mesh">Mesh.</param>
            <param name="positions">Positions.</param>
            <param name="normals">Normals.</param>
            <param name="uvs">Uvs.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Primitive.CreateEmptyMesh">
            <summary>
            Create an empty mesh object with inherited properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Primitive.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Pyramid">
            <summary>
            Parameterized pyramid.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Pyramid.BottomArea">
            <summary>
            Area of the bottom cap
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Pyramid.TopArea">
            <summary>
            Area of the top cap
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Pyramid.BottomOffset">
            <summary>
            Offset for bottom vertices
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Pyramid.Height">
            <summary>
            Height of the pyramid
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Pyramid.#ctor">
            <summary>
            Construct a new pyramid instance with default bottom area(10, 10) and default height(5)
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Pyramid.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct a new pyramid instance with specified bottom area
            </summary>
            <param name="xbottom">The x-direction length of the bottom</param>
            <param name="ybottom">The y-direction length of the bottom</param>
            <param name="height">The height of the pyramid</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Pyramid.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new pyramid instance with specified bottom area and top area and height.
            </summary>
            <param name="xbottom">The x-direction length of the bottom area</param>
            <param name="ybottom">The y-direction length of the bottom area</param>
            <param name="xtop">The x-direction length of the top area</param>
            <param name="ytop">The y-direction length of the top area</param>
            <param name="height">The height of the pyramid</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Pyramid.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new pyramid instance with specified bottom area and top area and height.
            </summary>
            <param name="name">The name of the pyramid</param>
            <param name="xbottom">The x-direction length of the bottom area</param>
            <param name="ybottom">The y-direction length of the bottom area</param>
            <param name="xtop">The x-direction length of the top area</param>
            <param name="ytop">The y-direction length of the top area</param>
            <param name="height">The height of the pyramid</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Pyramid.GetHashCode">
            <summary>
            Gets the hash code of current primitive instance
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Pyramid"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Pyramid.Equals(System.Object)">
            <summary>
            Check if two pyramids equal
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all properties are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Pyramid.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.RectangularTorus">
            <summary>
            Parameterized rectangular torus.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RectangularTorus.InnerRadius">
            <summary>
            The inner radius of the rectangular torus
            Default value is 17
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RectangularTorus.OuterRadius">
            <summary>
            The outer radius of the rectangular torus
            Default value is 20
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RectangularTorus.Height">
            <summary>
            The height of the rectangular torus.
            Default value is 20
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RectangularTorus.Arc">
            <summary>
            The total angle of the arc, measured in radian.
            Default value is PI
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RectangularTorus.AngleStart">
            <summary>
            The start angle of the arc, measured in radian.
            Default value is 0
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.RectangularTorus.RadialSegments">
            <summary>
            The radial segments, default value is 10
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.RectangularTorus.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.RectangularTorus"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.RectangularTorus.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Entities.RectangularTorus"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.RectangularTorus.GetHashCode">
            <summary>
            Gets the hash code of current primitive instance
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.RectangularTorus"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.RectangularTorus.Equals(System.Object)">
            <summary>
            Check if two rectangular torus equal
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all properties are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.RectangularTorus.ToMesh">
            <summary>
            Convert this primitive to <see cref="T:Aspose.ThreeD.Entities.Mesh"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Sphere">
            <summary>
            Parameterized sphere.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Sphere.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Sphere"/> with default radius 1.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Sphere.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Sphere"/> class with specified radius.
            </summary>
            <param name="radius">Radius.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Sphere.#ctor(System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Sphere"/> class with specified radius, width segments and height segments.
            </summary>
            <param name="radius">Radius of the sphere.</param>
            <param name="widthSegments">Width segments.</param>
            <param name="heightSegments">Height segments.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Sphere.#ctor(System.String,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Sphere"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="radius">Radius of the sphere.</param>
            <param name="widthSegments">Width segments.</param>
            <param name="heightSegments">Height segments.</param>
            <param name="phiStart">Phi start.</param>
            <param name="phiLength">Phi length.</param>
            <param name="thetaStart">Theta start.</param>
            <param name="thetaLength">Theta length.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Sphere.GetHashCode">
            <summary>
            Gets the hash code of current primitive instance
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Sphere"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Sphere.Equals(System.Object)">
            <summary>
            Check if two spheres equal
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all properties are identically equal.</returns>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Sphere.WidthSegments">
            <summary>
            Gets or sets the width segments.
            </summary>
            <value>The width segments.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Sphere.HeightSegments">
            <summary>
            Gets or sets the height segments.
            </summary>
            <value>The height segments.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Sphere.PhiStart">
            <summary>
            Gets or sets the phi start.
            </summary>
            <value>The phi start.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Sphere.PhiLength">
            <summary>
            Gets or sets the length of the phi.
            </summary>
            <value>The length of the phi.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Sphere.ThetaStart">
            <summary>
            Gets or sets the theta start.
            </summary>
            <value>The theta start.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Sphere.ThetaLength">
            <summary>
            Gets or sets the length of the theta.
            </summary>
            <value>The length of the theta.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Sphere.Radius">
            <summary>
            Gets or sets the radius of the sphere.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Sphere.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Text">
            <summary>
            TODO: Release this in the future version due to this involves an complex computational geometry algorithm.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Torus">
            <summary>
            Parameterized torus.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Torus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Torus"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Torus.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Torus"/> class.
            </summary>
            <param name="radius">The radius of the torus.</param>
            <param name="tube">The radius of the torus' tube.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Torus.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Torus"/> class.
            </summary>
            <param name="radius">The radius of the torus.</param>
            <param name="tube">The radius of the torus' tube.</param>
            <param name="arc">Arc.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Torus.#ctor(System.String,System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Torus"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="radius">The radius of the torus.</param>
            <param name="tube">The radius of the torus' tube.</param>
            <param name="radialSegments">Radial segments.</param>
            <param name="tubularSegments">Tubular segments.</param>
            <param name="arc">Arc.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Torus.GetHashCode">
            <summary>
            Gets the hash code of current primitive instance
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Entities.Torus"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Torus.Equals(System.Object)">
            <summary>
            Check if two toruses equal
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all properties are identically equal.</returns>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Torus.Radius">
            <summary>
            Gets or sets the radius of the torus.
            </summary>
            <value>The radius.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Torus.Tube">
            <summary>
            Gets or sets the radius of the tube.
            </summary>
            <value>The tube.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Torus.RadialSegments">
            <summary>
            Gets or sets the radial segments.
            </summary>
            <value>The radial segments.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Torus.TubularSegments">
            <summary>
            Gets or sets the tubular segments.
            </summary>
            <value>The tubular segments.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Torus.Arc">
            <summary>
            Gets or sets the arc.
            </summary>
            <value>The arc.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Torus.GetBoundingBox(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Gets the bounding box of current entity in its object space coordinate system.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Torus.ToMesh">
            <summary>
            Convert current object to mesh
            </summary>
            <returns>The mesh.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementConverter.GetIndicesToPolygonVertex(Aspose.ThreeD.Entities.IIndicedVertexElement,Aspose.ThreeD.Entities.Mesh)">
            <summary>
            Map the current VertexElementTemplate to <see cref="F:Aspose.ThreeD.Entities.MappingMode.PolygonVertex"/>
            Returned indices used in <see cref="F:Aspose.ThreeD.Entities.ReferenceMode.IndexToDirect"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.TriMesh">
            <summary>
            A TriMesh contains raw data that can be used by GPU directly.
            This class is a utility to help to construct a mesh that only contains per-vertex data. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.#ctor(System.String)">
            <summary>
            Initialize a <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.#ctor(System.String,Aspose.ThreeD.Utilities.VertexDeclaration)">
            <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>
            </summary>
            <param name="name">The name of this TriMesh</param>
            <param name="declaration">The vertex's declaration</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TriMesh.VertexDeclaration">
            <summary>
            The vertex layout of the <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TriMesh.VerticesCount">
            <summary>
            The count of vertices in this <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TriMesh.IndicesCount">
            <summary>
            The count of indices in this <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TriMesh.UnmergedVerticesCount">
            <summary>
            The count of unmerged vertices that passed in by <see cref="M:Aspose.ThreeD.Entities.TriMesh.BeginVertex"/> and <see cref="M:Aspose.ThreeD.Entities.TriMesh.EndVertex"/>.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TriMesh.Capacity">
            <summary>
            The capacity of preallocated vertices.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TriMesh.VerticesSizeInBytes">
            <summary>
            The total size of all vertices in bytes
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.FromMesh(Aspose.ThreeD.Utilities.VertexDeclaration,Aspose.ThreeD.Entities.Mesh)">
            <summary>
            Create a TriMesh from given mesh object with given vertex layout.
            </summary>
            <param name="declaration"></param>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.ConstructTriMesh(Aspose.ThreeD.Entities.TriMesh,Aspose.ThreeD.Entities.Mesh,System.Boolean)">
            <summary>
            Construct the <see cref="T:Aspose.ThreeD.Entities.TriMesh"/> from <see cref="T:Aspose.ThreeD.Entities.Mesh"/>
            </summary>
            <param name="ret"></param>
            <param name="mesh"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.EnsureCapacity(System.Int32)">
            <summary>
            Ensure the capacity is good enough
            </summary>
            <param name="numVertices">The count of vertices</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.CopyFrom(Aspose.ThreeD.Entities.TriMesh,Aspose.ThreeD.Utilities.VertexDeclaration)">
            <summary>
            Copy the <see cref="T:Aspose.ThreeD.Entities.TriMesh"/> from input with new vertex layout
            </summary>
            <param name="input">The input TriMesh for copying</param>
            <param name="vd">The new vertex delcaration of the output TriMesh</param>
            <returns>A new TriMesh instance with new vertex declaration.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.FromMesh(Aspose.ThreeD.Entities.Mesh,System.Boolean)">
            <summary>
            Create a TriMesh from given mesh object, the vertex declaration are based on the input mesh's structure.
            </summary>
            <param name="mesh"></param>
            <param name="useFloat">Use float type instead of double type for each vertex element component.</param>
            <returns>The <see cref="T:Aspose.ThreeD.Entities.TriMesh"/> generated from given <see cref="T:Aspose.ThreeD.Entities.Mesh"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.BeginVertex">
            <summary>
            Begin adding vertex
            </summary>
            <returns>The reference of internal vertex object in type <see cref="T:Aspose.ThreeD.Utilities.Vertex"/> </returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.EndVertex">
            <summary>
            End adding vertex
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.WriteVerticesTo(System.IO.Stream)">
            <summary>
            Write vertices data to the specified stream
            </summary>
            <param name="stream">The stream that the vertices data will be written to</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.Write16bIndicesTo(System.IO.Stream)">
            <summary>
            Write the indices data as 16bit integer to the stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.Write32bIndicesTo(System.IO.Stream)">
            <summary>
            Write the indices data as 32bit integer to the stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.VerticesToArray">
            <summary>
            Convert the vertices data to byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.IndicesToArray(System.UInt16[]@)">
            <summary>
            Convert the indices to 16bit integer array
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.IndicesToArray(System.Int32[]@)">
            <summary>
            Convert the indices to 32bit integer array
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.ToString">
            <summary>
            Gets the string representation of <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.FromRawData(Aspose.ThreeD.Utilities.VertexDeclaration,System.Byte[],System.Int32[],System.Boolean)">
            <summary>
            Create TriMesh from raw data
            </summary>
            <param name="vd">Vertex declaration, must contains at least one field.</param>
            <param name="vertices">The input vertex data, the minimum length of the vertices must be greater or equal to vertex declaration's size</param>
            <param name="indices">The triangle indices</param>
            <param name="generateVertexMapping">Generate <see cref="T:Aspose.ThreeD.Utilities.Vertex"/> for each vertex, which is not necessary for just serialization/deserialization.</param>
            <returns>The <see cref="T:Aspose.ThreeD.Entities.TriMesh"/> instance that encapsulated the input byte array.</returns>
            <remarks>The returned TriMesh will not copy the input byte array for performance, external changes on the array will be reflected to this instance.</remarks>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh.GetEnumerator">
            <summary>
            Get the enumerator to enumerate <see cref="T:Aspose.ThreeD.Utilities.Vertex"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.TriMesh`1">
            <summary>
            Generic version of <see cref="T:Aspose.ThreeD.Entities.TriMesh"/> for user's static-defined vertex type
            </summary>
            <typeparam name="T"></typeparam>
            <![CDATA[Moved to this source file to make msbuild happy.]]>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh`1.#ctor(System.String)">
            <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh`1.FromMesh(Aspose.ThreeD.Entities.Mesh)">
            <summary>
            Create a TriMesh from given mesh object with automaticly generated vertex layout.
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TriMesh`1.VerticesToTypedArray">
            <summary>
            Convert the vertices data to typed array
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.NamespaceDoc">
            <summary>
            All geometry and entities are defined in this namespace
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Camera">
            <summary>
            The camera describes the eye point of the viewer looking at the scene.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.Camera.MinimumNearPlane">
            <summary>
            The minimum near plane value
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Camera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Camera"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Camera.#ctor(Aspose.ThreeD.Entities.ProjectionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Camera"/> class.
            </summary>
            <param name="projectionType">Projection type.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Camera.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Camera"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Camera.#ctor(System.String,Aspose.ThreeD.Entities.ProjectionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Camera"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="projectionType">Projection type.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Camera.ApertureMode">
            <summary>
            Gets or sets the camera's aperture mode
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Camera.FieldOfView">
            <summary>
            Gets or sets the camera's field of view in degrees, this property is used only when ApertureMode is <see cref="F:Aspose.ThreeD.Entities.ApertureMode.Horizontal"/> or <see cref="F:Aspose.ThreeD.Entities.ApertureMode.Vertical"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Camera.FieldOfViewX">
            <summary>
            Gets or sets the camera's horizontal field of view in degrees, this property is used only when ApertureMode is  <see cref="F:Aspose.ThreeD.Entities.ApertureMode.HorizAndVert"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Camera.FieldOfViewY">
            <summary>
            Gets or sets the camera's vertical field of view in degrees, this property is used only when ApertureMode is  <see cref="F:Aspose.ThreeD.Entities.ApertureMode.HorizAndVert"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Camera.Width">
            <summary>
            Gets or sets the view plane's width measured in inches
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Camera.Height">
            <summary>
            Gets or sets the view plane's height measured in inches
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Camera.AspectRatio">
            <summary>
            Gets or sets the view plane aspect ratio.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Camera.Magnification">
            <summary>
            Gets or sets the maginification used in orthographic camera
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Camera.ProjectionType">
            <summary>
            Gets or sets the camera's projection type.
            By default the perspective projection is used.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Camera.ComputeFocalLength(System.Double)">
            <summary>
            Computes the focal length based on the given angle of view, the aperture width, and aperture height.
            </summary>
            <remarks>If aperture mode is not vertical, horizontal is assumed</remarks>
            <param name="angleOfView">The angle of view in degrees</param>
            <returns>Focal length</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Camera.ComputeFieldOfView(System.Double)">
            <summary>
            Computes the angle of view based on the given focal length, the aperture width, and aperture height.
            </summary>
            <remarks>If aperture mode is not vertical, horizontal is assumed</remarks>
            <param name="focalLength">The focal length in millimeters. </param>
            <returns>Angle value</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Camera.MoveForward(System.Double)">
            <summary>
            Move camera forward towards its direction or target.
            </summary>
            <param name="distance">How long to move forward</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.LightType">
            <summary>
            Light types.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.LightType.Point">
            <summary>
            The point light.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.LightType.Directional">
            <summary>
            The directional light.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.LightType.Spot">
            <summary>
            The spot light.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.LightType.Area">
            <summary>
            The area light.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.LightType.Volume">
            <summary>
            The volume light.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Light">
            <summary>
            The light illuminates the scene.
            <para/>
            The formula to calculate the total attenuation of light is:
            <c>A = ConstantAttenuation + (Dist * LinearAttenuation) + ((Dist^2) * QuadraticAttenuation)</c>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.Color">
            <summary>
            Gets or sets the light's color
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.LightType">
            <summary>
            Gets or sets the light's type
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.CastLight">
            <summary>
            Gets or sets if the current light instance can illuminate other objects.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.Intensity">
            <summary>
            Gets or sets the light's intensity, default value is 100
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.HotSpot">
            <summary>
            Gets or sets the hot spot cone angle(in degrees).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.Falloff">
            <summary>
            Gets or sets the falloff cone angle (in degrees).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.ConstantAttenuation">
            <summary>
             Gets or sets the constant attenuation to calculate the total attenuation of the light
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.LinearAttenuation">
            <summary>
             Gets or sets the linear attenuation to calculate the total attenuation of the light
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.QuadraticAttenuation">
            <summary>
             Gets or sets the quadratic attenuation to calculate the total attenuation of the light
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.CastShadows">
            <summary>
            Gets or sets if the light can cast shadows on other objects.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Light.ShadowColor">
            <summary>
            Gets or sets the shadow's color.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Light.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Light"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Light.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Light"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Light.#ctor(System.String,Aspose.ThreeD.Entities.LightType)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Light"/> class.
            </summary>
            <param name="name">Name</param>
            <param name="type">New light's type</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Mesh">
            <summary>
            A mesh is made of many n-sided polygons.
            </summary>
            <example>
            To add a polygon in mesh:
            <code>
            int[] indices = new int[] {0, 1, 2};
            mesh.CreatePolygon(indices);
            </code>
            Travel through all polygons in mesh:
            <code>
            foreach(int[] polygon in mesh)
            {
                //deal with polygon
            }
            </code>
            </example>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Mesh"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor(System.Drawing.Bitmap)">
            <summary>
            Construct a mesh using specified height map, 
            if the height map's pixel format contains multiple components, the first(usually the red) component will be used as the height value(z)
            The control point's x and y components are normalized pixel coordinate.
            </summary>
            <param name="heightMap">Input height map</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor(System.Drawing.Bitmap,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Construct a mesh using specified height map, 
            if the height map's pixel format contains multiple components, the first(usually the red) component will be used as the height value(z)
            The control point's x and y components are normalized pixel coordinate.
            </summary>
            <param name="heightMap">Input height map</param>
            <param name="transform">The transform that applied on the control points</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor(System.Drawing.Bitmap,System.Boolean,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Construct a mesh using specified height map, 
            if the height map's pixel format contains multiple components, the first(usually the red) component will be used as the height value(z)
            The control point's x and y components are normalized pixel coordinate.
            </summary>
            <param name="heightMap">Input height map</param>
            <param name="triMesh"></param>
            <param name="transform">The transform that applied on the control points</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Mesh"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Mesh.Edges">
            <summary>
            Gets edges of the Mesh.  Edge is optional in mesh, so it can be empty.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.GetPolygonSize(System.Int32)">
            <summary>
            Gets the vertex count of the specified polygon.
            </summary>
            <returns>The polygon size.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.GetEnumerator">
            <summary>
            Gets the enumerator for each inner polygons.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Mesh.PolygonCount">
            <summary>
            Gets the count of polygons
            </summary>
            <value>The polygon count.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Mesh.PolygonVertexCount">
            <summary>
            Gets the count of all polygon vertex.
            </summary>
            <value>The polygon vertex count.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Mesh.Polygons">
            <summary>
            Gets the polygons definition of the mesh 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.Reset">
            <summary>
            Reset all contents inside this mesh
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a new polygon with all vertices defined in <paramref name="indices"/>.
            To create polygon vertex by vertex, please use <see cref="T:Aspose.ThreeD.Entities.PolygonBuilder"/>.
            </summary>
            <example>
            <code>
            int[] indices = new int[] {0, 1, 2};
            mesh.CreatePolygon(indices);
            </code>
            </example>
            <param name="indices">Array of the polygon indices, each index points to a control point that forms the polygon.</param>
            <param name="offset">The offset of the first polygon index</param>
            <param name="length">The length of the indices</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32[])">
            <summary>
            Creates a new polygon with all vertices defined in <paramref name="indices"/>.
            To create polygon vertex by vertex, please use <see cref="T:Aspose.ThreeD.Entities.PolygonBuilder"/>.
            </summary>
            <example>
            <code>
            int[] indices = new int[] {0, 1, 2};
            mesh.CreatePolygon(indices);
            </code>
            </example>
            <param name="indices">Array of the polygon indices, each index points to a control point that forms the polygon.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a polygon with 4 vertices(quad)
            </summary>
            <param name="v1">Index of the first vertex</param>
            <param name="v2">Index of the second vertex</param>
            <param name="v3">Index of the third vertex</param>
            <param name="v4">Index of the fourth vertex</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.CreatePolygon(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a polygon with 3 vertices(triangle)
            </summary>
            <param name="v1">Index of the first vertex</param>
            <param name="v2">Index of the second vertex</param>
            <param name="v3">Index of the third vertex</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Mesh.TriMesh">
            <summary>
            Return true if all polygons inside this mesh are triangles
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.ToMesh">
            <summary>
            Gets the Mesh instance from current entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Mesh.GetElementData(Aspose.ThreeD.Entities.VertexElementVector4,System.Int32,System.Int32)">
            <summary>
            Get the data at specified position
            </summary>
            <param name="element">The vertex element data to read</param>
            <param name="polygon">The index of the polygon</param>
            <param name="vertex">The index of the vertex index</param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Geometry">
            <summary>
            The base class of all renderable geometric objects (like <see cref="T:Aspose.ThreeD.Entities.Mesh"/>, <see cref="T:Aspose.ThreeD.Entities.NurbsSurface"/>, <see cref="T:Aspose.ThreeD.Entities.Patch"/> and etcs).
            <para/>
            The <see cref="T:Aspose.ThreeD.Entities.Geometry"/> base class supports:  
            <ul>
            <li><b>Control point management</b>, control points defines the base 3D spatial structure of the geometry, different geometric types has different way to define concrete 3D models. </li>
            <li><b>Vertex element definition</b>, vertex elements applies extra informations like normals/uv coordinates/vertex colors to the geometry, see <see cref="T:Aspose.ThreeD.Entities.VertexElement"/> for more details.</li>
            <li><b>Object deforming</b>, <see cref="T:Aspose.ThreeD.Deformers.Deformer"/> can be binded to animate geometry's shape.</li>
            </ul>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Geometry"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.GetBoundingBox(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Gets the bounding box of current entity in its object space coordinate system.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Geometry.Visible">
            <summary>
            Gets or sets if the geometry is visible
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Geometry.Deformers">
            <summary>
            Gets all deformers assocated with this geometry.
            </summary>
            <value>The deformers.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.GetDeformers``1">
            <summary>
            Gets all deformers with specified deformer types
            </summary>
            <typeparam name="T">The deformer type</typeparam>
            <returns>Deformer collection</returns>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Geometry.ControlPoints">
            <summary>
            Gets all control points
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Geometry.CastShadows">
            <summary>
            Gets or sets wheather this geometry can cast shadow
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Geometry.ReceiveShadows">
            <summary>
            Gets or sets wheather this geometry can receive shadow.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Geometry.VertexElements">
            <summary>
            Gets all vertex elements
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.GetElement(Aspose.ThreeD.Entities.VertexElementType)">
            <summary>
            Gets a vertex element with specified type
            </summary>
            <param name="type">which vertex element type to find</param>
            <returns><see cref="T:Aspose.ThreeD.Entities.VertexElement"/> instance if found, otherwise null will be returned.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.GetVertexElementOfUV(Aspose.ThreeD.Entities.TextureMapping)">
            <summary>
            Gets a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/> instance with given texture mapping type
            </summary>
            <param name="textureMapping"></param>
            <returns>VertexElementUV with the texture mapping type</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.CreateElement(Aspose.ThreeD.Entities.VertexElementType)">
            <summary>
            Creates a vertex element with specified type and add it to the geometry.
            </summary>
            <remarks>
            If type is <see cref="F:Aspose.ThreeD.Entities.VertexElementType.UV"/>, a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/> with texture mapping type to <see cref="F:Aspose.ThreeD.Entities.TextureMapping.Diffuse"/> will be created.
            </remarks>
            <param name="type">Vertex element type</param>
            <returns>Created element.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.AddElement(Aspose.ThreeD.Entities.VertexElement)">
            <summary>
            Adds an existing vertex element to current geometry
            </summary>
            <param name="element">The vertex element to add</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.CreateElement(Aspose.ThreeD.Entities.VertexElementType,Aspose.ThreeD.Entities.MappingMode,Aspose.ThreeD.Entities.ReferenceMode)">
            <summary>
            Creates a vertex element with specified type and add it to the geometry.
            </summary>
            <remarks>
            If type is <see cref="F:Aspose.ThreeD.Entities.VertexElementType.UV"/>, a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/> with texture mapping type to <see cref="F:Aspose.ThreeD.Entities.TextureMapping.Diffuse"/> will be created.
            </remarks>
            <param name="type">Vertex element type</param>
            <param name="mappingMode">Default mapping mode</param>
            <param name="referenceMode">Default reference mode</param>
            <returns>Created element.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.CreateElementUV(Aspose.ThreeD.Entities.TextureMapping)">
            <summary>
            Creates a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/> with given texture mapping type.
            </summary>
            <param name="uvMapping">Which texture mapping type to create</param>
            <returns>Created element uv</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Geometry.CreateElementUV(Aspose.ThreeD.Entities.TextureMapping,Aspose.ThreeD.Entities.MappingMode,Aspose.ThreeD.Entities.ReferenceMode)">
            <summary>
            Creates a <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/> with given texture mapping type.
            </summary>
            <param name="uvMapping">Which texture mapping type to create</param>
            <param name="mappingMode">Default mapping mode</param>
            <param name="referenceMode">Default reference mode</param>
            <returns>Created element uv</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.ApertureMode">
            <summary>
            Camera aperture modes.
            The aperture mode determines which values drive the camera aperture. 
            If the aperture mode is HorizAndVert, Horizontal, or Vertical, then the field of view is used. 
            If the aperture mode is FocalLength, then the focal length is used.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ApertureMode.HorizAndVert">
            <summary>
            Set the angle values for both the horizontal and vertical settings.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ApertureMode.Horizontal">
            <summary>
            Set only the horizontal angle.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ApertureMode.Vertical">
            <summary>
            Set only the vertical angle.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ApertureMode.FocalLength">
            <summary>
            Use focal length directly.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.SurfaceMode.Raw">
            <summary>
            Raw surface.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.SurfaceMode.LowNoNormals">
            <summary>
            The low and no normals.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.SurfaceMode.Low">
            <summary>
            Low.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.SurfaceMode.HighNoNormals">
            <summary>
            High and no normals.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.SurfaceMode.High">
            <summary>
            High.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Patch">
             <summary>
             A <see cref="T:Aspose.ThreeD.Entities.Patch"/> is a parametric modeling surface, similar to <see cref="T:Aspose.ThreeD.Entities.NurbsSurface"/>, it's also defined by two 
             <see cref="T:Aspose.ThreeD.Entities.PatchDirection"/>, the <see cref="P:Aspose.ThreeD.Entities.Patch.U"/> and <see cref="P:Aspose.ThreeD.Entities.Patch.V"/>.
            
             But difference between <see cref="T:Aspose.ThreeD.Entities.Patch"/> and <see cref="T:Aspose.ThreeD.Entities.NurbsSurface"/> is that the <see cref="T:Aspose.ThreeD.Entities.PatchDirection"/> curve 
             can be one of <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.Bezier"/>, <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.QuadraticBezier"/>, <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.BasisSpline"/>, <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.CardinalSpline"/> and <see cref="F:Aspose.ThreeD.Entities.PatchDirectionType.Linear"/>
             </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Patch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Patch"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Patch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Patch"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Patch.U">
            <summary>
            Gets the u direction.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Patch.V">
            <summary>
            Gets the v direction.
            </summary>
            <value>The v.</value>
        </member>
        <member name="T:Aspose.ThreeD.Entities.SkeletonType">
            <summary>
            <see cref="T:Aspose.ThreeD.Entities.Skeleton"/>'s types.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.SkeletonType.Skeleton">
            <summary>
            The <see cref="T:Aspose.ThreeD.Entities.Skeleton"/> is a skeleton entity, which means the associated node is the root node of the whole skeletal hierarchy.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.SkeletonType.Bone">
            <summary>
            The <see cref="T:Aspose.ThreeD.Entities.Skeleton"/> is a bone entity.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Skeleton">
            <summary>
            The <see cref="T:Aspose.ThreeD.Entities.Skeleton"/> is mainly used by CAD software to help designer to manipulate the transformation of skeletal structure, it's usually useless outside the CAD softwares.
            To make the skeleton hierarchy acts like one object in CAD software, it's necessary to mark the top <see cref="T:Aspose.ThreeD.Entities.Skeleton"/> node as the root one by setting <see cref="P:Aspose.ThreeD.Entities.Skeleton.Type"/> to <see cref="F:Aspose.ThreeD.Entities.SkeletonType.Skeleton"/>,
            and all children set to <see cref="F:Aspose.ThreeD.Entities.SkeletonType.Bone"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Skeleton.Size">
            <summary>
            Gets or sets the limb node size that used in CAD software to represent the size of the bone.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Skeleton.Type">
            <summary>
            Gets or sets the type of the skeleton.
            </summary>
            <value>The type of the skeleton.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Skeleton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Skeleton"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Skeleton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Skeleton"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.CacheFileFormat">
            <summary>
            Supported cache file formats
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.CacheFileFormat.UnknownFileFormat">
            <summary>
            Unknown cache file format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.CacheFileFormat.MaxPointCacheV2">
            <summary>
            3ds Max Point Cache 2 file format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.CacheFileFormat.MayaCache">
            <summary>
            Maya Cache file format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.CacheFileFormat.Alembic">
            <summary>
            Alembic Cache file format.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.MCFileCount">
            <summary>
            Number of files used to store the animation
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCFileCount.OneFile">
            <summary>
            One file is used for all the frames of animation.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCFileCount.OneFilePerFrame">
            <summary>
            For every frame of animation, a cache file is used.
            The number of the frames is the number of the cache files.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.MCDataType">
            <summary>
            Data types in the MC cache file.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCDataType.UnknownData">
            <summary>
            Unknown data.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCDataType.Double">
            <summary>
            No use but has to be defined for consistency reasons.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCDataType.DoubleArray">
            <summary>
            double*
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCDataType.DoubleVectorArray">
            <summary>
            double* [3]
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCDataType.Int32Array">
            <summary>
            int*
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCDataType.FloatArray">
            <summary>
            float*
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCDataType.FloatVectorArray">
            <summary>
            float* [3]
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.MCBinaryFormat">
            <summary>
            Binary cache format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCBinaryFormat.MCC">
            <summary>
            MCC cache file format, 32bit (older format)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCBinaryFormat.MCX">
            <summary>
            MCX cache file format, 64bit (newer format)
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.MCSamplingType">
            <summary>
            Cache channel sampling types
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCSamplingType.Regular">
            <summary>
            Regular sampling.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MCSamplingType.Irregular">
            <summary>
            Irregular sampling.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Cache">
            <summary>
            This object contains methods for accessing point animation in a cache file.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Cache.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Cache"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.StereoType">
            <summary>
            Types of stereo camera
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.StereoType.None">
            <summary>
            Disable the stereo effect.
            (Default value)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.StereoType.Converged">
            <summary>
            Computes the zero parallax plane by toeing in the cameras.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.StereoType.OffAxis">
            <summary>
            Computes the convergence plane by shifting the frustum using camera film back.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.StereoType.Parallel">
            <summary>
            A parallel camera setup where there is effectively no convergence plane.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.CameraStereo">
            <summary>
            This node attribute contains methods for accessing the properties of a stereo camera.
            Generally, a set of stereoRig contains the center camera, the left camera and the right camera. 
            CameraStereo is used to represent the center camera. 
            The left and right camera could be Camera. CameraStereo contains stereo properties. 
            The left and right camera can also be get and set via related methods in CameraStereo class. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CameraStereo.Stereo">
            <summary>
            This property handles the types of Stereo camera.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CameraStereo.InteraxialSeparation">
            <summary>
            This property handles the distance between left and right cameras.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CameraStereo.ZeroParallax">
            <summary>
            This property handles the distance on the camera view axis where the zero parallax plane occurs.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CameraStereo.ToeInAdjust">
            <summary>
            This property is to offset the computed toe-in effect when it's in Converged mode.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CameraStereo.RightCamera">
            <summary>
            This property has the right camera connected to it.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CameraStereo.LeftCamera">
            <summary>
            This property has the left camera connected to it.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.CameraStereo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.CameraStereo"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.CameraSwitcher">
            <summary>
             This node attribute contains methods for accessing the properties of a camera switcher.
             The camera switcher is a concept of Motion Builder.
             The camera switcher lets you switch between the custom cameras placed in your scene so you can create an animation using multiple camera angles. 
             Custom cameras are cameras which created by users, while the default cameras are top, bottom, left, right, front, back and perspective camera. 
             The Camera switcher contains the custom cameras you have created. If you have no custom cameras created in your scene, the Camera switcher is empty. 
             Please read Motion Builder documentation for more details. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.CameraSwitcher.CameraIndex">
            <summary>
            This property handles the index of camera.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.CameraSwitcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.CameraSwitcher"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.LODDisplayLevel">
            <summary>
            types to determine how to display nodes in LODGroup. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.LODDisplayLevel.UseLOD">
            <summary>
             Display the node according LOD threshold
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.LODDisplayLevel.Show">
            <summary>
             Always show this node
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.LODDisplayLevel.Hide">
            <summary>
             Always hide this node
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.LODGroup">
            <summary>
             Defines a LOD (Level of Detail) group.
             This LodGroup node is a group node that can be used to detect how close a group of objects is to a camera. Typically this node is used for controlling "Level of Detail" visibility.
             Properties in the class are designed according to Maya implementation. So these properties may be incompatible with other software, like 3ds Max.
             In Maya, with "Level of Detail",the visibility of the children of this transform are controlled by the distance of a group to a camera and the threshold values. For example, under a LOD group node, there are three children: ship_detailed, ship_medium, and ship_rough. There are three threshold values: 5, 10 and 15. When the camera is within 5 units of the group bounding box, only ship_detailed is visible. When the view is zoomed out and the camera is 9 units away from the group, only ship_medium is visible. When the view is zoomed out to 30 units away, only ship_rough is visible.
             This node attribute contains the properties of a null node. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LODGroup.MinMaxDistance">
            <summary>
            This property handles the use of the Min/Max distances.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LODGroup.MinDistance">
            <summary>
            The minimum distance at which the group is displayed.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LODGroup.MaxDistance">
            <summary>
            The maximum distance at which the group is displayed.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.LODGroup.WorldSpace">
            <summary>
            Work in world space of transform or local space If true, the camera distance to the LOD group will be computed in world space.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.LODGroup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.LODGroup"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.MarkerType">
            <summary>
            Marker type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerType.Standard">
            <summary>
            standard marker.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerType.Optical">
            <summary>
            optical marker
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerType.EffectorFK">
            <summary>
            effector FK.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerType.EffectorIK">
            <summary>
            effector IK.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.MarkerLook">
            <summary>
            Marker's look.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.Cube">
            <summary>
            Displayed as cube
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.HardCross">
            <summary>
            Displayed as hard cross
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.LightCross">
            <summary>
            Displayed as light cross
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.Sphere">
            <summary>
            Displayed as sphere
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.Capsule">
            <summary>
            Displayed as capsule
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.Box">
            <summary>
            Displayed as box
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.Bone">
            <summary>
            Displayed as bone
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.Circle">
            <summary>
            Displayed as circle
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.Square">
            <summary>
            Displayed as square
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.Stick">
            <summary>
            Displayed as stick
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MarkerLook.None">
            <summary>
            Don't show marker
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Marker">
            <summary>
            This node attribute contains the properties of a marker.
            A Marker can represent a motion capture marker or a HIK IK/FK effector. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Marker.Look">
            <summary>
            This property handles the marker's look.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Marker.DrawLink">
            <summary>
            This property handles the marker's link visibility.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Marker.Size">
            <summary>
            This property handles the marker's size.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Marker.ShowLabel">
            <summary>
            This property handles the marker's label visibility.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Marker.IKPivot">
            <summary>
            This property handles the marker's pivot position.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Marker.MarkerType">
            <summary>
            Gets or sets the type of the marker.
            </summary>
            <value>The type of the marker.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Marker.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Marker"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.NullLook">
            <summary>
            Null node's look types.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.NullLook.None">
            <summary>
            Don't show the null node
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.NullLook.Cross">
            <summary>
            Show null node as a cross
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.NullNode">
            <summary>
            This node attribute contains the properties of a null node. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NullNode.Size">
            <summary>
            This property handles the null node size.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NullNode.Look">
            <summary>
            This property handles the look of the null node.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.NullNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.NullNode"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Shape">
            <summary>
            The shape describes the deformation on a set of control points, which is similar to the cluster deformer in Maya.
            For example, we can add a shape to a created geometry. 
            And the shape and the geometry have the same topological information but different position of the control points. 
            With varying amounts of influence, the geometry performs a deformation effect. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Shape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Shape"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Shape.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Shape"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Shape.FromControlPoints(Aspose.ThreeD.Utilities.Vector3[])">
            <summary>
            Create a shape with specified control points with a default indices.
            </summary>
            <param name="controlPoints"></param>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Shape.Indices">
            <summary>
            Gets the indices.
            </summary>
            <value>The indices.</value>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Boundary">
            <summary>
            Boundary describes a trimming boundary for a trimmed NURBS object.
            Note:Outer boundaries run counter-clockwise in UV space and inner boundaries run clockwise. 
            An outer boundary represents the outer edges of the trimmed surface whereas the inner boundaries define "holes" in the surface. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Boundary.OuterFlag">
            <summary>
            This property handles outer flag 
            </summary>
            <value>true if outer flag; otherwise, false.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Boundary.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Boundary"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.Line">
            <summary>
            A polyline is a path defined by a set of points with <see cref="P:Aspose.ThreeD.Entities.Geometry.ControlPoints"/>, and connected by <see cref="P:Aspose.ThreeD.Entities.Line.Segments"/>,
            which means it can also be a set of connected line segments.
            The line is usually a linear object, which means it cannot be used to represent a curve, in order to represent a curve, uses <see cref="T:Aspose.ThreeD.Entities.NurbsCurve"/>.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.Line.lineStrip">
            <summary>
            contains a lot of lines or a line strip
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Line.ControlPoints">
            <summary>
            Gets all control points
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Line.Visible">
            <summary>
            Gets or sets if the geometry is visible
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.Line.Segments">
            <summary>
            Gets the segments of the line
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Line.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Line"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Line.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.Line"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Line.FromPoints(Aspose.ThreeD.Utilities.Vector3[])">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Entities.Line"/> instance from a set of points.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.Line.MakeDefaultIndices">
            <summary>
            Generate the sequence 0,1,2,3....<see cref="P:Aspose.ThreeD.Entities.Geometry.ControlPoints"/>.Length-1 to <see cref="P:Aspose.ThreeD.Entities.Line.Segments"/> so the ControlPoints can be used as a single line
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.NurbsType">
            <summary>
            NURBS types.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.NurbsType.Open">
            <summary>
            The <see cref="T:Aspose.ThreeD.Entities.NurbsCurve"/> is an open curve.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.NurbsType.Closed">
            <summary>
            The <see cref="T:Aspose.ThreeD.Entities.NurbsCurve"/> is a closed curve has its last control point equals to its first one.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.NurbsType.Periodic">
            <summary>
            The <see cref="T:Aspose.ThreeD.Entities.NurbsCurve"/> is a periodic curve.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.CurveDimension">
            <summary>
             The dimension of the curves. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.CurveDimension.TwoDimensional">
            <summary>
            The curves are two dimensional points. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.CurveDimension.ThreeDimensional">
            <summary>
            The curves are three dimensional points. 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.NurbsCurve">
            <summary>
            <a href="https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline">NURBS curve</a> is a curve represented by NURBS(Non-uniform rational basis spline),
            A NURBS curve is defined by its <see cref="P:Aspose.ThreeD.Entities.NurbsCurve.Order"/>, a set of weighted <see cref="P:Aspose.ThreeD.Entities.Geometry.ControlPoints"/> and a <see cref="P:Aspose.ThreeD.Entities.NurbsCurve.KnotVectors"/>
            The w component in control point is used as control point's weight, whatever it is a <see cref="F:Aspose.ThreeD.Entities.CurveDimension.TwoDimensional"/> or <see cref="F:Aspose.ThreeD.Entities.CurveDimension.ThreeDimensional"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsCurve.ControlPoints">
            <summary>
            Gets all control points
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.NurbsCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.NurbsCurve"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.NurbsCurve.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.NurbsCurve"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsCurve.Multiplicity">
            <summary>
            Gets the multiplicity.
            </summary>
            <value>The multiplicity.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsCurve.Order">
            <summary>
            Gets or sets the order of a NURBS curve, it defines the number of nearby control points that influence any given point on the curve.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsCurve.Dimension">
            <summary>
            Gets or sets the curve's dimension.
            </summary>
            <remarks>
            For a <see cref="F:Aspose.ThreeD.Entities.CurveDimension.TwoDimensional"/> curve, the z component in control point is unused.
            </remarks>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsCurve.CurveType">
            <summary>
            Gets or sets the type of the curve.
            </summary>
            <value>The type of the curve.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsCurve.KnotVectors">
            <summary>
            Gets the knot vector, it is a sequence of parameter values that determines where and how the control points affect the NURBS curve.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsCurve.Rational">
            <summary>
            Gets or sets whether it is rational, this value indicates whether this <see cref="T:Aspose.ThreeD.Entities.NurbsCurve"/> is rational spline or non-rational spline.
            Non-rational B-spline is a special case of rational B-splines.
            </summary>
            <value>true if it's rational spline; otherwise, false is a non-rational spline.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.NurbsCurve.Evaluate(System.Int32)">
            <summary>
            Evaluate the nurbs curve
            </summary>
            <param name="steps">The evaluation frequency between two neighbor knots, default value is 20</param>
            <returns>Points in the curve</returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.NurbsCurve.EvaluateAt(System.Double)">
            <summary>
            Evaluate the curve's point at specified position
            </summary>
            <param name="u">The position in the curve, between 0 and 1</param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.NurbsSurface">
            <summary>
            <see cref="T:Aspose.ThreeD.Entities.NurbsSurface"/> is a surface represented by <a href="https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline">NURBS(Non-uniform rational basis spline)</a>,
            A <see cref="T:Aspose.ThreeD.Entities.NurbsSurface"/> is defined by two <see cref="T:Aspose.ThreeD.Entities.NurbsDirection"/> <see cref="P:Aspose.ThreeD.Entities.NurbsSurface.U"/> and <see cref="P:Aspose.ThreeD.Entities.NurbsSurface.V"/>.
            The w component in control point is used as control point's weight whatever the direction's type is a <see cref="F:Aspose.ThreeD.Entities.CurveDimension.TwoDimensional"/> or <see cref="F:Aspose.ThreeD.Entities.CurveDimension.ThreeDimensional"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.NurbsSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.NurbsSurface"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.NurbsSurface.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.NurbsSurface"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsSurface.U">
            <summary>
            Gets the nurbs surface's U direction
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsSurface.V">
            <summary>
            Gets the nurbs surface's V direction
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.NurbsSurface.ToMesh">
            <summary>
            Convert the nurbs surface to the mesh
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.TrimNurbsSurface">
            <summary>
            TrimNurbsSurface describes a NURBS surface with regions trimmed or cut away with trimming boundaries. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TrimNurbsSurface.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.TrimNurbsSurface"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.TrimNurbsSurface.FlipNormals">
            <summary>
            Flip the normal vectors
            </summary>
            <value>true if flip normals; otherwise, false.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.TrimNurbsSurface.AddBoundary(Aspose.ThreeD.Entities.Boundary)">
            <summary>
            Appends a trimming boundary to the set of trimming boundaries. 
            </summary>
            <param name="boundary">Boundary.</param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.PatchDirectionType">
            <summary>
            Patch direction's types.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.Bezier">
            <summary>
            <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve">The patch direction is a Bezier curve.</a>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.QuadraticBezier">
            <summary>
            The quadratic bezier patch.
            <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Quadratic_curves">The patch direction is a quadratic curve.</a>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.CardinalSpline">
            <summary>
            cardinal patch.
            <a href="https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline">The patch direction is a cardinal spline.</a>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.BasisSpline">
            <summary>
            <a href="https://en.wikipedia.org/wiki/B-spline">The patch direction is a basis spline.</a>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.PatchDirectionType.Linear">
            <summary>
            <a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Linear_curves">The patch direction is a linear curve.</a>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.PatchDirection">
            <summary>
            Patch's U and V direction.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.PatchDirection.Type">
            <summary>
            Gets or sets the patch's type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.PatchDirection.Divisions">
            <summary>
            Gets or sets the number of divisions between adjacent control points.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.PatchDirection.ControlPoints">
            <summary>
            Gets or sets the count of control points in current direction.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.PatchDirection.Closed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Entities.PatchDirection"/> is a closed curve.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.PatchDirection.CappedTop">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Entities.PatchDirection"/> capped top.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.PatchDirection.CappedBottom">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Entities.PatchDirection"/> capped bottom.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.NurbsDirection">
            <summary>
            A 3D <see cref="T:Aspose.ThreeD.Entities.NurbsSurface"/> has two direction, the <see cref="P:Aspose.ThreeD.Entities.NurbsSurface.U"/> and <see cref="P:Aspose.ThreeD.Entities.NurbsSurface.V"/>, the <see cref="T:Aspose.ThreeD.Entities.NurbsDirection"/> defines data for each direction.
            A direction is actually a NURBS curve, that means it's also defined by its <see cref="P:Aspose.ThreeD.Entities.NurbsDirection.Order"/>, a <see cref="P:Aspose.ThreeD.Entities.NurbsDirection.KnotVectors"/>, and a set of weighted control points(defined in <see cref="T:Aspose.ThreeD.Entities.NurbsSurface"/>).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsDirection.KnotVectors">
            <summary>
            Gets the knot vector, it is a sequence of parameter values that determines where and how the control points affect the NURBS curve.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Multiplicity">
            <summary>
            Gets the multiplicity.
            </summary>
            <value>The multiplicity.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Order">
            <summary>
            Gets or sets the order of a NURBS curve, it defines the number of nearby control points that influence any given point on the curve.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Divisions">
            <summary>
            Gets or sets the number of divisions between adjacent control points in current direction.
            </summary>
            <value>The step.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Type">
            <summary>
            Gets or sets the type of the current direction.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.NurbsDirection.Count">
            <summary>
            Gets or sets the count of control points in current direction.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementType">
            <summary>
             The type of the vertex element, defined how it will be used in modeling.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.Binormal">
            <summary>
            Binormal vector, see <see cref="T:Aspose.ThreeD.Entities.VertexElementBinormal"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.Normal">
            <summary>
            Normal vector, see <see cref="T:Aspose.ThreeD.Entities.VertexElementNormal"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.Tangent">
            <summary>
            Tangent vector, see <see cref="T:Aspose.ThreeD.Entities.VertexElementTangent"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.Material">
            <summary>
            Material index, see <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.PolygonGroup">
            <summary>
            Polygon group index, see <see cref="T:Aspose.ThreeD.Entities.VertexElementPolygonGroup"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.UV">
            <summary>
            Texture UV coordinate, see <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.VertexColor">
            <summary>
            Vertex color, see <see cref="T:Aspose.ThreeD.Entities.VertexElementVertexColor"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.SmoothingGroup">
            <summary>
            Smoothing group, See <see cref="T:Aspose.ThreeD.Entities.VertexElementSmoothingGroup"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.VertexCrease">
            <summary>
            Vertex crease, See <see cref="T:Aspose.ThreeD.Entities.VertexElementVertexCrease"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.EdgeCrease">
            <summary>
            Edge crease, <see cref="T:Aspose.ThreeD.Entities.VertexElementEdgeCrease"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.UserData">
            <summary>
            User data, usually for application-specific purpose, See <see cref="T:Aspose.ThreeD.Entities.VertexElementUserData"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.Visibility">
            <summary>
            Visibility for components, see <see cref="T:Aspose.ThreeD.Entities.VertexElementVisibility"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.Specular">
            <summary>
            Specular colors, see <see cref="T:Aspose.ThreeD.Entities.VertexElementSpecular"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.Weight">
            <summary>
            Blend weights, see <see cref="T:Aspose.ThreeD.Entities.VertexElementWeight"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.VertexElementType.Hole">
            <summary>
            Holes, see <see cref="T:Aspose.ThreeD.Entities.VertexElementHole"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.TextureMapping">
            <summary>
            The texture mapping type for <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/>
            Describes which kind of texture mapping is used.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Ambient">
            <summary>
            Ambient maps 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Emissive">
            <summary>
            Emissive maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Diffuse">
            <summary>
            Diffuse maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Opacity">
            <summary>
            Opacity maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Bump">
            <summary>
            Bump maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Normal">
            <summary>
            Normal maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Specular">
            <summary>
            Specular maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Glow">
            <summary>
            Glow maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Reflection">
            <summary>
            Reflection maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Shadow">
            <summary>
            Shadow maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Shininess">
            <summary>
            Shininess maps
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.TextureMapping.Displacement">
            <summary>
            Displacement maps
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.MappingMode">
            <summary>
             Determines how the element is mapped to a surface. 
            The <see cref="T:Aspose.ThreeD.Entities.MappingMode"/> defined how <see cref="T:Aspose.ThreeD.Entities.VertexElement"/> is mapped to the surface of geometry.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MappingMode.ControlPoint">
            <summary>
            Each data is mapped to the control point of the geometry.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MappingMode.PolygonVertex">
            <summary>
            The data is mapped to the polygon's vertex
            When a control point is shared by multiple polygons, and the data is mapped as <see cref="F:Aspose.ThreeD.Entities.MappingMode.PolygonVertex"/>, the control point as different polygon vertex will have their own data
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MappingMode.Polygon">
            <summary>
            The data is mapped to the polygon.
            Each polygon vertex shares the same data when mapping mode is <see cref="F:Aspose.ThreeD.Entities.MappingMode.Polygon"/>.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MappingMode.Edge">
            <summary>
            The data is mapped to the edge.
            Each edge end point shares the same data when mapping is <see cref="F:Aspose.ThreeD.Entities.MappingMode.Edge"/>.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.MappingMode.AllSame">
            <summary>
            One data mapped to the whole surface.
            What ever data is interpreted as control point/polygon vertex/edge endpoints, the data is always the same as it defined by <see cref="F:Aspose.ThreeD.Entities.MappingMode.AllSame"/>.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.ReferenceMode">
            <summary>
            <see cref="T:Aspose.ThreeD.Entities.ReferenceMode"/> defines how mapping information is stored and referenced by.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ReferenceMode.Direct">
            <summary>
            Data is directly referenced
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ReferenceMode.Index">
            <summary>
            Data is referenced by index
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entities.ReferenceMode.IndexToDirect">
            <summary>
            Data is referenced by index, then accessed by index in <see cref="T:Aspose.ThreeD.Entities.VertexElement"/>'s data list.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElement">
            <summary>
             Base class of vertex elements.
             A vertex element type is identified by VertexElementType. 
             A VertexElement describes how the vertex element is mapped to a geometry surface and how the mapping information is arranged in memory. 
             A VertexElement contains Normals, UVs or other kind of information. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElement.VertexElementType">
            <summary>
            Gets the type of the <see cref="T:Aspose.ThreeD.Entities.VertexElement"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElement.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElement.MappingMode">
            <summary>
            Gets or sets how the element is mapped.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElement.ReferenceMode">
            <summary>
            Gets or sets how the element is referenced.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElement.Clear">
            <summary>
             Clears all the data from this vertex element. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElement.Clone(System.Boolean)">
            <summary>
            Deep clone the vertex element
            </summary>
            <param name="withData">Clone the vertex with direct and index array</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElement.Clone(System.Boolean,System.Boolean)">
            <summary>
            Deep clone the vertex element
            </summary>
            <param name="cloneDirect">Clone the vertex with direct array</param>
            <param name="cloneIndice">Clone the vertex with index array</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElement.IsDataValid">
            <summary>
            Check has Data if mapping mode is Direct/IndexToDirect or has indices if mapping mode is Index/IndexToDirect
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElement.ToString">
            <summary>
            String representation of vertex element.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.IIndicedVertexElement">
            <summary>
            VertexElement with indice data.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.IIndicedVertexElement.Indices">
            <summary>
            Gets the indice data
            </summary>
            <value>The index array.</value>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementVector4">
            <summary>
            A helper class for defining concrete <see cref="T:Aspose.ThreeD.Entities.VertexElement"/> implementations.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementVector4.CopyTo(Aspose.ThreeD.Entities.VertexElementVector4)">
            <summary>
            Copys data to specified element
            </summary>
            <param name="target">Target.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementVector4.Data">
            <summary>
            Gets the vertex data
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementVector4.Indices">
            <summary>
            Gets the indice data
            </summary>
            <value>The index array.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementVector4.SetData(Aspose.ThreeD.Utilities.Vector4[])">
            <summary>
            Load data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementVector4.SetIndices(System.Int32[])">
            <summary>
            Load indices
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementVector4.Clear">
            <summary>
             Removes all elements from the direct and the index arrays.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementTemplate`1">
            <summary>
            A helper class for defining concrete <see cref="T:Aspose.ThreeD.Entities.VertexElement"/> implementations.
            </summary>
            <typeparam name="T">Element type.</typeparam>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementTemplate`1.CopyTo(Aspose.ThreeD.Entities.VertexElementTemplate{`0})">
            <summary>
            Copys data to specified element
            </summary>
            <param name="target">Target.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementTemplate`1.Data">
            <summary>
            Gets the vertex data
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementTemplate`1.Indices">
            <summary>
            Gets the indice data
            </summary>
            <value>The index array.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementTemplate`1.SetData(`0[])">
            <summary>
            Load data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementTemplate`1.SetIndices(System.Int32[])">
            <summary>
            Load indices
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementTemplate`1.Clear">
            <summary>
             Removes all elements from the direct and the index arrays.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementIntsTemplate">
            <summary>
            A helper class for defining concrete <see cref="T:Aspose.ThreeD.Entities.VertexElement"/> implementations.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementIntsTemplate.CopyTo(Aspose.ThreeD.Entities.VertexElementIntsTemplate)">
            <summary>
            Copys data to specified element
            </summary>
            <param name="target">Target.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementIntsTemplate.Data">
            <summary>
            Gets the vertex data
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementIntsTemplate.Indices">
            <summary>
            Gets the indice data
            </summary>
            <value>The index array.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementIntsTemplate.SetData(System.Int32[])">
            <summary>
            Load data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementIntsTemplate.SetIndices(System.Int32[])">
            <summary>
            Load indices
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementIntsTemplate.Clear">
            <summary>
             Removes all elements from the direct and the index arrays.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementDoublesTemplate">
            <summary>
            A helper class for defining concrete <see cref="T:Aspose.ThreeD.Entities.VertexElement"/> implementations.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementDoublesTemplate.CopyTo(Aspose.ThreeD.Entities.VertexElementDoublesTemplate)">
            <summary>
            Copys data to specified element
            </summary>
            <param name="target">Target.</param>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementDoublesTemplate.Data">
            <summary>
            Gets the vertex data
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementDoublesTemplate.Indices">
            <summary>
            Gets the indice data
            </summary>
            <value>The index array.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementDoublesTemplate.SetData(System.Double[])">
            <summary>
            Load data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementDoublesTemplate.SetIndices(System.Int32[])">
            <summary>
            Load indices
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementDoublesTemplate.Clear">
            <summary>
             Removes all elements from the direct and the index arrays.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementHole">
            <summary>
            Defines if specified polygon is hole
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementHole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementHole"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementVisibility">
            <summary>
            Defines if specified components is visible
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementVisibility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementVisibility"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementEdgeCrease">
            <summary>
            Defines the edge crease for specified components
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementEdgeCrease.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementEdgeCrease"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementVertexCrease">
            <summary>
            Defines the vertex crease for specified components
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementVertexCrease.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementVertexCrease"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementVertexColor">
            <summary>
            Defines the vertex color for specified components
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementVertexColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementVertexColor"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementUV">
            <summary>
            Defines the UV coordinates for specified components.
            A geometry can have multiple <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/> elements, and each one have different <see cref="T:Aspose.ThreeD.Entities.TextureMapping"/>s.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementUV.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/> class.
            The default texture mapping type is <see cref="F:Aspose.ThreeD.Entities.TextureMapping.Diffuse"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementUV.#ctor(Aspose.ThreeD.Entities.TextureMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementUV"/> class.
            </summary>
            <param name="textureMapping">The texture mapping type.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementUV.AddData(System.Collections.Generic.IEnumerable{Aspose.ThreeD.Utilities.Vector2})">
            <summary>
            Add a set of <see cref="T:Aspose.ThreeD.Utilities.Vector2"/> to VertexElementUV.Data.
            This is a short-cut, this method will convert the <see cref="T:Aspose.ThreeD.Utilities.Vector2"/> to <see cref="T:Aspose.ThreeD.Utilities.Vector4"/> with z to 0 and w to 0.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementUV.AddData(System.Collections.Generic.IEnumerable{Aspose.ThreeD.Utilities.Vector3})">
            <summary>
            Add a set of <see cref="T:Aspose.ThreeD.Utilities.Vector3"/> to VertexElementUV.Data.
            This is a short-cut, this method will convert the <see cref="T:Aspose.ThreeD.Utilities.Vector3"/> to <see cref="T:Aspose.ThreeD.Utilities.Vector4"/> with w to 0.
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementBinormal">
            <summary>
            Defines the binormal vectors for specified components.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementBinormal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementBinormal"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementNormal">
            <summary>
            Defines normal vectors for specified components.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementNormal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementNormal"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementTangent">
            <summary>
            Defines tangent vectors for specified components.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementTangent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementTangent"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementPolygonGroup">
            <summary>
            Defines polygon group for specified components to group related polygons together.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementPolygonGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementPolygonGroup"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementSmoothingGroup">
            <summary>
            A smoothing group is a group of polygons in a polygon mesh which should appear to form a smooth surface.
            Some early 3d modeling software like 3D studio max for DOS used smoothing group to void storing normal vector for each mesh vertex.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementSmoothingGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementSmoothingGroup"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementMaterial">
            <summary>
            Defines material index for specified components.
            
            A node can have multiple materials, the <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/> is used to render different part of the geometry in different materials.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementMaterial.Indices">
            <summary>
            Gets the indice data
            </summary>
            <value>The index array.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementMaterial.SetIndices(System.Int32[])">
            <summary>
            Load indices
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementMaterial.Clear">
            <summary>
             Removes all elements from the direct and the index arrays.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementMaterial.GetPolygonMaterial(System.Int32)">
            <summary>
            Gets the material index for the specified polygon 
            </summary>
            <param name="polygonIndex">The index of the polygon</param>
            <returns>The material index, or -1 for not found.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementUserData">
            <summary>
            Defines custom user data for specified components.
            Usually it's application-specific data for special purpose.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entities.VertexElementUserData.Data">
            <summary>
            The user data attached in this element
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementUserData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementUserData"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementUserData.Clear">
            <summary>
             Clears all the data from this vertex element. 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementSpecular">
            <summary>
            Defines specular color for specified components.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementSpecular.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementSpecular"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Entities.VertexElementWeight">
            <summary>
            Defines blend weight for specified components.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entities.VertexElementWeight.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entities.VertexElementWeight"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.A3DW.A3DWSaveOptions.MetaData">
            <summary>
            Extra meta data associated with the exported file.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FBX7700Policy.#ctor">
            <summary>
            
            </summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FbxParser.ParseObjectData60(Aspose.ThreeD.Formats.FBX.FbxObject)">
            <summary>
            ObjectData section, only in 6100
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FbxParser.ParseDocument60(Aspose.ThreeD.Formats.FBX.FbxObject)">
            <summary>
            Document section, only in 6100
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FbxParser.ParseRelations60(Aspose.ThreeD.Formats.FBX.FbxObject)">
            <summary>
            Parse *Relations* section which appears in FBX 6100 file.
            </summary>
            <param name="header"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FbxParser.ParseTakeModel60(Aspose.ThreeD.Formats.FBX.FbxObject)">
            <summary>
            Only exists in FBX 6100, encode the animation information
            </summary>
            <param name="header"></param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.ObjectSerializers.FBXObjectSerializer`1">
            <summary>
            FBX object serializer.
            Every different FBX object has its unique way to serialize/deserialize, this is what this class does here.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.ObjectSerializers.VertexElementName">
            <summary>
            Base class for all geometry serializers
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.ObjectSerializers.GeometrySerializer`1.ApplyCoordinateSystem(Aspose.ThreeD.Formats.FBX.Helpers.GlobalSettings,Aspose.ThreeD.Utilities.Vector4List)">
            <summary>
            Convert non-standard coordinate system
            </summary>
            <param name="gs"></param>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.ObjectSerializers.AnimationCurveSerializer.CombineHalfFloat(System.Single,System.Single)">
            <summary>
            Combines the two half floats into one integer.
            </summary>
            <returns>The half float.</returns>
            <param name="a">The alpha component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FbxBinaryWriter.GetBytes(System.String)">
            <summary>
            Reuse cached bytes to avoid memory allocation
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.FbxWriter">
            <summary>
            Implementation can supports binary and ASCII fbx file
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.Helpers.IFBXHelperClass">
            <summary>
            Classes that implemented this will not be added to <see cref="P:Aspose.ThreeD.Scene.Library"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.Helpers.GlobalSettings">
            <summary>
            This class contains functions for accessing global settings.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.Helpers.GlobalSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Formats.FBX.Helpers.GlobalSettings"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.Helpers.GlobalSettings.CopyTo(Aspose.ThreeD.Formats.FBXLoadOptions,Aspose.ThreeD.Formats.FBX.FBXPolicy,Aspose.ThreeD.AssetInfo)">
            <summary>
            Copy settings in GlobalSettings to AssetInfo
            </summary>
            <param name="options"></param>
            <param name="policy"></param>
            <param name="assetInfo"></param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.Helpers.InterlaceMode">
            <summary>
            Video interlace mode
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.Helpers.InterlaceMode.None">
            <summary>
            Progressive frame (full frame).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.Helpers.InterlaceMode.Fields">
            <summary>
            Alternate even/odd fields.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.Helpers.InterlaceMode.HalfEven">
            <summary>
            Half of a frame, even fields only.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.Helpers.InterlaceMode.HalfOdd">
            <summary>
            Half of a frame, odd fields only.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.Helpers.InterlaceMode.FullEven">
            <summary>
            Extract and use the even field of a full frame.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.Helpers.InterlaceMode.FullOdd">
            <summary>
            Extract and use the odd field of a full frame.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.Helpers.InterlaceMode.FullEvenOdd">
            <summary>
            Extract Fields and make full frame with each one beginning with Odd (60fps).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.Helpers.InterlaceMode.FullOddEven">
            <summary>
            Extract Fields and make full frame with each one beginning with Even (60fps).
            
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.Helpers.ClipAccessMode">
            <summary>
            Video clip access mode
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.Helpers.Video">
            <summary>
            Equivalent to FBX SDK Video class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.FrameRate">
            <summary>
            The Frame rate of the video clip. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.LastFrame">
            <summary>
            The last frame of the video clip. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.Width">
            <summary>
            Clip's width
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.Height">
            <summary>
            Clip's height
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.Path">
            <summary>
            Video's full file name
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.StartFrame">
            <summary>
             Start frame of the video clip
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.StopFrame">
            <summary>
            The stop frame of the video clip
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.PlaySpeed">
            <summary>
            Play speed of the video clip
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.Offset">
            <summary>
            The offset can be used to shift the playback start time of the clip
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.InterlaceMode">
            <summary>
            Gets the interlace mode.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.FreeRunning">
            <summary>
            The free running state.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.Loop">
            <summary>
            Loop state of the video clip
            </summary>
            <value>The loop.</value>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Video.AccessMode">
            <summary>
            Clip's access mode
            </summary>
            <value>The access mode.</value>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable">
            <summary>
             A binding table represents a collection of bindings from source types such as A3DObject, or LayerElements to corresponding destinations, usually a third party shader parameters.
             Binding represents a link between internal object(e.g. A3DObject) and external object(e.g. HLSL shader parameters). 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.TargetName">
            <summary>
            This property stores the name of target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.TargetType">
            <summary>
            This property stores the type of target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.DescRelativeURL">
            <summary>
            Relative URL of file containing the shader implementation description.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.DescAbsoluteURL">
            <summary>
            Absolute URL of file containing the shader implementation description.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.DescTAG">
            <summary>
            Identify the shader to use in previous description's URL.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.CodeRelativeURL">
            <summary>
            Relative URL of file containing the shader implementation code.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.CodeAbsoluteURL">
            <summary>
            Absolute URL of file containing the shader implementation code.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.CodeTAG">
            <summary>
            Identify the shader function entry to use in previous code's URL.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.Entries">
            <summary>
            Gets the entries.
            </summary>
            <value>The entries.</value>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.Helpers.BindingTable.AddNewEntry">
            <summary>
            Add new entry
            </summary>
            <returns>New entry</returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.Helpers.BindingTableEntry">
            <summary>
            Binding table entry.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.Helpers.BindingTableEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Formats.FBX.Helpers.BindingTableEntry"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.Helpers.BindingTableEntry.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Formats.FBX.Helpers.BindingTableEntry"/> class.
            </summary>
            <param name="source">Source.</param>
            <param name="destination">Destination.</param>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTableEntry.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTableEntry.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
            <value>The type of the source.</value>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTableEntry.Destination">
            <summary>
            Gets or sets the destination.
            </summary>
            <value>The destination.</value>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.BindingTableEntry.DestinationType">
            <summary>
            Gets or sets the type of the destination.
            </summary>
            <value>The type of the destination.</value>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.Helpers.Implementation">
            <summary>
             This object represents the shading node implementation. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Implementation.Language">
            <summary>
            Shader Language.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Implementation.LanguageVersion">
            <summary>
            Shader Language version.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Implementation.RenderAPI">
            <summary>
            Render API.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Implementation.RenderAPIVersion">
            <summary>
            Render API version.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Implementation.RootBindingName">
            <summary>
            Name of root binding table.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.Helpers.Implementation.BindingTables">
            <summary>
            Binding tables.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.Helpers.Implementation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Implementation class
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.Helpers.Implementation.AddNewTable(System.String,System.String)">
            <summary>
            Add a new binding table to the table list
            </summary>
            <param name="targetName">Target name</param>
            <param name="targetType">Target type</param>
            <returns>The new table.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.PropertyBuilder">
            <summary>
            This will generate the properties structure, object serializer may have customized implementation
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.CreatePropertyFlag.ChangedValue">
            <summary>
            Only serialize changed values
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.CreatePropertyFlag.AllValue">
            <summary>
            Serialize all values
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.CreatePropertyFlag.DefaultValue">
            <summary>
            Only serialize default value
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FBX7DOMSerializer.AddToSerializationQueue(Aspose.ThreeD.Scene,Aspose.ThreeD.A3DObject)">
            <summary>
            Adds object to serialize queue.
            </summary>
            <param name="scene"></param>
            <param name="obj">Object.</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FBX7DOMSerializer.PrepareDefaultTemplate(Aspose.ThreeD.A3DObject,Aspose.ThreeD.Formats.FBX.ClassName)">
            <summary>
            Update type's usage and prepare a template for its type 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FBXUtils.EulerFromFBX(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Convert the euler rotation in FBX's format to our format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FBXUtils.EulerToFBX(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Convert the euler rotation in FBX's format to our format
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBX.FBXPolicy.FoldRepeatedCurveData">
            <summary>
            FBX 7.4 can reuse repeated curve data by increasing last data's ref count
            </summary>
            <value>true if fold repeated curve data; otherwise, false.</value>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FBXPolicy.GetFbxClassName(Aspose.ThreeD.A3DObject)">
            <summary>
            Different FBX version have different FBX class name
            </summary>
            <param name="obj"></param>
            <returns>Class name</returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FBXPolicy.LoadPolicy(System.String)">
            <summary>
            
            </summary>
            <param name="policy"></param>
            <porter opt="NoExceptions"/>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyInfo.hideOnNull">
            <summary>
            Do not serialize this if the value is null
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBX.FbxPropertyInfo.ToA3DPropertyFlags">
            <summary>
            Convert FbxPropertyFlags to Aspose.3D's property flags
            </summary>
            <returns>The a3 D property flags.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.PropertyType">
            <summary>
            Type identifier constants. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Undefined">
             <summary>
            Unidentified
             </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Char">
            <summary>
             8 bit signed integer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.UChar">
            <summary>
            8 bit unsigned integer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Short">
            <summary>
            16 bit signed integer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.UShort">
            <summary>
            16 bit unsigned integer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.UInt">
            <summary>
            32 bit unsigned integer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.LongLong">
            <summary>
            64 bit signed integer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.ULongLong">
            <summary>
            64 bit unsigned integer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.HalfFloat">
            <summary>
            16 bit floating point.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Bool">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Int">
            <summary>
            32 bit signed integer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Float">
            <summary>
            Floating point value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Double">
            <summary>
            Double width floating point value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Double2">
            <summary>
            Vector of two double values.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Double3">
            <summary>
            Vector of three double values.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Double4">
            <summary>
            Vector of four double values.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Double4x4">
            <summary>
            Four vectors of four double values.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Enum">
            <summary>
            Enumeration.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.String">
            <summary>
            string.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Time">
            <summary>
            Time value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Reference">
            <summary>
            Reference to object or property.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Blob">
            <summary>
            Binary data block type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.Distance">
            <summary>
            Distance.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.PropertyType.DateTime">
            <summary>
            Date and time.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags">
            <summary>
            Property flags that affect their behaviors.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.None">
            <summary>
            No flag.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.Static">
            <summary>
            Property is defined in the class declaration, so it wasn't created dynamically.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.Animatable">
            <summary>
            Property can be animated, thus is can have am animation curve node connected.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.Animated">
            <summary>
            Property is animated, so it also has an animation curve node connected.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.Imported">
            <summary>
            Property has been created during import process when reading FBX file.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UserDefined">
            <summary>
            Property has been defined by user, not by the SDK.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.Hidden">
            <summary>
            Property should not be displayed on user interface.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.NotSavable">
            <summary>
            Property value must not be exported when writing FBX files.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.LockedMember0">
            <summary>
            This property has its member #0 locked.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.LockedMember1">
            <summary>
            This property has its member #1 locked.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.LockedMember2">
            <summary>
            This property has its member #2 locked.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.LockedMember3">
            <summary>
            This property has its member #3 locked.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.LockedAll">
            <summary>
            All members locked.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.MutedMember0">
            <summary>
            This property has its member #0 muted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.MutedMember1">
            <summary>
            This property has its member #1 muted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.MutedMember2">
            <summary>
            This property has its member #2 muted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.MutedMember3">
            <summary>
            This property has its member #3 muted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.MutedAll">
            <summary>
            All members muted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UIDisabled">
            <summary>
            Private flag for dynamic UI in FBX plug-ins.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UIGroup">
            <summary>
            Private flag for dynamic UI in FBX plug-ins.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UIBoolGroup">
            <summary>
            Private flag for dynamic UI in FBX plug-ins.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UIExpanded">
            <summary>
            Private flag for dynamic UI in FBX plug-ins.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UINoCaption">
            <summary>
            Private flag for dynamic UI in FBX plug-ins.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UIPanel">
            <summary>
            Private flag for dynamic UI in FBX plug-ins.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UILeftLabel">
            <summary>
            Private flag for dynamic UI in FBX plug-ins.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UIHidden">
            <summary>
            Private flag for dynamic UI in FBX plug-ins.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.CtrlFlags">
            <summary>
            The Control related flags
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.UIFlags">
            <summary>
            The user interface flags.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.FbxPropertyFlags.AllFlags">
            <summary>
            All flags.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentAuto">
            <summary>
            Auto key (spline cardinal).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentTCB">
            <summary>
            Spline TCB (Tension, Continuity, Bias)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentUser">
            <summary>
            Next slope at the left equal to slope at the right.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentGenericBreak">
            <summary>
            Independent left and right slopes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentBreak">
            <summary>
            Independent left and right slopes, with next slope at the left equal to slope at the right.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentAutoBreak">
            <summary>
            Independent left and right slopes, with auto key.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentGenericClamp">
            <summary>
            Clamp: key should be flat if next or previous key has the same value (overrides tangent mode).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentGenericTimeIndependent">
            <summary>
            Time independent tangent (overrides tangent mode).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentGenericClampProgressive">
            <summary>
            Clamp progressive: key should be flat if tangent control point is outside [next-previous key] range (overrides tangent mode)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.InterpolationConstant">
            <summary>
            Constant value until next key.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.InterpolationLinear">
            <summary>
            Linear progression to next key.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.InterpolationCubic">
            <summary>
            Cubic progression to next key.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.WeightedNone">
            <summary>
            Tangent has default weights of 0.333; we define this state as not weighted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.WeightedRight">
            <summary>
            Right tangent is weighted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.WeightedNextLeft">
            <summary>
            Left tangent is weighted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.WeightedAll">
            <summary>
            Both left and right tangents are weighted.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.ConstantStandard">
            <summary>
            Curve value is constant between this key and the next.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.ConstantNext">
            <summary>
            Curve value is constant, with next key's value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.VelocityNone">
            <summary>
            No velocity (default).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.VelocityRight">
            <summary>
            Right tangent has velocity.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.VelocityNextLeft">
            <summary>
            Left tangent has velocity.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.VelocityAll">
            <summary>
            Both left and right tangents have velocity.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentShowNone">
            <summary>
            No tangent is visible.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentShowLeft">
            <summary>
            Left tangent is visible.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentShowRight">
            <summary>
            Right tangent is visible.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.FBX.AnimationConstant.TangentShowBoth">
            <summary>
            Both left and right tangents are visible.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTF.GLTFExporterV1.ConnectProperties(Aspose.ThreeD.Formats.GLTF.TFIO,Aspose.ThreeD.A3DObject)">
            <summary>
            Connect the dynamic properties from source object to TFIO's derives
            </summary>
            <param name="dst"></param>
            <param name="src"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTF.GLTFExporterV1.WriteFile(System.String,System.String,Aspose.ThreeD.Function{System.Boolean,System.IO.Stream})">
            <summary>
            Write file to stream and return the corrected name.
            </summary>
            <param name="fileName"></param>
            <param name="suffix"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTF.GLTFExporterV2.WriteFile(System.String,System.String,Aspose.ThreeD.Function{System.Boolean,System.IO.Stream})">
            <summary>
            Write file to stream and return the corrected name.
            </summary>
            <param name="fileName"></param>
            <param name="suffix"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTF.GLTFExporterV2.CloneMesh(Aspose.ThreeD.Formats.GLTF.v2.TFMesh,Aspose.ThreeD.Node)">
            <summary>
            Clone mesh with new materials, attributes will be copied directly
            </summary>
            <param name="mesh"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTF.GLTFExporterV2.GetMeshId(Aspose.ThreeD.Node)">
            <summary>
            If the node contains multiple meshes, they'll be packed as one mesh
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTF.GLTFExporterV2.ConnectProperties(Aspose.ThreeD.Formats.GLTF.TFIO,Aspose.ThreeD.A3DObject)">
            <summary>
            Connect the dynamic properties from source object to TFIO's derives
            </summary>
            <param name="dst"></param>
            <param name="src"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTF.TFUtils.GetDefaultW(Aspose.ThreeD.Utilities.VertexFieldSemantic)">
            <summary>
            Gets the default w value depends on the vertex field semantic.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFLight">
            <summary>
            An ambient, directional, point, or spot light.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFAmbient">
            <summary>
            light/ambient
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFAmbient.Color">
            <summary>
            RGB color of the light source.  Each element is floating-point between 0.0 and 1.0.  Element 0 corresponds to R, 1 to G, and 2 to B.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFDirectional">
            <summary>
            light/directional
            </summary>
            <summary>
            light/directional
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFDirectional.Color">
            <summary>
            RGB color of the light source.  Each element is floating-point between 0.0 and 1.0.  Element 0 corresponds to R, 1 to G, and 2 to B.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFPoint">
            <summary>
            light/point
            </summary>
            <summary>
            light/point
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFPoint.Color">
            <summary>
            RGB color of the light source.  Each element is floating-point between 0.0 and 1.0.  Element 0 corresponds to R, 1 to G, and 2 to B.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFPoint.ConstantAttenuation">
            <summary>
            Constant attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFPoint.LinearAttenuation">
            <summary>
            Linear attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFPoint.QuadraticAttenuation">
            <summary>
            Quadratic attenuation factor.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFSpot">
            <summary>
            light/spot
            </summary>
            <summary>
            light/spot
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFSpot.Color">
            <summary>
            RGB color of the light source.  Each element is floating-point between 0.0 and 1.0.  Element 0 corresponds to R, 1 to G, and 2 to B.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFSpot.ConstantAttenuation">
            <summary>
            Constant attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFSpot.FallOffAngle">
            <summary>
            Fall off angle in radians.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFSpot.FallOffExponent">
            <summary>
            Fall off exponent.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFSpot.LinearAttenuation">
            <summary>
            Linear attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.TFSpot.QuadraticAttenuation">
            <summary>
            Quadratic attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.Ambient">
            <summary>
            Ambient light source.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.Directional">
            <summary>
            Directional light source.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.Point">
            <summary>
            Point light source.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.Spot">
            <summary>
            Spot light source.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFLight.Type">
            <summary>
            Specifies the light type.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFShader">
            <summary>
            A vertex or fragment shader.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFShader.TFKHR_binary_glTF">
            <summary>
            KHR_binary_glTF shader extension
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFShader.TFKHR_binary_glTF.BufferView">
            <summary>
            The id (JSON property name) of the buffer-view that references the shader source. Use this instead of the shader's uri property.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFShader.Type">
            <summary>
            The shader stage.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFShader.Uri">
            <summary>
            The uri of the GLSL source.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFBuffer">
            <summary>
            A buffer points to binary geometry, animation, or skins.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFBuffer.ByteLength">
            <summary>
            The length of the buffer in bytes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFBuffer.Type">
            <summary>
            XMLHttpRequest `responseType`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFBuffer.Uri">
            <summary>
            The uri of the buffer.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFBufferView">
            <summary>
            A view into a buffer generally representing a subset of the buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFBufferView.Buffer">
            <summary>
            The ID of the buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFBufferView.ByteLength">
            <summary>
            The length of the bufferView in bytes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFBufferView.ByteOffset">
            <summary>
            The offset into the buffer in bytes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFBufferView.Target">
            <summary>
            The target that the WebGL buffer should be bound to.  All valid values correspond to WebGL enums.  When this is not provided, the bufferView contains animation or skin data.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique">
            <summary>
            A template for material appearances.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFParameters">
            <summary>
            An attribute or uniform input to a technique, and an optional semantic and value.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFParameters.Count">
            <summary>
            When defined, the parameter is an array of count elements of the specified type.  Otherwise, the parameter is not an array.  When defined, `value` is an array with length equal to count, times the number of components in the type, e.g., `3` for `FLOAT_VEC3`.  An array parameter of scalar values is not the same as a vector parameter of the same size; for example, when count is 2 and type is 5126 (FLOAT), the parameter is an array of two floating-point values, not a FLOAT_VEC2.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFParameters.Node">
            <summary>
            The id of the node whose transform is used as the parameter's value.  When this is defined, `type` must be `35676` (FLOAT_MAT4), therefore, when the semantic is "MODELINVERSETRANSPOSE", "MODELVIEWINVERSETRANSPOSE", or "VIEWPORT", the node property can't be defined.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFParameters.Semantic">
            <summary>
            Identifies a parameter with a well-known meaning.  Uniform semantics include `"LOCAL"` (FLOAT_MAT4), `"MODEL"` (FLOAT_MAT4), `"VIEW"` (FLOAT_MAT4), `"PROJECTION"` (FLOAT_MAT4), `"MODELVIEW"` (FLOAT_MAT4), `"MODELVIEWPROJECTION"` (FLOAT_MAT4), `"MODELINVERSE"` (FLOAT_MAT4), `"VIEWINVERSE"` (FLOAT_MAT4), `"PROJECTIONINVERSE"` (FLOAT_MAT4), `"MODELVIEWINVERSE"` (FLOAT_MAT4), `"MODELVIEWPROJECTIONINVERSE"` (FLOAT_MAT4), `"MODELINVERSETRANSPOSE"` (FLOAT_MAT3), `"MODELVIEWINVERSETRANSPOSE"` (FLOAT_MAT3), `"VIEWPORT"` (FLOAT_VEC4), `"JOINTMATRIX"` (FLOAT_MAT4).  Attribute semantics include `"POSITION"`, `"NORMAL"`, `"TEXCOORD"`, `"COLOR"`, `"JOINT"`, and `"WEIGHT"`.  Attribute semantic property names can be of the form `[semantic]_[set_index]`, e.g., `"TEXCOORD_0"`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFParameters.Type">
            <summary>
            The datatype.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFParameters.Value">
            <summary>
            The value of the parameter.  A material value with the same name, when specified, overrides this value.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates">
            <summary>
            Fixed-function rendering states.
            </summary>
            <summary>
            Fixed-function rendering states.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions">
            <summary>
            Arguments for fixed-function rendering state functions other than `enable()`/`disable()`.
            </summary>
            <summary>
            Arguments for fixed-function rendering state functions other than `enable()`/`disable()`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.BlendColor">
            <summary>
            Floating-point values passed to `blendColor()`. [red, green, blue, alpha]
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.BlendEquationSeparate">
            <summary>
            Integer values passed to `blendEquationSeparate()`. [rgb, alpha]. All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.BlendFuncSeparate">
            <summary>
            Integer values passed to `blendFuncSeparate()`. [srcRGB, dstRGB, srcAlpha, dstAlpha]. All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.ColorMask">
            <summary>
            Boolean values passed to `colorMask()`. [red, green, blue, alpha].
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.CullFace">
            <summary>
            Integer value passed to `cullFace()`. All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.DepthFunc">
            <summary>
            Integer values passed to `depthFunc()`. All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.DepthMask">
            <summary>
            Boolean value passed to `depthMask()`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.DepthRange">
            <summary>
            Floating-point values passed to `depthRange()`. [zNear, zFar]
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.FrontFace">
            <summary>
            Integer value passed to `frontFace()`.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.LineWidth">
            <summary>
            Floating-point value passed to `lineWidth()`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.PolygonOffset">
            <summary>
            Floating-point value passed to `polygonOffset()`.  [factor, units]
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.TFFunctions.Scissor">
            <summary>
            Floating-point value passed to `scissor()`.  [x, y, width, height].  The default is the dimensions of the canvas when the WebGL context is created.  width and height must be greater than zero.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.TFStates.Enable">
            <summary>
            WebGL states to enable.  States not in the array are disabled.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.Attributes">
            <summary>
            A dictionary object of strings that maps GLSL attribute names to technique parameter IDs.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.Parameters">
            <summary>
            A dictionary object of technique.parameters objects.  Each parameter defines an attribute or uniform input, and an optional semantic and value.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.Program">
            <summary>
            The ID of the program.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.States">
            <summary>
            Fixed-function rendering states.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTechnique.Uniforms">
            <summary>
            A dictionary object of strings that maps GLSL uniform names to technique parameter IDs.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFAccessor">
            <summary>
            A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's `vertexAttribPointer()` defines an attribute in a buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAccessor.BufferView">
            <summary>
            The ID of the bufferView.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAccessor.ByteOffset">
            <summary>
            The offset relative to the start of the bufferView in bytes.  This must be a multiple of the size of the data type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAccessor.ByteStride">
            <summary>
            The stride, in bytes, between attributes referenced by this accessor.  When this is zero, the attributes are tightly packed.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAccessor.ComponentType">
            <summary>
            The datatype of components in the attribute.  All valid values correspond to WebGL enums.  The corresponding typed arrays are `Int8Array`, `Uint8Array`, `Int16Array`, `Uint16Array`, and `Float32Array`, respectively.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAccessor.Count">
            <summary>
            The number of attributes referenced by this accessor, not to be confused with the number of bytes or number of components.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAccessor.Max">
            <summary>
            Maximum value of each component in this attribute.  When both min and max arrays are defined, they have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAccessor.Min">
            <summary>
            Minimum value of each component in this attribute.  When both min and max arrays are defined, they have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAccessor.Type">
            <summary>
            Specifies if the attribute is a scalar, vector, or matrix, and the number of elements in the vector or matrix.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFImage">
            <summary>
            Image data used to create a texture.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFImage.TFKHR_binary_glTF">
            <summary>
            KHR_binary_glTF image extension
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFImage.TFKHR_binary_glTF.BufferView">
            <summary>
            The id (JSON property name) of the buffer-view that references the image. Use this instead of the image's uri property.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFImage.TFKHR_binary_glTF.Height">
            <summary>
            The height of the image in pixels.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFImage.TFKHR_binary_glTF.MimeType">
            <summary>
            The image's MIME type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFImage.TFKHR_binary_glTF.Width">
            <summary>
            The width of the image in pixels.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFImage.Uri">
            <summary>
            The uri of the image.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.  The image format must be jpg, png, bmp, or gif.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFMaterial">
            <summary>
            The material appearance of a primitive.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFMaterial.Technique">
            <summary>
            The ID of the technique.  If this is not supplied, and no extension is present that defines material properties, then the primitive should be rendered using a default material with 50% gray emissive color.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFMaterial.Values">
            <summary>
            A dictionary object of parameter values.  Parameters with the same name as the technique's parameter override the technique's parameter value.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFNode">
            <summary>
            A node in the node hierarchy.  A node can have either the `camera`, `meshes`, or `skeletons`/`skin`/`meshes` properties defined.  In the later case, all `primitives` in the referenced `meshes` contain `JOINT` and `WEIGHT` attributes and the referenced `material`/`technique` from each `primitive` has parameters with `JOINT` and `WEIGHT` semantics.  A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFNode.TFKHR_materials_common">
            <summary>
            KHR_materials_common node extension
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.TFKHR_materials_common.Light">
            <summary>
            The id of the light referenced by this node.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.Camera">
            <summary>
            The ID of the camera referenced by this node.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.Children">
            <summary>
            The IDs of this node's children.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.JointName">
            <summary>
            Name used when this node is a joint in a skin.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.Matrix">
            <summary>
            A floating-point 4x4 transformation matrix stored in column-major order.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.Meshes">
            <summary>
            The IDs of the meshes in this node.  Multiple meshes are allowed so each can share the same transform matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.Rotation">
            <summary>
            The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.Scale">
            <summary>
            The node's non-uniform scale.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.Skeletons">
            <summary>
            The ID of skeleton nodes.  Each node defines a subtree, which has a `jointName` of the corresponding element in the referenced `skin.jointNames`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.Skin">
            <summary>
            The ID of the skin referenced by this node.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFNode.Translation">
            <summary>
            The node's translation.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF">
            <summary>
            The root object for a glTF asset.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.TFKHR_materials_common">
            <summary>
            KHR_materials_common glTF extension
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Accessors">
            <summary>
            A dictionary object of accessors.  The name of each accessor is an ID in the global glTF namespace that is used to reference the accessor.  An accessor is a typed view into a bufferView.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Animations">
            <summary>
            A dictionary object of keyframe animations.  The name of each animation is an ID in the global glTF namespace that is used to reference the animation.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Asset">
            <summary>
            Metadata about the glTF asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.BufferViews">
            <summary>
            A dictionary object of bufferViews.  The name of each bufferView is an ID in the global glTF namespace that is used to reference the bufferView.  A bufferView is a view into a buffer generally representing a subset of the buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Buffers">
            <summary>
            A dictionary object of buffers.  The name of each buffer is an ID in the global glTF namespace that is used to reference the buffer.  A buffer points to binary geometry, animation, or skins.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Cameras">
            <summary>
            A dictionary object of cameras.  The name of each camera is an ID in the global glTF namespace that is used to reference the camera.  A camera defines a projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.ExtensionsUsed">
            <summary>
            Names of extensions used somewhere in this asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Images">
            <summary>
            A dictionary object of images.  The name of each image is an ID in the global glTF namespace that is used to reference the image.  An image defines data used to create a texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Materials">
            <summary>
            A dictionary object of materials.  The name of each material is an ID in the global glTF namespace that is used to reference the material.  A material defines the appearance of a primitive.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Meshes">
            <summary>
            A dictionary object of meshes.  The name of each mesh is an ID in the global glTF namespace that is used to reference the mesh.  A mesh is a set of primitives to be rendered.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Nodes">
            <summary>
            A dictionary object of nodes in the node hierarchy.  The name of each node is an ID in the global glTF namespace that is used to reference the node.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Programs">
            <summary>
            A dictionary object of shader programs.  The name of each program is an ID in the global glTF namespace that is used to reference the program.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Samplers">
            <summary>
            A dictionary object of samplers.  The name of each sampler is an ID in the global glTF namespace that is used to reference the sampler.  A sampler contains properties for texture filtering and wrapping modes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.SceneId">
            <summary>
            The ID of the default scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Scenes">
            <summary>
            A dictionary object of scenes.  The name of each scene is an ID in the global glTF namespace that is used to reference the scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Shaders">
            <summary>
            A dictionary object of shaders.  The name of each shader is an ID in the global glTF namespace that is used to reference the shader.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Skins">
            <summary>
            A dictionary object of skins.  The name of each skin is an ID in the global glTF namespace that is used to reference the skin.  A skin is defined by joints and matrices.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Techniques">
            <summary>
            A dictionary object of techniques.  The name of each technique is an ID in the global glTF namespace that is used to reference the technique.  A technique is a template for a material appearance.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFGlTF.Textures">
            <summary>
            A dictionary object of textures.  The name of each texture is an ID in the global glTF namespace that is used to reference the texture.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation">
            <summary>
            A keyframe animation.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFChannel">
            <summary>
            Targets an animation's sampler at a node's property.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFChannel.TFTarget">
            <summary>
            The ID of the node and TRS property that an animation channel targets.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFChannel.TFTarget.Id">
            <summary>
            The ID of the node to target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFChannel.TFTarget.Path">
            <summary>
            The name of the node's TRS property to modify.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFChannel.Sampler">
            <summary>
            The ID of a sampler in this animation used to compute the value for the target, e.g., a node's translation, rotation, or scale (TRS).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFChannel.Target">
            <summary>
            The ID of the node and TRS property to target.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFSampler">
            <summary>
            Combines input and output parameters with an interpolation algorithm to define a keyframe graph (but not its target).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFSampler.Input">
            <summary>
            The ID of a parameter in this animation to use as keyframe input.  This parameter must have type `FLOAT`.  The values represent time in seconds with `time[0] &gt;= 0.0`, and monotonically increasing values, i.e., `time[n + 1] &gt;= time[n]`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFSampler.Interpolation">
            <summary>
            Interpolation algorithm.  When an animation targets a node's rotation, and the animation's interpolation is `"LINEAR"`, spherical linear interpolation (slerp) should be used to interpolate quaternions.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.TFSampler.Output">
            <summary>
            The ID of a parameter in this animation to use as keyframe output.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.Channels">
            <summary>
            An array of channels, each of which targets an animation's sampler at a node's property.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.Parameters">
            <summary>
            A dictionary object of strings whose values are IDs of accessors with keyframe data, e.g., time, translation, rotation, etc.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAnimation.Samplers">
            <summary>
            A dictionary object of samplers that combines input and output parameters with an interpolation algorithm to define a keyframe graph (but not its target).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFAsset">
            <summary>
            Metadata about the glTF asset.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFAsset.TFProfile">
            <summary>
            Specifies the target rendering API and version, e.g., WebGL 1.0.3.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAsset.TFProfile.Api">
            <summary>
            Specifies the target rendering API.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAsset.TFProfile.Version">
            <summary>
            The API version.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAsset.Copyright">
            <summary>
            A copyright message suitable for display to credit the content creator.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAsset.Generator">
            <summary>
            Tool that generated this glTF model.  Useful for debugging.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAsset.PremultipliedAlpha">
            <summary>
            Specifies if the shaders were generated with premultiplied alpha.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFAsset.Version">
            <summary>
            The glTF version.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFCamera">
            <summary>
            A camera's projection.  A node can reference a camera ID to apply a transform to place the camera in the scene.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFOrthographic">
            <summary>
            An orthographic camera containing properties to create an orthographic projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFOrthographic.Xmag">
            <summary>
            The floating-point horizontal magnification of the view.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFOrthographic.Ymag">
            <summary>
            The floating-point vertical magnification of the view.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFOrthographic.Zfar">
            <summary>
            The floating-point distance to the far clipping plane.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFOrthographic.Znear">
            <summary>
            The floating-point distance to the near clipping plane.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFPerspective">
            <summary>
            A perspective camera containing properties to create a perspective projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFPerspective.AspectRatio">
            <summary>
            The floating-point aspect ratio of the field of view.  When this is undefined, the aspect ratio of the canvas is used.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFPerspective.Yfov">
            <summary>
            The floating-point vertical field of view in radians.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFPerspective.Zfar">
            <summary>
            The floating-point distance to the far clipping plane.  zfar must be greater than znear.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.TFPerspective.Znear">
            <summary>
            The floating-point distance to the near clipping plane.  zfar must be greater than znear.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.Orthographic">
            <summary>
            An orthographic camera containing properties to create an orthographic projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.Perspective">
            <summary>
            A perspective camera containing properties to create a perspective projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFCamera.Type">
            <summary>
            Specifies if the camera uses a perspective or orthographic projection.  Based on this, either the camera's `perspective` or `orthographic` property will be defined.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFMesh">
            <summary>
            A set of primitives to be rendered.  A node can contain one or more meshes.  A node's transform places the mesh in the scene.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFMesh.TFPrimitive">
            <summary>
            Geometry to be rendered with the given material.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFMesh.TFPrimitive.Attributes">
            <summary>
            A dictionary object of strings, where each string is the ID of the accessor containing an attribute.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFMesh.TFPrimitive.Indices">
            <summary>
            The ID of the accessor that contains the indices.  When this is not defined, the primitives should be rendered without indices using `drawArrays()`.  When defined, the accessor must contain indices: the bufferView referenced by the accessor must have a target equal to 34963 (ELEMENT_ARRAY_BUFFER); a byteStride that is tightly packed, i.e., 0 or the byte size of componentType in bytes; componentType must be 5121 (UNSIGNED_BYTE) or 5123 (UNSIGNED_SHORT); and type must be "SCALAR".
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFMesh.TFPrimitive.Material">
            <summary>
            The ID of the material to apply to this primitive when rendering.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFMesh.TFPrimitive.Mode">
            <summary>
            The type of primitives to render. All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFMesh.Primitives">
            <summary>
            An array of primitives, each defining geometry to be rendered with a material.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFProgram">
            <summary>
            A shader program, including its vertex and fragment shader, and names of vertex shader attributes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFProgram.Attributes">
            <summary>
            Names of GLSL vertex shader attributes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFProgram.FragmentShader">
            <summary>
            The ID of the fragment shader.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFProgram.VertexShader">
            <summary>
            The ID of the vertex shader.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFSampler">
            <summary>
            Texture sampler properties for filtering and wrapping modes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFSampler.MagFilter">
            <summary>
            Magnification filter.  Valid values correspond to WebGL enums: `9728` (NEAREST) and `9729` (LINEAR).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFSampler.MinFilter">
            <summary>
            Minification filter.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFSampler.WrapS">
            <summary>
            s wrapping mode.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFSampler.WrapT">
            <summary>
            t wrapping mode.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFScene">
            <summary>
            The root nodes of a scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFScene.Nodes">
            <summary>
            The IDs of each root node.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFSkin">
            <summary>
            Joints and matrices defining a skin.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFSkin.BindShapeMatrix">
            <summary>
            Floating-point 4x4 transformation matrix stored in column-major order.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFSkin.InverseBindMatrices">
            <summary>
            The ID of the accessor containing the floating-point 4x4 inverse-bind matrices.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFSkin.JointNames">
            <summary>
            Joint names of the joints (nodes with a `jointName` property) in this skin.  The array length is the same as the `count` property of the `inverseBindMatrices` accessor, and the same as the total quantity of all skeleton nodes from node-trees referenced by the skinned mesh instance node's `skeletons` array.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v1.TFTexture">
            <summary>
            A texture and its sampler.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTexture.Format">
            <summary>
            The texture's format.  Valid values correspond to WebGL enums: `6406` (ALPHA), `6407` (RGB), `6408` (RGBA), `6409` (LUMINANCE), and `6410` (LUMINANCE_ALPHA).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTexture.InternalFormat">
            <summary>
            The texture's internal format.  Valid values correspond to WebGL enums: `6406` (ALPHA), `6407` (RGB), `6408` (RGBA), `6409` (LUMINANCE), and `6410` (LUMINANCE_ALPHA).  Defaults to same value as format.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTexture.Sampler">
            <summary>
            The ID of the sampler used by this texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTexture.Source">
            <summary>
            The ID of the image used by this texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTexture.Target">
            <summary>
            The target that the WebGL texture should be bound to.  Valid values correspond to WebGL enums: `3553` (TEXTURE_2D).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v1.TFTexture.Type">
            <summary>
            Texel datatype.  Valid values correspond to WebGL enums: `5121` (UNSIGNED_BYTE), `33635` (UNSIGNED_SHORT_5_6_5), `32819` (UNSIGNED_SHORT_4_4_4_4), and `32820` (UNSIGNED_SHORT_5_5_5_1).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor">
            <summary>
            A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's `vertexAttribPointer()` defines an attribute in a buffer.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse">
            <summary>
            Sparse storage of attributes that deviate from their initialization value.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.TFIndices">
            <summary>
            Indices of those attributes that deviate from their initialization value.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.TFIndices.BufferView">
            <summary>
            The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.TFIndices.ByteOffset">
            <summary>
            The offset relative to the start of the bufferView in bytes. Must be aligned.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.TFIndices.ComponentType">
            <summary>
            The indices data type.  Valid values correspond to WebGL enums: `5121` (UNSIGNED_BYTE), `5123` (UNSIGNED_SHORT), `5125` (UNSIGNED_INT).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.TFValues">
            <summary>
            Array of size `accessor.sparse.count` times number of components storing the displaced accessor attributes pointed by `accessor.sparse.indices`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.TFValues.BufferView">
            <summary>
            The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.TFValues.ByteOffset">
            <summary>
            The offset relative to the start of the bufferView in bytes. Must be aligned.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.Count">
            <summary>
            The number of attributes encoded in this sparse accessor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.Indices">
            <summary>
            Index array of size `count` that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.TFSparse.Values">
            <summary>
            Array of size `count` times number of components, storing the displaced accessor attributes pointed by `indices`. Substituted values must have the same `componentType` and number of components as the base accessor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.BufferView">
            <summary>
            The index of the bufferView.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.ByteOffset">
            <summary>
            The offset relative to the start of the bufferView in bytes.  This must be a multiple of the size of the component datatype.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.ComponentType">
            <summary>
            The datatype of components in the attribute.  All valid values correspond to WebGL enums.  The corresponding typed arrays are `Int8Array`, `Uint8Array`, `Int16Array`, `Uint16Array`, `Uint32Array`, and `Float32Array`, respectively.  5125 (UNSIGNED_INT) is only allowed when the accessor contains indices, i.e., the accessor is only referenced by `primitive.indices`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.Count">
            <summary>
            The number of attributes referenced by this accessor, not to be confused with the number of bytes or number of components.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.Max">
             <summary>
             Maximum value of each component in this attribute.  Both min and max arrays have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.
            
             When `componentType` is `5126` (FLOAT) each array value must be stored as double-precision JSON number with numerical value which is equal to buffer-stored single-precision value to avoid extra runtime conversions.
            
             `normalized` property has no effect on array values: they always correspond to the actual values stored in the buffer. When accessor is sparse, this property must contain max values of accessor data with sparse substitution applied.
             </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.Min">
             <summary>
             Minimum value of each component in this attribute.  Both min and max arrays have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.
            
             When `componentType` is `5126` (FLOAT) each array value must be stored as double-precision JSON number with numerical value which is equal to buffer-stored single-precision value to avoid extra runtime conversions.
            
             `normalized` property has no effect on array values: they always correspond to the actual values stored in the buffer. When accessor is sparse, this property must contain min values of accessor data with sparse substitution applied.
             </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.Normalized">
            <summary>
            Specifies whether integer data values should be normalized (`true`) to [0, 1] (for unsigned types) or [-1, 1] (for signed types), or converted directly (`false`) when they are accessed. This property is defined only for accessors that contain vertex attributes or morph weights animation data.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.Sparse">
            <summary>
            Sparse storage of attributes that deviate from their initialization value.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAccessor.Type">
            <summary>
            Specifies if the attribute is a scalar, vector, or matrix.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation">
            <summary>
            A keyframe animation.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFChannel">
            <summary>
            Targets an animation's sampler at a node's property.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFChannel.TFTarget">
            <summary>
            The index of the node and TRS property that an animation channel targets.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFChannel.TFTarget.Node">
            <summary>
            The index of the node to target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFChannel.TFTarget.Path">
            <summary>
            The name of the node's TRS property to modify, or the "weights" of the Morph Targets it instantiates.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFChannel.Sampler">
            <summary>
            The index of a sampler in this animation used to compute the value for the target, e.g., a node's translation, rotation, or scale (TRS).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFChannel.Target">
            <summary>
            The index of the node and TRS property to target.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFSampler">
            <summary>
            Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFSampler.Input">
            <summary>
            The index of an accessor containing keyframe input values, e.g., time. That accessor must have componentType `FLOAT`. The values represent time in seconds with `time[0] &gt;= 0.0`, and strictly increasing values, i.e., `time[n + 1] &gt; time[n]`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFSampler.Interpolation">
            <summary>
            Interpolation algorithm.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.TFSampler.Output">
            <summary>
            The index of an accessor, containing keyframe output values. When sampler is used with TRS target, output accessor's componentType must be `FLOAT`, output and input accessors must have the same `count` except for `CUBICSPLINE` interpolation where output count is 3x the input count. When sampler is used with morph weights target, output accessor's componentType can be `FLOAT` or normalized integer, output count must be the input count times the number of morph targets.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.Channels">
            <summary>
            An array of channels, each of which targets an animation's sampler at a node's property. Different channels of the same animation can't have equal targets.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAnimation.Samplers">
            <summary>
            An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFAsset">
            <summary>
            Metadata about the glTF asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAsset.Copyright">
            <summary>
            A copyright message suitable for display to credit the content creator.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAsset.Generator">
            <summary>
            Tool that generated this glTF model.  Useful for debugging.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAsset.MinVersion">
            <summary>
            The minimum glTF version that this asset targets.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFAsset.Version">
            <summary>
            The glTF version that this asset targets.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFBuffer">
            <summary>
            A buffer points to binary geometry, animation, or skins.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFBuffer.ByteLength">
            <summary>
            The length of the buffer in bytes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFBuffer.Uri">
            <summary>
            The uri of the buffer.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFBufferView">
            <summary>
            A view into a buffer generally representing a subset of the buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFBufferView.Buffer">
            <summary>
            The index of the buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFBufferView.ByteLength">
            <summary>
            The length of the bufferView in bytes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFBufferView.ByteOffset">
            <summary>
            The offset into the buffer in bytes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFBufferView.ByteStride">
            <summary>
            The stride, in bytes, between vertex attributes.  When this is not defined, data is tightly packed. When two or more accessors use the same bufferView, this field must be defined.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFBufferView.Target">
            <summary>
            The target that the GPU buffer should be bound to.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFCamera">
            <summary>
            A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFOrthographic">
            <summary>
            An orthographic camera containing properties to create an orthographic projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFOrthographic.Xmag">
            <summary>
            The floating-point horizontal magnification of the view.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFOrthographic.Ymag">
            <summary>
            The floating-point vertical magnification of the view.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFOrthographic.Zfar">
            <summary>
            The floating-point distance to the far clipping plane. `zfar` must be greater than `znear`.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFOrthographic.Znear">
            <summary>
            The floating-point distance to the near clipping plane.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFPerspective">
            <summary>
            A perspective camera containing properties to create a perspective projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFPerspective.AspectRatio">
            <summary>
            The floating-point aspect ratio of the field of view. When this is undefined, the aspect ratio of the canvas is used.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFPerspective.Yfov">
            <summary>
            The floating-point vertical field of view in radians.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFPerspective.Zfar">
            <summary>
            The floating-point distance to the far clipping plane. When defined, `zfar` must be greater than `znear`. If `zfar` is undefined, runtime must use infinite projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.TFPerspective.Znear">
            <summary>
            The floating-point distance to the near clipping plane.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.Orthographic">
            <summary>
            An orthographic camera containing properties to create an orthographic projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.Perspective">
            <summary>
            A perspective camera containing properties to create a perspective projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFCamera.Type">
            <summary>
            Specifies if the camera uses a perspective or orthographic projection.  Based on this, either the camera's `perspective` or `orthographic` property will be defined.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF">
            <summary>
            The root object for a glTF asset.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.TFKHR_materials_common">
            <summary>
            KHR_materials_common glTF extension
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.TFKHR_materials_pbrSpecularGlossiness">
            <summary>
            glTF extension that defines the specular-glossiness material model from Physically-Based Rendering (PBR) methodology.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.TFKHR_materials_pbrSpecularGlossiness.DiffuseFactor">
            <summary>
            The RGBA components of the reflected diffuse color of the material. Metals have a diffuse value of `[0.0, 0.0, 0.0]`. The fourth component (A) is the alpha coverage of the material. The `alphaMode` property specifies how alpha is interpreted. The values are linear.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.TFKHR_materials_pbrSpecularGlossiness.DiffuseTexture">
            <summary>
            The diffuse texture. This texture contains RGB(A) components of the reflected diffuse color of the material in sRGB color space. If the fourth component (A) is present, it represents the alpha coverage of the material. Otherwise, an alpha of 1.0 is assumed. The `alphaMode` property specifies how alpha is interpreted. The stored texels must not be premultiplied.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.TFKHR_materials_pbrSpecularGlossiness.GlossinessFactor">
            <summary>
            The glossiness or smoothness of the material. A value of 1.0 means the material has full glossiness or is perfectly smooth. A value of 0.0 means the material has no glossiness or is completely rough. This value is linear.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.TFKHR_materials_pbrSpecularGlossiness.SpecularFactor">
            <summary>
            The specular RGB color of the material. This value is linear.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.TFKHR_materials_pbrSpecularGlossiness.SpecularGlossinessTexture">
            <summary>
            The specular-glossiness texture is RGBA texture, containing the specular color of the material (RGB components) and its glossiness (A component). The values are in sRGB space.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Accessors">
            <summary>
            An array of accessors.  An accessor is a typed view into a bufferView.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Animations">
            <summary>
            An array of keyframe animations.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Asset">
            <summary>
            Metadata about the glTF asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.BufferViews">
            <summary>
            An array of bufferViews.  A bufferView is a view into a buffer generally representing a subset of the buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Buffers">
            <summary>
            An array of buffers.  A buffer points to binary geometry, animation, or skins.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Cameras">
            <summary>
            An array of cameras.  A camera defines a projection matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.ExtensionsRequired">
            <summary>
            Names of glTF extensions required to properly load this asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.ExtensionsUsed">
            <summary>
            Names of glTF extensions used somewhere in this asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Images">
            <summary>
            An array of images.  An image defines data used to create a texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Materials">
            <summary>
            An array of materials.  A material defines the appearance of a primitive.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Meshes">
            <summary>
            An array of meshes.  A mesh is a set of primitives to be rendered.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Nodes">
            <summary>
            An array of nodes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Samplers">
            <summary>
            An array of samplers.  A sampler contains properties for texture filtering and wrapping modes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.SceneId">
            <summary>
            The index of the default scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Scenes">
            <summary>
            An array of scenes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Skins">
            <summary>
            An array of skins.  A skin is defined by joints and matrices.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFGlTF.Textures">
            <summary>
            An array of textures.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFImage">
            <summary>
            Image data used to create a texture. Image can be referenced by URI or `bufferView` index. `mimeType` is required in the latter case.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFImage.TFKHR_binary_glTF">
            <summary>
            KHR_binary_glTF image extension
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFImage.TFKHR_binary_glTF.BufferView">
            <summary>
            The id (JSON property name) of the buffer-view that references the image. Use this instead of the image's uri property.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFImage.TFKHR_binary_glTF.Height">
            <summary>
            The height of the image in pixels.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFImage.TFKHR_binary_glTF.MimeType">
            <summary>
            The image's MIME type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFImage.TFKHR_binary_glTF.Width">
            <summary>
            The width of the image in pixels.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFImage.BufferView">
            <summary>
            The index of the bufferView that contains the image. Use this instead of the image's uri property.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFImage.MimeType">
            <summary>
            The image's MIME type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFImage.Uri">
            <summary>
            The uri of the image.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.  The image format must be jpg or png.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFLight">
            <summary>
            An ambient, directional, point, or spot light.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFAmbient">
            <summary>
            light/ambient
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFAmbient.Color">
            <summary>
            RGB color of the light source.  Each element is floating-point between 0.0 and 1.0.  Element 0 corresponds to R, 1 to G, and 2 to B.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFDirectional">
            <summary>
            light/directional
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFDirectional.Color">
            <summary>
            RGB color of the light source.  Each element is floating-point between 0.0 and 1.0.  Element 0 corresponds to R, 1 to G, and 2 to B.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFPoint">
            <summary>
            light/point
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFPoint.Color">
            <summary>
            RGB color of the light source.  Each element is floating-point between 0.0 and 1.0.  Element 0 corresponds to R, 1 to G, and 2 to B.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFPoint.ConstantAttenuation">
            <summary>
            Constant attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFPoint.LinearAttenuation">
            <summary>
            Linear attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFPoint.QuadraticAttenuation">
            <summary>
            Quadratic attenuation factor.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFSpot">
            <summary>
            light/spot
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFSpot.Color">
            <summary>
            RGB color of the light source.  Each element is floating-point between 0.0 and 1.0.  Element 0 corresponds to R, 1 to G, and 2 to B.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFSpot.ConstantAttenuation">
            <summary>
            Constant attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFSpot.FallOffAngle">
            <summary>
            Fall off angle in radians.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFSpot.FallOffExponent">
            <summary>
            Fall off exponent.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFSpot.LinearAttenuation">
            <summary>
            Linear attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.TFSpot.QuadraticAttenuation">
            <summary>
            Quadratic attenuation factor.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.Ambient">
            <summary>
            Ambient light source.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.Directional">
            <summary>
            Directional light source.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.Point">
            <summary>
            Point light source.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.Spot">
            <summary>
            Spot light source.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFLight.Type">
            <summary>
            Specifies the light type.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial">
            <summary>
            The material appearance of a primitive.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFNormalTextureInfo">
            <summary>
            normalTextureInfo
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFNormalTextureInfo.Scale">
            <summary>
            The scalar multiplier applied to each normal vector of the texture. This value scales the normal vector using the formula: `scaledNormal =  normalize((normalize(&lt;sampled normal texture value&gt;) * 2.0 - 1.0) * vec3(&lt;normal scale&gt;, &lt;normal scale&gt;, 1.0))`. This value is ignored if normalTexture is not specified. This value is linear.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFOcclusionTextureInfo">
            <summary>
            occlusionTextureInfo
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFOcclusionTextureInfo.Strength">
            <summary>
            A scalar multiplier controlling the amount of occlusion applied. A value of 0.0 means no occlusion. A value of 1.0 means full occlusion. This value affects the resulting color using the formula: `occludedColor = lerp(color, color * &lt;sampled occlusion texture value&gt;, &lt;occlusion strength&gt;)`. This value is ignored if the corresponding texture is not specified. This value is linear.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFPbrMetallicRoughness">
            <summary>
            A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFPbrMetallicRoughness.BaseColorFactor">
            <summary>
            The RGBA components of the base color of the material. The fourth component (A) is the alpha coverage of the material. The `alphaMode` property specifies how alpha is interpreted. These values are linear. If a baseColorTexture is specified, this value is multiplied with the texel values.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFPbrMetallicRoughness.BaseColorTexture">
            <summary>
            The base color texture. This texture contains RGB(A) components in sRGB color space. The first three components (RGB) specify the base color of the material. If the fourth component (A) is present, it represents the alpha coverage of the material. Otherwise, an alpha of 1.0 is assumed. The `alphaMode` property specifies how alpha is interpreted. The stored texels must not be premultiplied.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFPbrMetallicRoughness.MetallicFactor">
            <summary>
            The metalness of the material. A value of 1.0 means the material is a metal. A value of 0.0 means the material is a dielectric. Values in between are for blending between metals and dielectrics such as dirty metallic surfaces. This value is linear. If a metallicRoughnessTexture is specified, this value is multiplied with the metallic texel values.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFPbrMetallicRoughness.MetallicRoughnessTexture">
            <summary>
            The metallic-roughness texture. The metalness values are sampled from the B channel. The roughness values are sampled from the G channel. These values are linear. If other channels are present (R or A), they are ignored for metallic-roughness calculations.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.TFPbrMetallicRoughness.RoughnessFactor">
            <summary>
            The roughness of the material. A value of 1.0 means the material is completely rough. A value of 0.0 means the material is completely smooth. This value is linear. If a metallicRoughnessTexture is specified, this value is multiplied with the roughness texel values.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.AlphaCutoff">
            <summary>
            Specifies the cutoff threshold when in `MASK` mode. If the alpha value is greater than or equal to this value then it is rendered as fully opaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire material as fully transparent. This value is ignored for other modes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.AlphaMode">
            <summary>
            The material's alpha rendering mode enumeration specifying the interpretation of the alpha value of the main factor and texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.DoubleSided">
            <summary>
            Specifies whether the material is double sided. When this value is false, back-face culling is enabled. When this value is true, back-face culling is disabled and double sided lighting is enabled. The back-face must have its normals reversed before the lighting equation is evaluated.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.EmissiveFactor">
            <summary>
            The RGB components of the emissive color of the material. These values are linear. If an emissiveTexture is specified, this value is multiplied with the texel values.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.EmissiveTexture">
            <summary>
            The emissive map controls the color and intensity of the light being emitted by the material. This texture contains RGB components in sRGB color space. If a fourth component (A) is present, it is ignored.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.NormalTexture">
            <summary>
            A tangent space normal map. The texture contains RGB components in linear space. Each texel represents the XYZ components of a normal vector in tangent space. Red [0 to 255] maps to X [-1 to 1]. Green [0 to 255] maps to Y [-1 to 1]. Blue [128 to 255] maps to Z [1/255 to 1]. The normal vectors use OpenGL conventions where +X is right and +Y is up. +Z points toward the viewer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.OcclusionTexture">
            <summary>
            The occlusion map texture. The occlusion values are sampled from the R channel. Higher values indicate areas that should receive full indirect lighting and lower values indicate no indirect lighting. These values are linear. If other channels are present (GBA), they are ignored for occlusion calculations.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMaterial.PbrMetallicRoughness">
            <summary>
            A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of `pbrMetallicRoughness` apply.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFMesh">
            <summary>
            A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFMesh.TFPrimitive">
            <summary>
            Geometry to be rendered with the given material.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMesh.TFPrimitive.Attributes">
            <summary>
            A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMesh.TFPrimitive.Indices">
            <summary>
            The index of the accessor that contains mesh indices.  When this is not defined, the primitives should be rendered without indices using `drawArrays()`.  When defined, the accessor must contain indices: the `bufferView` referenced by the accessor should have a `target` equal to 34963 (ELEMENT_ARRAY_BUFFER); `componentType` must be 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT) or 5125 (UNSIGNED_INT), the latter may require enabling additional hardware support; `type` must be `"SCALAR"`. For triangle primitives, the front face has a counter-clockwise (CCW) winding order.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMesh.TFPrimitive.Material">
            <summary>
            The index of the material to apply to this primitive when rendering.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMesh.TFPrimitive.Mode">
            <summary>
            The type of primitives to render. All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMesh.TFPrimitive.Targets">
            <summary>
            An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only `POSITION`, `NORMAL`, and `TANGENT` supported) to their deviations in the Morph Target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMesh.Primitives">
            <summary>
            An array of primitives, each defining geometry to be rendered with a material.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFMesh.Weights">
            <summary>
            Array of weights to be applied to the Morph Targets.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFNode">
            <summary>
            A node in the node hierarchy.  When the node contains `skin`, all `mesh.primitives` must contain `JOINTS_0` and `WEIGHTS_0` attributes.  A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFNode.TFKHR_materials_common">
            <summary>
            KHR_materials_common node extension
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.TFKHR_materials_common.Light">
            <summary>
            The id of the light referenced by this node.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.Camera">
            <summary>
            The index of the camera referenced by this node.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.Children">
            <summary>
            The indices of this node's children.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.Matrix">
            <summary>
            A floating-point 4x4 transformation matrix stored in column-major order.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.Mesh">
            <summary>
            The index of the mesh in this node.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.Rotation">
            <summary>
            The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.Scale">
            <summary>
            The node's non-uniform scale.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.Skin">
            <summary>
            The index of the skin referenced by this node.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.Translation">
            <summary>
            The node's translation.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFNode.Weights">
            <summary>
            The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFSampler">
            <summary>
            Texture sampler properties for filtering and wrapping modes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFSampler.MagFilter">
            <summary>
            Magnification filter.  Valid values correspond to WebGL enums: `9728` (NEAREST) and `9729` (LINEAR).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFSampler.MinFilter">
            <summary>
            Minification filter.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFSampler.WrapS">
            <summary>
            s wrapping mode.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFSampler.WrapT">
            <summary>
            t wrapping mode.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFScene">
            <summary>
            The root nodes of a scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFScene.Nodes">
            <summary>
            The indices of each root node.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFShader">
            <summary>
            A vertex or fragment shader.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFShader.TFKHR_binary_glTF">
            <summary>
            KHR_binary_glTF shader extension
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFShader.TFKHR_binary_glTF.BufferView">
            <summary>
            The id (JSON property name) of the buffer-view that references the shader source. Use this instead of the shader's uri property.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFShader.BufferView">
            <summary>
            The index of the bufferView that contains the shader source. Use this instead of the shader's uri property.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFShader.Type">
            <summary>
            The shader stage.  All valid values correspond to WebGL enums.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFShader.Uri">
            <summary>
            The uri of the GLSL source.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFSkin">
            <summary>
            Joints and matrices defining a skin.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFSkin.InverseBindMatrices">
            <summary>
            The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFSkin.Joints">
            <summary>
            Indices of skeleton nodes, used as joints in this skin.  The array length must be the same as the `count` property of the `inverseBindMatrices` accessor (when defined).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFSkin.Skeleton">
            <summary>
            The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFTexture">
            <summary>
            A texture and its sampler.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFTexture.Sampler">
            <summary>
            The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFTexture.Source">
            <summary>
            The index of the image used by this texture.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTF.v2.TFTextureInfo">
            <summary>
            Reference to a texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFTextureInfo.Index">
            <summary>
            The index of the texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTF.v2.TFTextureInfo.TexCoord">
            <summary>
            This integer value is used to construct a string in the format TEXCOORD_&lt;set index&gt; which is a reference to a key in mesh.primitives.attributes (e.g. A value of 0 corresponds to TEXCOORD_0).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Models.BaseNodeElement.GetName">
            <summary>
            Read name from its property table 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.SiemensJT.Models.IJTObject">
            <summary>
            Implement this so the class can be parsed from binary reader
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.AbstractCDP.PredictValue(System.Int32[],System.Int32,Aspose.ThreeD.Formats.SiemensJT.PredictorType)">
            <summary>
            Calculates the predictzion value.
            </summary>
            <param name="values"></param>
            <param name="index"></param>
            <param name="predictorType"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.ArithmeticDecoder.Decode(Aspose.ThreeD.Formats.SiemensJT.Codec.DecodeContext)">
            <summary>
            Decodes the given bytes by the arithmetic algorithm.
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="F:Aspose.ThreeD.Formats.SiemensJT.Codec.AccumulatedProbabilityCounts._int32ProbabilityContexts">
            <summary>Probability contexts</summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.SiemensJT.Codec.AccumulatedProbabilityCounts._symbolsCounts">
            <summary> Symbols counts </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.SiemensJT.Codec.AccumulatedProbabilityCounts._entryByAccumCountPerContext">
            <summary> Accumulated occurence counts </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.AccumulatedProbabilityCounts.GetEntryAndSymbolRangeByRescaledCode(System.Int32,System.UInt32,System.UInt32[])">
            <summary>Returns the entry and symbol range</summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.AccumulatedProbabilityCounts.GetTotalSymbolCount(System.Int32)">
            <summary>
            Returns the total symbol count
            </summary>
            <param name="contextIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.DecodeContext.GetNextCodeText">
            <summary>
             Returns the next code text and the number of read bits.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Formats.SiemensJT.Codec.DecodeContext.CodeTextLengthInBits">
            <summary>
             Returns the total bit count of the code text.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.BitlengthDecoder.Decode(Aspose.ThreeD.Formats.SiemensJT.BitStream)">
            <summary>
            Decodes the given bytes by the bitlength algorithm.
            </summary>
            <param name="encodedBits"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.BitlengthDecoder.Decode2(Aspose.ThreeD.Formats.SiemensJT.BitStream,System.Int32,System.Int32)">
            <summary>
             Decodes the given bytes by the bitlength algorithm.
            </summary>
            <param name="encodedBits"></param>
            <param name="expectedValues"></param>
            <param name="totalNumberOfBits"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.BitlengthDecoder.GetBitFieldWidth(System.Int32)">
            <summary>
            Returns the bit field width, which has to be used.
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.SiemensJT.Codec.DeeringCodec">
            <summary>
            Deering codec for decoding normals, algorithms is defined in JT File Format Reference 8.2.5 Deering Normal CODEC
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.SiemensJT.Codec.DualVFMesh">
            <summary>
            Reference code is in "Version 9.5 Rev-C Page 337"
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.Int32CDP.DecodeBytes(Aspose.ThreeD.Formats.SiemensJT.JtReader)">
            <summary>
             Decodes the following compressed bytes.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCoderDriver">
            <summary>
            Serves as a coordinating driver for mesh coding and decoding
            Implementation can be found in Version 9.5, Rev-C Page 342
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCoderDriver._faceCntxt(System.Int32,Aspose.ThreeD.Formats.SiemensJT.Codec.DualVFMesh)">
            <summary>
            Computes a "compression context" from 0 to 7 inclusive for
            faces on vertex iVtx. The context is based on the vertex's
            valence, and the total _known_ degree of already-coded
            faces on the vertex at the time of the call.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec">
             <summary>
             This class serves as the abstract base class from which two concrete classes
             are derived to implement the core operations for a polygonal
             mesh coder or decoder. An instance of this object is used by the
             MeshCoderDriver to encode and decode polygonal meshes.
            
             This class makes extensive use of DualVFMesh objects as the primary source and
             destination mesh topology storage data structures. This mediating data
             structure is necessary because the mesh coding scheme is deeply cooperative
             with and dependent upon such a vertex-facet data structure. Please refer to
             DualVFMesh for more information.
             Version 9.5 Rev-C Page 346
             </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.Run">
            <summary>
            Runs the mesh encoder/decoder machine
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.RunComponent">
            <summary>
            Decodes one "connected component" (contiguous group of polygons) into
            _pDstVFM. Because the polygonal model may be formed of multiple
            disconnected mesh components, it may be necessary for run() to call this
            method multiple times. This method returns obFoundComponent = True
            if it actually encoded a new mesh component, and obFoundComponent = False
            if it did not.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.InitNewComponent">
            <summary>
            Locates an unencoded vertex and begins the encoding
            process for the newly-found mesh component.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.CompleteF(System.Int32)">
            <summary>
            Completes the VFMesh face face on _pDstVFM by calling activateV() and
            completeV() for each as-yet inactive incident vertexes in the face's
            degree ring.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.ActivateF(System.Int32,System.Int32)">
            <summary>
            "Activates" the VFMesh face, on _pDstVFM, at face face vertex slot iVSlot
            by calling ioFace() to obtain a new vertex number and hooking it up to the
            topological structure. If the face is a SPLIT face, then call
            ioSplitFace() and ioSplitPos() to get the information necessary to connect
            to an already-active face. Note that we use the term "activate" here to
            mean "read" for mesh decoding.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.ActivateV(System.Int32,System.Int32)">
            <summary>
            "Activates" the VFMesh vertex, on _pDstVFM, at face face vertex slot iVSlot
            by calling ioFace() to obtain a new face number and hooking it up to the
            topological structure. Note that we use the term "activate" here to
            mean "read" for mesh decoding.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.CompleteV(System.Int32,System.Int32)">
            <summary>
            Completes the vertex vertex on _pDstVFM by activating all inactive faces
            incident upon it. As an optimization, the user must also pass in iVSlot
            which is the vertex slot on face 0 of vertex where vertex is located. This
            method begins its examination of vertex's faces at face 0 by working its
            way around the vertex in both CCW and CW directions, checking to see if there
            are any faces that can be hooked into vertex without calling activateF().
            This can happen when a face is completed by a nearby vertex before coming
            here. The situation can be detected by traversing the topology of the
            _pDstVFM over to the neighboring vertex and checking if it already has a
            face number for the corresponding face entry on vertex. If so, then
            vertex and the already completed face are connected together, and the
            next face around vertex is examined. When the process can go no further,
            this method calls _activateF() on the remaining unresolved span of faces
            around the vertex.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.AddVtxToFace(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method connects vertex vertex into the topology of
            _pDstVFM at and around face. First, it connects vertex
            to face's degree ring at position iVSlot. Next, it
            will connect vertex into the faces at the other ends of
            the shared edges between vertex and the next vertices CS and
            CCW about face if necessary.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.NextActiveFace">
            <summary>
            Returns a face from the active queue to be completed. This needn't be the
            one at the end of the queue, because the choice of the next active face
            can affect how many SPLIT symbols are produced. This method employs a
            fairly simple scheme of searching the most recent 16 active faces for the
            first one with the smallest number of incomplete slots in its degree ring.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.RemoveActiveFace(System.Int32)">
            <summary>
            Removes face from the active face queue.
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.MeshCodec.ActiveFaceOffset(System.Int32)">
            <summary>
            Searches the active face queue for face and returns
            its index position from the _end_ of the queue. This is
            needed by the ioFace() method when encoding a SPLIT
            symbol.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.SiemensJT.Codec.VFMeshDecoder">
            <summary>
            Implementation is translated from official implementation in "JT File Format Reference Version 9.5 Rev-C Page 351"
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.VFMeshDecoder.ioVtxInit">
            <summary>
            Begins decoding a new connected mesh component by calling
            ioVtx() to read the next vertex from the symbol stream.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.VFMeshDecoder.ioVtx(System.Int32,System.Int32)">
            <summary>
            Read a vertex valence symbol, vertex group number, and vertex
            flags from the input symbols stream. Create a new vertex
            on dst with this data, and return the new vertex number.
            It is this method's responsibility to detect the end of
            the input symbol stream by returning -1 when that happens.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.VFMeshDecoder.ioFace(System.Int32,System.Int32)">
            <summary>
            Read a face degree symbol, and attribute mask bit
            vector, create a new DualVFMesh face, initialize the
            face attribute record numbers from a running counter,
            and return the new face number. If the degree symbol
            read from the input symbol stream is 0, signify this by
            returning -1.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.VFMeshDecoder.ioSplitFace(System.Int32,System.Int32)">
            <summary>
            Consumes a split offset symbol from the SPLIT offset
            symbol stream, and determines the face number referenced
            by the offset. Returns the referenced face number.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.Codec.VFMeshDecoder.ioSplitPos(System.Int32,System.Int32)">
            <summary>
            Consumes a split position symbol from the associated symbol
            stream, and returns the vertex slot number on the current
            split face at which the topological split/merge occurred.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.SiemensJT.BitStream.Position">
            <summary>
            Position in bits
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.SiemensJT.BitStream.Size">
            <summary>
            Size in bits
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.BitStream.ReadUInt(System.Int32)">
            <summary>
            Reads the given number of bits as an unsignhed int value.
            </summary>
            <param name="numberOfBits"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.BitStream.ReadInt(System.Int32)">
            <summary>
             Reads the given number of bits as an nsignhed int value.
            </summary>
            <param name="numberOfBits"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.BitStream.GetMaskAsInt(System.Int32)">
            <summary>
            Returns an integral mask with a given number of 1's at least significant
            bit positions.
            </summary>
            <param name="numberOfBits"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.SiemensJT.JtReader.ReadRange">
            <summary>
            Read [min, max] range
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.AvevaRVM.AttributeReader.Intern">
            <summary>
            Convert the content in string builder to a string instance
            and reuse the converted result for lower memory usage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.AvevaRVM.RvmExporter.IsPrimitiveNode(Aspose.ThreeD.Node)">
            <summary>
            Check if the node is a primitive node, which only contains a primitive
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.AvevaRVM.RvmBinaryReader">
            <summary>
            Aveva RVM file binary reader
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.RvmFormat">
            <summary>
            The RVM Format
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.RvmFormat.LoadAttributes(Aspose.ThreeD.Scene,System.String,System.String)">
            <summary>
            Load the attributes from specified file name
            </summary>
            <param name="scene">The scene where the attributes will be applied to</param>
            <param name="fileName">The file's name that contains the attributes</param>
            <param name="prefix">The prefix of the attributes that used to avoid conflict of names, default value is "rvm:"</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.RvmFormat.LoadAttributes(Aspose.ThreeD.Scene,System.IO.Stream,System.String)">
            <summary>
            Load the attributes from specified stream
            </summary>
            <param name="scene">The scene where the attributes will be applied to</param>
            <param name="stream">The stream that contains the attributes</param>
            <param name="prefix">The prefix of the attributes that used to avoid conflict of names, default value is "rvm:"</param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Compression.TopologySplitEventData">
            <summary>
            Struct used for storing data about a source face that connects to an
            already traversed face that was either the initial face or a face encoded
            with either toplogy S (split) symbol. Such connection can be only caused by
            topology changes on the traversed surface (if its genus != 0, i.e. when the
            surface has topological handles or holes).
            For each occurence of such event we always encode the split symbol id, source
            symbol id and source edge id (left, or right). There will be always exectly
            two occurences of this event for every topological handle on the traversed
            mesh and one occurence for a hole.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Compression.HoleEventData">
            <summary>
            Hole event is used to store info about the first symbol that reached a
            vertex of so far unvisited hole. This can happen only on either the initial
            face or during a regular traversal when TOPOLOGYS is encountered.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Compression.MeshPredictionScheme">
            <summary>
            Base class for all mesh prediction schemes that use the mesh connectivity
            data. |MeshDataT| can be any class that provides the same interface as the
            PredictionSchemeMeshData class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Compression.MeshPredictionSchemeParallelogram">
            <summary>
            Parallelogram prediction predicts an attribute value V from three vertices
            on the opposite face to the predicted vertex. The values on the three
            vertices are used to construct a parallelogram V' = O - A - B, where O is the
            value on the oppoiste vertex, and A, B are values on the shared vertices:
                V
               / \
              /   \
             /     \
            A-------B
             \     /
              \   /
               \ /
                O
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Compression.MeshPredictionSchemeTexCoords.orientations">
            <summary>
            Encoded / decoded array of UV flips.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeDifference">
            <summary>
            Basic prediction scheme based on computing backward differences between
            stored attribute values (also known as delta-coding). Usually works better
            than the reference point prediction scheme, because nearby values are often
            encoded next to each other.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeNormalOctahedronCanonicalizedTransformBase">
            <summary>
            Base class containing shared functionality used by both encoding and decoding
            canonicalized normal octahedron prediction scheme transforms. See the
            encoding transform for more details about the method.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeNormalOctahedronTransform">
             <summary>
             The transform works on octahedral coordinates for normals. The square is
             subdivided into four inner triangles (diamond) and four outer triangles. The
             inner trianlges are associated with the upper part of the octahedron and the
             outer triangles are associated with the lower part.
             Given a preditiction value P and the actual value Q that should be encoded,
             this transform first checks if P is outside the diamond. If so, the outer
             triangles are flipped towards the inside and vice versa. The actual
             correction value is then based on the mapped P and Q values. This tends to
             result in shorter correction vectors.
             This is possible since the P value is also known by the decoder, see also
             ComputeCorrection and ComputeOriginalValue functions.
             Note that the tile is not periodic, which implies that the outer edges can
             not be identified, which requires us to use an odd number of values on each
             axis.
             DataTypeT is expected to be some integral type.
            
             This relates
             * IDF# 44535
             * Patent Application: GP-200957-00-US
             </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.Compression.PredictionScheme.Attribute">
            <summary>
            Returns the encoded attribute.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.Compression.PredictionScheme.NumParentAttributes">
            <summary>
            Returns the number of parent attributes that are needed for the prediction.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Compression.MeshPredictionSchemeData.vertexToDataMap">
            <summary>
            Mapping between vertices and their encoding order. I.e. when an attribute
            entry on a given vertex was encoded.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Compression.MeshPredictionSchemeData.dataToCornerMap">
            <summary>
            Array that stores which corner was processed when a given attribute entry
            was encoded or decoded.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeTransform">
            <summary>
            PredictionSchemeTransform is used to transform predicted values into
            correction values and vice versa.
            TDataType is the data type of predicted valuesPredictionSchemeTransform.
            CorrTypeT is the data type used for storing corrected values. It allows
            transforms to store corrections into a different type or format compared to
            the predicted data.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeTransform.InitializeEncoding(Aspose.ThreeD.Utilities.IntArray,System.Int32)">
            <summary>
            Performs any custom initialization of the trasnform for the encoder.
            |size| = total number of values in |origData| (i.e., number of entries *
            number of components).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeTransform.ComputeCorrection(Aspose.ThreeD.Utilities.IntArray,System.Int32,Aspose.ThreeD.Utilities.IntArray,System.Int32,Aspose.ThreeD.Utilities.IntArray,System.Int32,System.Int32)">
            <summary>
            Computes the corrections based on the input original values and the
            predicted values. The correction is always computed for all components
            of the input element. |valId| is the id of the input value
            (i.e., elementId * numComponents). The default implementation is equal to
            std::minus.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeTransform.ComputeOriginalValue(Aspose.ThreeD.Utilities.IntArray,System.Int32,Aspose.ThreeD.Utilities.IntArray,System.Int32,Aspose.ThreeD.Utilities.IntArray,System.Int32)">
            <summary>
            Computes the original value from the input predicted value and the decoded
            corrections. The default implementation is equal to std:plus.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeTransform.EncodeTransformData(Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer)">
            <summary>
            Encode any transform specific data.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeTransform.DecodeTransformData(Aspose.ThreeD.Formats.Draco.Decoder.DecoderBuffer)">
            <summary>
            Decodes any transform specific data. Called before Initialize() method.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeTransform.AreCorrectionsPositive">
            <summary>
            Should return true if all corrected values are guaranteed to be positive.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeWrapTransform">
            <summary>
            PredictionSchemeWrapTransform uses the min and max bounds of the original
            data to wrap stored correction values around these bounds centered at 0,
            i.e., when the range of the original values O is between &lt;MIN, MAX&gt; and
            N = MAX-MIN, we can then store any correction X = O - P, as:
                   X + N,   if X &lt; -N / 2
                   X - N,   if X &gt; N / 2
                   X        otherwise
            To unwrap this value, the decoder then simply checks whether the final
            corrected value F = P + X is out of the bounds of the input values.
            All out of bounds values are unwrapped using
                   F + N,   if F &lt; MIN
                   F - N,   if F &gt; MAX
            This wrapping can reduce the number of unique values, which translates to a
            better entropy of the stored values and better compression rates.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeWrapTransform.ComputeCorrection(Aspose.ThreeD.Utilities.IntArray,System.Int32,Aspose.ThreeD.Utilities.IntArray,System.Int32,Aspose.ThreeD.Utilities.IntArray,System.Int32,System.Int32)">
            <summary>
            Computes the corrections based on the input original value and the
            predicted value. Out of bound correction values are wrapped around the max
            range of input values.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeWrapTransform.ComputeOriginalValue(Aspose.ThreeD.Utilities.IntArray,System.Int32,Aspose.ThreeD.Utilities.IntArray,System.Int32,Aspose.ThreeD.Utilities.IntArray,System.Int32)">
            <summary>
            Computes the original value from the input predicted value and the decoded
            corrections. Values out of the bounds of the input values are unwrapped.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.IBitDecoder.StartDecoding(Aspose.ThreeD.Formats.Draco.Decoder.DecoderBuffer)">
            <summary>
            Sets |sourceBuffer| as the buffer to decode bits from.
            Returns false when the data is invalid.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.Decoding.DecodeVarint(System.UInt32@,Aspose.ThreeD.Formats.Draco.Decoder.DecoderBuffer)">
            <summary>
            Decodes a specified integer as varint. Note that the IntTypeT must be the
            same as the one used in the corresponding EncodeVarint() call.
            </summary>
            <param name="out_val"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Decoder.Dequantizer">
            <summary>
            Class for dequantizing values that were previously quantized using the
            Quantizer class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.Dequantizer.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes the dequantizer. Both parameters must correspond to the values
            provided to the initializer of the Quantizer class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.MeshSequentialDecoder.DecodeAndDecompressIndices(System.Int32)">
            <summary>
            Decodes face indices that were compressed with an entropy code.
            Returns false on error.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Decoder.RAnsDecoder">
            <summary>
            Class for performing rANS decoding using a desired number of precision bits.
            The number of precision bits needs to be the same as with the RAnsEncoder
            that was used to encode the input data.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.RAnsDecoder.readInit(Aspose.ThreeD.Utilities.BytePointer,System.Int32)">
            <summary>
            Initializes the decoder from the input buffer. The |offset| specifies the
            number of bytes encoded by the encoder. A non zero return value is an
            error.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.RAnsDecoder.BuildLookupTable(System.UInt32[],System.Int32)">
            <summary>
            Construct a look up table with |ransPrecision| number of entries.
            Returns false if the table couldn't be built (because of wrong input data).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.SequentialIntegerAttributeDecoder.CreatePredictionSchemeForDecoder(Aspose.ThreeD.Formats.Draco.PredictionSchemeMethod,System.Int32,Aspose.ThreeD.Formats.Draco.Decoder.PointCloudDecoder,Aspose.ThreeD.Formats.Draco.Compression.PredictionSchemeTransform)">
            <summary>
            Creates a prediction scheme for a given decoder and given prediction method.
            The prediction schemes are automatically initialized with decoder specific
            data if needed.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.SequentialIntegerAttributeDecoder.Store8BitsValues(System.Int32)">
            <summary>
            Stores decoded values into the attribute with a data type AttributeTypeT.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.SequentialQuantizationAttributeDecoder.quantizationBits">
            <summary>
            Max number of quantization bits used to encode each component of the
            attribute.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerTraversalPredictiveDecoder">
            <summary>
            Decoder for traversal encoded with the
            MeshEdgeBreakerTraversalPredictiveEncoder. The decoder maintains valences
            of the decoded portion of the traversed mesh and it uses them to predict
            symbols that are about to be decoded.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.ITraversalDecoder.DecodeAttributeSeam(System.Int32)">
            <summary>
            Returns true if there is an attribute seam for the next processed pair
            of visited faces.
            |attribute| is used to mark the id of the non-position attribute (in range
            of &lt;0, numAttributes - 1&gt;).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.ITraversalDecoder.SetNumEncodedVertices(System.Int32)">
            <summary>
            Used to tell the decoder what is the number of expected decoded vertices.
            Ignored by default.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.ITraversalDecoder.SetNumAttributeData(System.Int32)">
            <summary>
            Set the number of non-position attribute data for which we need to decode
            the connectivity.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.ITraversalDecoder.Start(Aspose.ThreeD.Formats.Draco.Decoder.DecoderBuffer@)">
            <summary>
            Called before the traversal decoding is started.
            Returns a buffer decoder that points to data that was encoded after the
            traversal.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.ITraversalDecoder.DecodeSymbol">
            <summary>
            Returns the next edgebreaker symbol that was reached during the traversal.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.ITraversalDecoder.MergeVertices(System.Int32,System.Int32)">
            <summary>
            Called whenever |source| vertex is about to be merged into the |dest|
            vertex.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.ITraversalDecoder.NewActiveCornerReached(System.Int32)">
            <summary>
            Called whenever a new active corner is set in the decoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.ITraversalDecoder.DecodeStartFaceConfiguration">
            <summary>
            Returns the configuration of a new initial face.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl">
            <summary>
            Implementation of the edgebreaker decoder that decodes data encoded with the
            MeshEdgeBreakerEncoderImpl class. The implementation of the decoder is based
            on the algorithm presented in Isenburg et al'02 "Spirale Reversi: Reverse
            decoding of the Edgebreaker encoding". Note that the encoding is still based
            on the standard edgebreaker method as presented in "3D Compression
            Made Simple: Edgebreaker on a Corner-Table" by Rossignac at al.'01.
            http://www.cc.gatech.edu/~jarek/papers/CornerTableSMI.pdf. One difference is
            caused by the properties of the spirale reversi algorithm that decodes the
            symbols from the last one to the first one. To make the decoding more
            efficient, we encode all symbols in the reverse order, therefore the decoder
            can process them one by one.
            The main advantage of the spirale reversi method is that the partially
            decoded mesh has valid connectivity data at any time during the decoding
            process (valid with respect to the decoded portion of the mesh). The standard
            Edgebreaker decoder used two passes (forward decoding + zipping) which not
            only prevented us from having a valid connectivity but it was also slower.
            The main benefit of having the valid connectivity is that we can use the
            known connectivity to predict encoded symbols that can improve the
            compression rate.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.cornerTraversalStack">
            <summary>
            Stack used for storing corners that need to be traversed when decoding
            mesh vertices. New corner is added for each initial face and a split
            symbol, and one corner is removed when the end symbol is reached.
            Stored as member variable to prevent frequent memory reallocations when
            handling meshes with lots of disjoint components.  Originally, we used
            recursive functions to handle this behavior, but that can cause stack
            memory overflow when compressing huge meshes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.vertexTraversalLength">
            <summary>
            Array stores the number of visited visited for each mesh traversal.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.topologySplitData">
            <summary>
            List of decoded topology split events.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.holeEventData">
            <summary>
            List of decoded hole events.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.numProcessedHoleEvents">
            <summary>
            The number of processed hole events.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.initFaceConfigurations">
            <summary>
            Configuration of the initial face for each mesh component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.initCorners">
            <summary>
            Initial corner for each traversal.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.vertexIdMap">
            <summary>
            Mapping between vertex ids assigned during connectivity decoding and vertex
            ids that were used during encoding.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.lastSymbolId">
            <summary>
            Id of the last processed input symbol.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.lastVertId">
            <summary>
            Id of the last decoded vertex.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.lastFaceId">
            <summary>
            Id of the last decoded face.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.visitedFaces">
            <summary>
            Array for marking visited faces.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.visitedVerts">
            <summary>
            Array for marking visited vertices.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.isVertHole">
            <summary>
            Array for marking vertices on open boundaries.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.numNewVertices">
            <summary>
            The number of new vertices added by the encoder (because of non-manifold
            vertices on the input mesh).
            If there are no non-manifold edges/vertices on the input mesh, this should
            be 0.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.newToParentVertexMap">
            <summary>
            For every newly added vertex, this array stores it's mapping to the
            parent vertex id of the encoded mesh.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.numEncodedVertices">
            <summary>
            The number of vertices that were encoded (can be different from the number
            of vertices of the input mesh).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.processedCornerIds">
            <summary>
            Array for storing the encoded corner ids in the order their associated
            vertices were decoded.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.processedConnectivityCorners">
            <summary>
            Array storing corners in the order they were visited during the
            connectivity decoding (always storing the tip corner of each newly visited
            face).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.posDataDecoderId">
            <summary>
            Id of an attributes decoder that uses |pos_encoding_data_|.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.AttributeData">
            <summary>
            Data for non-position attributes used by the decoder.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.AttributeData.decoderId">
            <summary>
            Id of the attribute decoder that was used to decode this attribute data.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.AttributeData.isConnectivityUsed">
            <summary>
            Flag that can mark the connectivityData invalid. In such case the base
            corner table of the mesh should be used instead.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.AttributeData.attributeSeamCorners">
            <summary>
            Opposite corners to attribute seam edges.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.IsTopologySplit(System.Int32,Aspose.ThreeD.Formats.Draco.EdgeFaceName@,System.Int32@)">
            <summary>
            Returns true if the current symbol was part of a topolgy split event. This
            means that the current face was connected to the left edge of a face
            encoded with the TOPOLOGYS symbol. |outSymbolEdge| can be used to
            identify which edge of the source symbol was connected to the TOPOLOGYS
            symbol.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoderImpl.DecodeAttributeConnectivitiesOnFaceLegacy(System.Int32)">
            <summary>
            Decodes all non-position attribute connectivities on the currently
            processed face.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerTraversalDecoder.buffer">
            <summary>
            Buffer that contains the encoded data.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerTraversalDecoder.DecodeAttributeSeam(System.Int32)">
            <summary>
            Returns true if there is an attribute seam for the next processed pair
            of visited faces.
            |attribute| is used to mark the id of the non-position attribute (in range
            of &lt; 0, numAttributes - 1&gt;).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Decoder.SequentialAttributeDecoder">
            <summary>
            A base class for decoding attribute values encoded by the
            SequentialAttributeEncoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.SequentialAttributeDecoder.InitializeStandalone(Aspose.ThreeD.Formats.Draco.PointAttribute)">
            <summary>
            Intialization for a specific attribute. This can be used mostly for
            standalone decoding of an attribute without an PointCloudDecoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.SequentialAttributeDecoder.InitPredictionScheme(Aspose.ThreeD.Formats.Draco.Compression.PredictionScheme)">
            <summary>
            Should be used to initialize newly created prediction scheme.
            Returns false when the initialization failed (in which case the scheme
            cannot be used).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.SequentialAttributeDecoder.DecodeValues(System.Int32[],Aspose.ThreeD.Formats.Draco.Decoder.DecoderBuffer)">
            <summary>
            The actual implementation of the attribute decoding. Should be overriden
            for specialized decoders.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Decoder.AttributesDecoder">
            <summary>
            Base class for decoding one or more attributes that were encoded with a
            matching AttributesEncoder. This base class provides only the basic interface
            that is used by the PointCloudDecoder. The actual encoding must be
            implemented in derived classes using the DecodeAttributes() method.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.DecoderBuffer.Advance(System.Int32)">
            <summary>
            Discards #bytes from the input buffer.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.DecoderBuffer.DecodeLeastSignificantBits32(System.Int32,System.UInt32@)">
            <summary>
            Decodes up to 32 bits into outVal. Can be called only in between
            StartBitDecoding and EndBitDeoding. Otherwise returns false.
            </summary>
            <param name="nbits"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Decoder.MeshDecoder">
            <summary>
            Class that reconstructs a 3D mesh from input data that was encoded by
            MeshEncoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.MeshDecoder.Decode(Aspose.ThreeD.Formats.Draco.DracoHeader,Aspose.ThreeD.Formats.Draco.Decoder.DecoderBuffer,Aspose.ThreeD.Formats.Draco.DracoPointCloud)">
            <summary>
            The main entry point for mesh decoding.
            </summary>
            <param name="header"></param>
            <param name="inBuffer"></param>
            <param name="outMesh"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.MeshDecoder.GetCornerTable">
            <summary>
            Returns the base connectivity of the decoded mesh (or nullptr if it is not
            initialized).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.MeshDecoder.GetAttributeCornerTable(System.Int32)">
            <summary>
            Returns the attribute connectivity data or nullptr if it does not exist.
            </summary>
            <param name="attId"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Decoder.MeshDecoder.GetAttributeEncodingData(System.Int32)">
            <summary>
            Returns the decoding data for a given attribute or nullptr when the data
            does not exist.
            </summary>
            <param name="attId"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Decoder.MeshEdgeBreakerDecoder">
            <summary>
            Class for decoding data encoded by MeshEdgeBreakerEncoder.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.KdTreeAttributesEncoder">
            <summary>
            Encodes all attributes of a given PointCloud using one of the available
            Kd-tree compression methods.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder">
            <summary>
            Base class for encoding one or more attributes of a PointCloud (or other
            geometry). This base class provides only the basic interface that is used
            by the PointCloudEncoder. The actual encoding must be implemented in derived
            classes using the EncodeAttributes() method.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.pointAttributeIds">
            <summary>
            List of attribute ids that need to be encoded with this encoder.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.pointAttributeToLocalIdMap">
            <summary>
            Map between point attribute id and the local id (i.e., the inverse of the
            |pointAttributeIds|.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.#ctor(System.Int32)">
            <summary>
            Constructs an attribute encoder assosciated with a given point attribute.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.Initialize(Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder,Aspose.ThreeD.Formats.Draco.DracoPointCloud)">
            <summary>
            Called after all attribute encoders are created. It can be used to perform
            any custom initialization, including setting up attribute dependencies.
            Note: no data should be encoded in this function, because the decoder may
            process encoders in a different order from the decoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.EncodeAttributesEncoderData(Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer)">
            <summary>
            Encodes data needed by the target attribute decoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.GetUniqueId">
            <summary>
            Returns a unique identifier of the given encoder type, that is used during
            decoding to ruct the corresponding attribute decoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.EncodeAttributes(Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer)">
            <summary>
            Encode attribute data to the target buffer. Needs to be implmented by the
            derived classes.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.NumParentAttributes(System.Int32)">
            <summary>
            Returns the number of attributes that need to be encoded before the
            specified attribute is encoded.
            Note that the attribute is specified by its point attribute id.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.MarkParentAttribute(System.Int32)">
            <summary>
            Marks a given attribute as a parent of another attribute.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder.SetAttributeIds(System.Int32[])">
            <summary>
            Sets new attribute point ids (replacing the existing ones).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.BitEncoder.PutBits(System.UInt32,System.Int32)">
            <summary>
            Write |nbits| of |data| into the bit buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.Encoder.BitEncoder.Bits">
            <summary>
            Return number of bits encoded so far.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer">
            <summary>
            Class representing a buffer that can be used for either for byte-aligned
            encoding of arbitrary data structures or for encoding of varialble-length
            bit data.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer.bitEncoderReservedBytes">
            <summary>
            The number of bytes reserved for bit encoder.
            Values > 0 indicate we are in the bit encoding mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer.encodeBitSequenceSize">
            <summary>
            Flag used indicating that we need to store the length of the currently
            processed bit sequence.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer.StartBitEncoding(System.Int32,System.Boolean)">
            <summary>
            Start encoding a bit sequence. A maximum size of the sequence needs to
            be known upfront.
            If encodeSize is true, the size of encoded bit sequence is stored before
            the sequence. Decoder can then use this size to skip over the bit sequence
            if needed.
            Returns false on error.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer.EndBitEncoding">
            <summary>
            End the encoding of the bit sequence and return to the default byte-aligned
            encoding.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer.EncodeLeastSignificantBits32(System.Int32,System.UInt32)">
            <summary>
            Encode up to 32 bits into the buffer. Can be called only in between
            StartBitEncoding and EndBitEncoding. Otherwise returns false.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.Encoding.ComputeBitLengths(Aspose.ThreeD.Utilities.IntArray,System.Int32,Aspose.ThreeD.Utilities.IntArray@,System.Int32@)">
            <summary>
            Computes bit lengths of the input values. If numComponents > 1, the values
            are processed in "numComponents" sized chunks and the bit length is always
            computed for the largest value from the chunk.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.Encoder.IMeshEdgeBreakerEncoder.CornerTable">
            <summary>
            Returns corner table of the encoded mesh.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.ITraversalEncoder.NewCornerReached(System.Int32)">
            <summary>
            Called when a new corner is reached during the traversal. No-op for the
            default encoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.ITraversalEncoder.EncodeAttributeSeam(System.Int32,System.Boolean)">
            <summary>
            Called for every pair of connected and visited faces. |isSeam| specifies
            whether there is an attribute seam between the two faces.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.ITraversalEncoder.Start">
            <summary>
            Called before the traversal encoding is started.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.ITraversalEncoder.Done">
            <summary>
            Called when the traversal is finished.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.ITraversalEncoder.EncodeStartFaceConfiguration(System.Boolean)">
            <summary>
            Called when a traversal starts from a new initial face.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoder">
            <summary>
            Class implements the edge breaker geometry compression method as described
            in "3D Compression Made Simple: Edgebreaker on a Corner-Table" by Rossignac
            at al.'01. http://www.cc.gatech.edu/~jarek/papers/CornerTableSMI.pdf
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl">
            <summary>
            Class implementing the edgebreaker encoding as described in "3D Compression
            Made Simple: Edgebreaker on a Corner-Table" by Rossignac at al.'01.
            http://www.cc.gatech.edu/~jarek/papers/CornerTableSMI.pdf
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.encoder">
            <summary>
            The main encoder that own's this class.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.mesh">
            <summary>
            Mesh that's being encoded.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.cornerTable">
            <summary>
            Corner table stores the mesh face connectivity data.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.cornerTraversalStack">
            <summary>
            Stack used for storing corners that need to be traversed when encoding
            the connectivity. New corner is added for each initial face and a split
            symbol, and one corner is removed when the end symbol is reached.
            Stored as member variable to prevent frequent memory reallocations when
            handling meshes with lots of disjoint components. Originally, we used
            recursive functions to handle this behavior, but that can cause stack
            memory overflow when compressing huge meshes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.visitedFaces">
            <summary>
            Array for marking visited faces.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.posEncodingData">
            <summary>
            Attribute data for position encoding.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.processedConnectivityCorners">
            <summary>
            Array storing corners in the order they were visited during the
            connectivity encoding (always storing the tip corner of each newly visited
            face).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.visitedVertexIds">
            <summary>
            Array for storing visited vertex ids of all input vertices.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.vertexTraversalLength">
            <summary>
            For each traversal, this array stores the number of visited vertices.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.topologySplitEventData">
            <summary>
            Array for storing all topology split events encountered during the mesh
            traversal.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.faceToSplitSymbolMap">
            <summary>
            Map between faceId and symbolId. Contains entries only for faces that
            were encoded with TOPOLOGYS symbol.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.visitedHoles">
            <summary>
            Array for marking holes that has been reached during the traversal.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.vertexHoleId">
            <summary>
            Array for mapping vertices to hole ids. If a vertex is not on a hole, the
            stored value is -1.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.holeEventData">
            <summary>
            Array of hole events encountered during the traversal. There will be always
            exactly one hole event for each hole in the input mesh.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.lastEncodedSymbolId">
            <summary>
            Id of the last encoded symbol.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.numSplitSymbols">
            <summary>
            The number of encoded split symbols.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.AttributeData">
            <summary>
            Struct holding data used for encoding each non-position attribute.
            TODO(ostava): This should be probably renamed to something better.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.AttributeData.isConnectivityUsed">
            <summary>
            Flag that can mark the connectivityData invalid. In such case the base
            corner table of the mesh should be used instead.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.AttributeData.encodingData">
            <summary>
            Data about attribute encoding order.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.attributeEncoderToDataIdMap">
            <summary>
            Array storing mapping between attribute encoder id and attribute data id.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.InitAttributeData">
            <summary>
            Initializes data needed for encoding non-position attributes.
            Returns false on error.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.FindInitFaceConfiguration(System.Int32,System.Int32@)">
            <summary>
            Finds the configuration of the initial face that starts the traversal.
            Configurations are determined by location of holes around the init face
            and they are described in meshEdgebreakerShared.h.
            Returns true if the face configuration is interior and false if it is
            exterior.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.EncodeConnectivityFromCorner(System.Int32)">
            <summary>
            Encodes the connectivity between vertices.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.EncodeHole(System.Int32,System.Boolean)">
            <summary>
            Encodes all vertices of a hole starting at startCornerId.
            The vertex associated with the first corner is encoded only if
            |encodeFirstVertex| is true.
            Returns the number of encoded hole vertices.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.FindHoles">
            <summary>
            Finds and stores data about all holes in the input mesh.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.GetSplitSymbolIdOnFace(System.Int32)">
            <summary>
            For faces encoded with symbol TOPOLOGYS (split), this method returns
            the encoded symbol id or -1 if the face wasn't encoded by a split symbol.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.CheckAndStoreTopologySplitEvent(System.Int32,System.Int32,Aspose.ThreeD.Formats.Draco.EdgeFaceName,System.Int32)">
            <summary>
            Checks whether there is a topology split event on a neighboring face and
            stores the event data if necessary. For more info about topology split
            events, see description of TopologySplitEventData in
            meshEdgebreakerShared.h.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.EncodeAttributeConnectivitiesOnFace(System.Int32)">
            <summary>
            Encodes connectivity of all attributes on a newly traversed face.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerEncoderImpl.#ctor(Aspose.ThreeD.Formats.Draco.Encoder.ITraversalEncoder)">
             <summary>
             This function is used to to assign correct encoding order of attributes
             to unprocessed corners. The encoding order is equal to the order in which
             the attributes are going to be processed by the decoder and it is necessary
             for proper prediction of attribute values.
            public bool AssignPositionEncodingOrderToAllCorners();
             This function is used to generate encoding order for all non-position
             attributes.
             Returns false when one or more attributes failed to be processed.
            public bool GenerateEncodingOrderForAttributes();
             </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder">
            <summary>
            Default implementation of the edgebreaker traversal encoder. Face
            configurations are stored directly into the output buffer and the symbols
            are first collected and then encoded in the reverse order to make the
            decoding faster.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.edgeBreakerTopologyBitPatternLength">
            <summary>
            Bit-length of symbols in the EdgeBreakerTopologyBitPattern stored as a
            look up table for faster indexing.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.start_face_encoder_">
            <summary>
            Buffers for storing encoded data.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.symbols">
            <summary>
            Symbols collected during the traversal.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.attributeConnectivityEncoders">
            <summary>
            Arithmetic encoder for encoding attribute seams.
            One context for each non-position attribute.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.Start">
            <summary>
            Called before the traversal encoding is started.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.EncodeStartFaceConfiguration(System.Boolean)">
            <summary>
            Called when a traversal starts from a new initial face.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.NewCornerReached(System.Int32)">
            <summary>
            Called when a new corner is reached during the traversal. No-op for the
            default encoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.EncodeSymbol(Aspose.ThreeD.Formats.Draco.EdgeBreakerTopologyBitPattern)">
            <summary>
            Called whenever a new symbol is reached during the edgebreaker traversal.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.EncodeAttributeSeam(System.Int32,System.Boolean)">
            <summary>
            Called for every pair of connected and visited faces. |isSeam| specifies
            whether there is an attribute seam between the two faces.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.Done">
            <summary>
            Called when the traversal is finished.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalEncoder.NumEncodedSymbols">
            <summary>
            Returns the number of encoded symbols.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalPredictiveEncoder">
            <summary>
            Encoder that tries to predict the edgebreaker traversal symbols based on the
            vertex valences of the unencoded portion of the mesh. The current prediction
            scheme assumes that each vertex has valence 6 which can be used to predict
            the symbol preceeding the one that is currently encoded. Predictions are
            encoded using an arithmetic coding which can lead to less than 1 bit per
            triangle encoding for highly regular meshes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalPredictiveEncoder.prevSymbol">
            <summary>
            Previously encoded symbol.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalPredictiveEncoder.numSplitSymbols">
            <summary>
            The total number of encoded split symbols.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.MeshEdgeBreakerTraversalPredictiveEncoder.numSymbols">
            <summary>
            Explicitly count the number of encoded symbols.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.MeshEncoder">
            <summary>
            Abstract base class for all mesh encoders. It provides some basic
            funcionality that's shared between different encoders.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.Encoder.MeshEncoder.CornerTable">
            <summary>
            Returns the base connectivity of the encoded mesh (or nullptr if it is not
            initialized).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEncoder.GetAttributeCornerTable(System.Int32)">
            <summary>
            Returns the attribute connectivity data or nullptr if it does not exist.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEncoder.GetAttributeEncodingData(System.Int32)">
            <summary>
            Returns the encoding data for a given attribute or nullptr when the data
            does not exist.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.MeshEncoder.EncodeConnectivity">
            <summary>
            Needs to be implemented by the derived classes.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.MeshSequentialEncoder">
            <summary>
            Class that encodes mesh data using a simple binary representation of mesh's
            connectivity and geometry.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder">
            <summary>
            Abstract base class for all point cloud and mesh encoders. It provides a
            basic funcionality that's shared between different encoders.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.attributeToEncoderMap">
            <summary>
            Map between attribute id and encoder id.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.attributesEncoderIdsOrder">
            <summary>
            Encoding order of individual attribute encoders (i.e., the order in which
            they are processed during encoding that may be different from the order
            in which they were created because of attribute dependencies.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.buffer">
            <summary>
            This buffer holds the final encoded data.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.Encode(Aspose.ThreeD.Formats.DracoSaveOptions,Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer)">
            <summary>
            The main entry point that encodes provided point cloud.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.GetEncodingMethod">
            <summary>
            Returns the unique identifier of the encoding method (such as Edgebreaker
            for mesh compression).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.AddAttributesEncoder(Aspose.ThreeD.Formats.Draco.Encoder.AttributesEncoder)">
            <summary>
            Adds a new attribute encoder, returning its id.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.MarkParentAttribute(System.Int32)">
            <summary>
            Marks one attribute as a parent of another attribute. Must be called after
            all attribute encoders are created (usually in the
            AttributeEncoder::Initialize() method).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.InitializeEncoder">
            <summary>
            Can be implemented by derived classes to perform any custom initialization
            of the encoder. Called in the Encode() method.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.EncodeEncoderData">
            <summary>
            Should be used to encode any encoder-specific data.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.EncodeGeometryData">
            <summary>
            Encodes any global geometry data (such as the number of points).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.EncodePointAttributes">
            <summary>
            encode all attribute values. The attribute encoders are sorted to resolve
            any attribute dependencies and all the encoded data is stored into the
            |buffer|.
            Returns false if the encoding failed.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.GenerateAttributesEncoders">
            <summary>
            Generate attribute encoders that are going to be used for encoding
            point attribute data. Calls GenerateAttributesEncoder() for every attribute
            of the encoded PointCloud.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.GenerateAttributesEncoder(System.Int32)">
            <summary>
            Creates attribute encoder for a specific point attribute. This function
            needs to be implemented by the derived classes. The derived classes need
            to either 1. Create a new attribute encoder and add it using the
            AddAttributeEncoder method, or 2. add the attribute to an existing
            attribute encoder (using AttributesEncoder::AddAttributeId() method).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.EncodeAttributesEncoderIdentifier(System.Int32)">
            <summary>
            Encodes any data that is necessary to recreate a given attribute encoder.
            Note: this is called in order in which the attribute encoders are going to
            be encoded.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.EncodeAllAttributes">
            <summary>
            Encodes all the attribute data using the created attribute encoders.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder.RearrangeAttributesEncoders">
            <summary>
            Rearranges attribute encoders and their attributes to reflect the
            underlying attribute dependencies. This ensures that the attributes are
            encoded in the correct order (parent attributes before their children).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.Quantizer">
            <summary>
            Class for quantizing single precision floating point values. The values must
            be centered around zero and be within interval (-range, +range), where the
            range is specified in the Init() method.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.RAnsBitEncoder">
            <summary>
            Class for encoding a sequence of bits using rANS. The probability table used
            to encode the bits is based off the total counts of bits.
            TODO(fgalligan): Investigate using an adaptive table for more compression.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.RAnsBitEncoder.StartEncoding">
            <summary>
            Must be called before any Encode* function is called.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.RAnsBitEncoder.EncodeBit(System.Boolean)">
            <summary>
            Encode one bit. If |bit| is true encode a 1, otherwise encode a 0.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.RAnsBitEncoder.EncodeLeastSignificantBits32(System.Int32,System.UInt32)">
            <summary>
            Encode |nibts| of |value|, starting from the least significant bit.
            |nbits| must be &gt; 0 and &lt;= 32.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.RAnsBitEncoder.EndEncoding(Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer)">
            <summary>
            Ends the bit encoding and stores the result into the targetBuffer.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.RAnsBitEncoder.rabsDescWrite(Aspose.ThreeD.Formats.Draco.Encoder.RAnsBitEncoder.AnsCoder@,System.UInt32,System.Byte)">
            <summary>
            rABS with descending spread
            p or p0 takes the place of lS from the paper
            ansP8Precision is m
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.RAnsEncoder">
            <summary>
            Class for performing rANS encoding using a desired number of precision bits.
            The max number of precision bits is currently 19. The actual number of
            symbols in the input alphabet should be (much) smaller than that, otherwise
            the compression rate may suffer.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.RAnsEncoder.Write(Aspose.ThreeD.Formats.Draco.RAnsBitCodec.RansSym)">
            <summary>
            rANS with normalization
            sym->prob takes the place of lS from the paper
            ransPrecision is m
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.RAnsSymbolEncoder">
            <summary>
            A helper class for encoding symbols using the rANS algorithm (see ans.h).
            The class can be used to initialize and encode probability table needed by
            rANS, and to perform encoding of symbols into the provided EncoderBuffer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.RAnsSymbolEncoder.numSymbols">
            <summary>
            The number of symbols in the input alphabet.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.RAnsSymbolEncoder.numExpectedBits">
            <summary>
            Expected number of bits that is needed to encode the input.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.RAnsSymbolEncoder.bufferOffset">
            <summary>
            Initial offset of the encoder buffer before any ans data was encoded.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncoder">
            <summary>
            A base class for encoding attribute values of a single attribute using a
            given sequence of point ids. The default implementation encodes all attribute
            values directly to the buffer but derived classes can perform any custom
            encoding (such as quantization) by overriding the EncodeValues() method.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncoder.parentAttributes">
            <summary>
            List of attribute encoders that need to be encoded before this attribute.
            E.g. The parent attributes may be used to predict values used by this
            attribute encoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncoder.Initialize(Aspose.ThreeD.Formats.Draco.Encoder.PointCloudEncoder,System.Int32)">
            <summary>
            Method that can be used for custom initialization of an attribute encoder,
            such as creation of prediction schemes and initialization of attribute
            encoder dependencies.
            |encoder| is the parent PointCloudEncoder,
            |attributeId| is the id of the attribute that is being encoded by this
            encoder.
            This method is automatically called by the PointCloudEncoder after all
            attribute encoders are created and it should not be called explicitly from
            other places.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncoder.InitializeStandalone(Aspose.ThreeD.Formats.Draco.PointAttribute)">
            <summary>
            Intialization for a specific attribute. This can be used mostly for
            standalone encoding of an attribute without an PointCloudEncoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncoder.Encode(System.Int32[],Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer)">
            <summary>
            Encode all attribute values in the order of the provided points.
            The actual implementation of the encoding is done in the EncodeValues()
            method.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncoder.MarkParentAttribute">
            <summary>
            Called when this attribute encoder becomes a parent encoder of another
            encoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncoder.InitPredictionScheme(Aspose.ThreeD.Formats.Draco.Compression.PredictionScheme)">
            <summary>
            Should be used to initialize newly created prediction scheme.
            Returns false when the initialization failed (in which case the scheme
            cannot be used).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncoder.EncodeValues(System.Int32[],Aspose.ThreeD.Formats.Draco.Encoder.EncoderBuffer)">
            <summary>
            Encodes all attribute values in the specified order. Should be overriden
            for specialized  encoders.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncoder.PrepareLossyAttributeData">
            <summary>
            Method that can be used by lossy encoders to compute encoded lossy
            attribute data.
            If the return value is true, the caller can call either
            GetLossyAttributeData() or encodedLossyAttributeData() to get a new
            attribute that is filled with lossy version of the original data (i.e.,
            the same data that is going to be used by the decoder).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncodersController">
            <summary>
            A basic implementation of an attribute encoder that can be used to encode
            an arbitrary set of attributes. The encoder creates a sequential attribute
            encoder for each encoded attribute (see sequentialAttributeEncoder.h) and
            then it encodes all attribute values in an order defined by a point sequence
            generated in the GeneratePointSequence() method. The default implementation
            generates a linear sequence of all points, but derived classes can generate
            any custom sequence.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncodersController.CreateSequentialEncoders">
            <summary>
            Creates all sequential encoders (one for each attribute associated with the
            encoder).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialAttributeEncodersController.CreateSequentialEncoder(System.Int32)">
            <summary>
            Create a sequential encoder for a given attribute based on the attribute
            type
            and the provided encoder options.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.SequentialIntegerAttributeEncoder">
            <summary>
            Attribute encoder designed for lossless encoding of integer attributes. The
            attribute values can be pre-processed by a prediction scheme and compressed
            with a built-in entropy coder.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.Encoder.SequentialIntegerAttributeEncoder.predictionScheme">
            <summary>
            Optional prediction scheme can be used to modify the integer values in
            order to make them easier to compress.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialIntegerAttributeEncoder.CreateIntPredictionScheme(Aspose.ThreeD.Formats.Draco.PredictionSchemeMethod)">
            <summary>
            Returns a prediction scheme that should be used for encoding of the
            integer values.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.Encoder.SequentialIntegerAttributeEncoder.PrepareValues(System.Int32[],System.Int32)">
            <summary>
            Prepares the integer values that are going to be encoded.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.SequentialNormalAttributeEncoder">
            <summary>
            Class for encoding normal vectors using an octahedral encoding (see Cigolle
            et al.'14 “A Survey of Efficient Representations for Independent Unit
            Vectors”. Compared to the basic quantization encoder, this encoder results
            in a better compression rate under the same accuracy settings. Note that this
            encoder doesn't preserve the lengths of input vectors, therefore it will not
            work correctly when the input values are not normalized.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.Encoder.SequentialQuantizationAttributeEncoder">
            <summary>
            Attribute encoder that quantizes floating point attribute values. The
            quantized values can be optionally compressed using an entropy coding.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.CornerTableTraversalProcessor`1">
            <summary>
            Class providing the basic traversal funcionality needed by traversers (such
            as the EdgeBreakerTraverser, see edgebreakerTraverser.h). It is used to
            return the corner table that is used for the traversal, plus it provides a
            basic book-keeping of visited faces and vertices during the traversal.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.LinearSequencer">
            <summary>
            A simple sequencer that generates a linear sequence [0, numPoints - 1].
            I.e., the order of the points is preserved for the input data.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.MeshAttributeIndicesEncodingData">
            <summary>
            Data used for encoding and decoding of mesh attributes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.MeshAttributeIndicesEncodingData.encodedAttributeValueIndexToCornerMap">
            <summary>
            Array for storing the corner ids in the order their associated attribute
            entries were encoded/decoded. For every encoded attrbiute value entry we
            store exactly one corner. I.e., this is the mapping between an encoded
            attribute entry ids and corner ids. This map is needed for example by
            prediction schemes. Note that not all corners are included in this map,
            e.g., if multiple corners share the same attribute value, only one of these
            corners will be usually included.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.MeshAttributeIndicesEncodingData.vertexToEncodedAttributeValueIndexMap">
            <summary>
            Map for storing encoding order of attribute entries for each vertex.
            i.e. Mapping between vertices and their corresponding attribute entry ids
            that are going to be used by the decoder.
            -1 if an attribute entry hasn't been encoded/decoded yet.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.MeshAttributeIndicesEncodingData.numValues">
            <summary>
            Total number of encoded/decoded attribute entries.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.MeshTraversalSequencer`1.SetCornerOrder(Aspose.ThreeD.Utilities.IntList)">
            <summary>
            Function that can be used to set an order in which the mesh corners should
            be processed. This is an optional flag used usually only by the encoder
            to match the same corner order that is going to be used by the decoder.
            Note that |cornerOrder| should contain only one corner per face (it can
            have all corners but only the first encountered corner for each face is
            going to be used to start a traversal). If the corner order is not set, the
            corners are processed sequentially based on their ids.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.PointsSequencer">
            <summary>
            Class for generating a sequence of point ids that can be used to encode
            or decode attribute values in a specific order.
            See sequentialAttributeEncoders/decodersController.h for more details.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointsSequencer.GenerateSequence(System.Int32[]@)">
            <summary>
            Fills the |outPointIds| with the generated sequence of point ids.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointsSequencer.AddPointId(System.Int32)">
            <summary>
            Appends a point to the sequence.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointsSequencer.UpdatePointToAttributeIndexMapping(Aspose.ThreeD.Formats.Draco.PointAttribute)">
            <summary>
            Sets the correct mapping between point ids and value ids. I.e., the inverse
            of the |outPointIds|. In general, |outPointIds| does not contain
            sufficient information to compute the inverse map, because not all point
            ids are necessarily contained within the map.
            Must be implemented for sequencers that are used by attribute decoders.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointsSequencer.GenerateSequenceInternal">
            <summary>
            Method that needs to be implemented by the derived classes. The
            implementation is responsible for filling |outPointIds| with the valid
            sequence of point ids.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.RAnsBitCodec.ComputeRAnsUnclampedPrecision(System.Int32)">
            <summary>
            Computes the desired precision of the rANS method for the specified maximal
            symbol bit length of the input data.
            </summary>
            <param name="maxBitLength"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.RAnsBitCodec.ComputeRAnsPrecisionFromMaxSymbolBitLength(System.Int32)">
            <summary>
            Computes the desired precision clamped to guarantee a valid funcionality of
            our rANS library (which is between 12 to 20 bits).
            </summary>
            <param name="maxBitLength"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.RAnsBitDecoder">
            <summary>
            Class for decoding a sequence of bits that were encoded with RAnsBitEncoder.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.RAnsBitDecoder.StartDecoding(Aspose.ThreeD.Formats.Draco.Decoder.DecoderBuffer)">
            <summary>
            Sets |sourceBuffer| as the buffer to decode bits from.
            Returns false when the data is invalid.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.RAnsBitDecoder.DecodeNextBit">
            <summary>
            Decode one bit. Returns true if the bit is a 1, otherwsie false.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.RAnsBitDecoder.DecodeLeastSignificantBits32(System.Int32)">
            <summary>
            Decode the next |nbits| and return the sequence in |value|. |nbits| must be
            &gt; 0 and &lt;= 32.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.CornerTable">
             <summary>
             CornerTable is used to represent connectivity of triangular meshes.
             For every corner of all faces, the corner table stores the index of the
             opposite corner in the neighboring face (if it exists) as illustrated in the
             figure below (see corner |c| and it's opposite corner |o|).
            
                 *
                /c\
               /   \
              /n   p\
             *-------*
              \     /
               \   /
                \o/
                 *
            
             All corners are defined by unique CornerIndex and each triplet of corners
             that define a single face id always ordered consecutively as:
                 { 3 * FaceIndex, 3 * FaceIndex + 1, 3 * FaceIndex +2 }.
             This representation of corners allows CornerTable to easily retrieve Next and
             Previous corners on any face (see corners |n| and |p| in the figure above).
             Using the Next, Previous, and Opposite corners then enables traversal of any
             2-manifold surface.
             If the CornerTable is constructed from a non-manifold surface, the input
             non-manifold edges and vertices are automatically split.
             </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.SwingRight(System.Int32)">
            <summary>
                *-------*
               / \     / \
              /   \   /   \
             /   sl\c/sr   \
            *-------v-------*
            Returns the corner on the adjacent face on the right that maps to
            the same vertex as the given corner (sr in the above diagram).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.CornerTable.NumNewVertices">
            <summary>
            Returns the number of new vertices that were created as a result of
            spliting of non-manifold vertices of the input geometry.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.CornerTable.NumDegeneratedFaces">
            <summary>
            Returns the number of faces with duplicated vertex indices.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.CornerTable.NumIsolatedVertices">
            <summary>
            Returns the number of isolated vertices (vertices that have
            vertexCorners mapping set to kInvalidCornerIndex.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.SwingLeft(System.Int32)">
            <summary>
            Returns the corner on the left face that maps to the same vertex as the
            given corner (sl in the above diagram).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.LeftMostCorner(System.Int32)">
            <summary>
            Returns the left-most corner of a single vertex 1-ring. If a vertex is not
            on a boundary (in which case it has a full 1-ring), this function returns
            any of the corners mapped to the given vertex.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.IsOnBoundary(System.Int32)">
            <summary>
            Returns true if the specified vertex is on a boundary.
            </summary>
            <param name="vert"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.GetLeftCorner(System.Int32)">
             <summary>
             Get opposite corners on the left and right faces respecitively (see image
             below, where L and R are the left and right corners of a corner X.
            
             *-------*-------*
              \L    /X\    R/
               \   /   \   /
                \ /     \ /
                 *-------*
             </summary>
             <param name="cornerId"></param>
             <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.SetOppositeCorner(System.Int32,System.Int32)">
            <summary>
            Methods that modify an existing corner table.
            Sets the opposite corner mapping between two corners. Caller must ensure
            that the indices are valid.
            </summary>
            <param name="cornerId"></param>
            <param name="oppCornerId"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.MapCornerToVertex(System.Int32,System.Int32)">
            <summary>
            Updates mapping betweeh a corner and a vertex.
            </summary>
            <param name="cornerId"></param>
            <param name="vertId"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.SetLeftMostCorner(System.Int32,System.Int32)">
            <summary>
            Sets a new left most corner for a given vertex.
            </summary>
            <param name="vert"></param>
            <param name="corner"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.MakeVertexIsolated(System.Int32)">
            <summary>
            Makes a vertex isolated (not attached to any corner).
            </summary>
            <param name="vert"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.IsVertexIsolated(System.Int32)">
            <summary>
            Returns true if a vertex is not attached to any face.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.CornerTable.UpdateVertexToCornerMap(System.Int32)">
            <summary>
            Updates the vertex to corner map on a specified vertex. This should be
            called in cases where the mapping may be invalid (e.g. when the corner
            table was constructed manually).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.MeshAttributeElementType">
            <summary>
            List of different variants of mesh attributes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.MeshAttributeElementType.Vertex">
            <summary>
            All corners attached to a vertex share the same attribute value. A typical
            example are the vertex positions and often vertex colors.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.MeshAttributeElementType.Corner">
            <summary>
            The most general attribute where every corner of the mesh can have a
            different attribute value. Often used for texture coordinates or normals.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.MeshAttributeElementType.Face">
            <summary>
            All corners of a single face share the same value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.DracoMesh.attributeData">
            <summary>
            Mesh specific per-attribute data.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoUtils.CornerToPointId(System.Int32,Aspose.ThreeD.Formats.Draco.DracoMesh)">
            <summary>
            Returns the point id of |c| without using a corner table.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoUtils.CopyBits32(System.UInt32@,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Copies the |bnbits| from the src integer into the |dst| integer using the
            provided bit offsets |dst_offset| and |src_offset|.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoUtils.CountOnes32(System.UInt32)">
            <summary>
            Returns the number of '1' bits within the input 32 bit integer.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoUtils.MostSignificantBit(System.UInt32)">
            <summary>
            Returns the most location of the most significant bit in the input integer
            |n|.
            The funcionality is not defined for |n == 0|.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.AttributeType">
            <summary>
            Supported attribute types.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.AttributeType.Position">
            <summary>
            Named attributes start here. The difference between named and generic
            attributes is that for named attributes we know their purpose and we
            can apply some special methods when dealing with them (e.g. during
            encoding).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.AttributeType.Generic">
            <summary>
            A special id used to mark attributes that are not assigned to any known
            predefined use case. Such attributes are often used for a shader specific
            data.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.AttributeType.NamedAttributesCount">
            <summary>
            Total number of different attribute types.
            Always keep behind all named attributes.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.GeometryAttribute">
            <summary>
            The class provides access to a specific attribute which is stored in a
            DataBuffer, such as normals or coordinates. However, the GeometryAttribute
            class does not own the buffer and the buffer itself may store other data
            unrelated to this attribute (such as data for other attributes in which case
            we can have multiple GeometryAttributes accessing one buffer). Typically,
            all attributes for a point (or corner, face) are stored in one block, which
            is advantageous in terms of memory access. The length of the entire block is
            given by the byteStride, the position where the attribute starts is given by
            the byteOffset, the actual number of bytes that the attribute occupies is
            given by the dataType and the number of components.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.GeometryAttribute.CustomId">
            User defined 16-bit id that can be for example used to identify generic
            attributes. By default |customId| == 0.
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.MeshAttributeCornerTable.noInteriorSeams">
            <summary>
            If this is set to true, it means that there are no attribute seams between
            two faces. This can be used to speed up some algorithms.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.MeshAttributeCornerTable.vertexToLeftMostCornerMap">
            <summary>
            Map between vertices and their associated left most corners. A left most
            corner is a corner that is adjecent to a boundary or an attribute seam from
            right (i.e., SwingLeft from that corner will return an invalid corner). If
            no such corner exists for a given vertex, then any corner attached to the
            vertex can be used.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.MeshAttributeCornerTable.vertexToAttributeEntryIdMap">
            <summary>
            Map between vertex ids and attribute entry ids (i.e. the values stored in
            the attribute buffer). The attribute entry id can be retrieved using the
            VertexParent() method.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.MeshAttributeCornerTable.RecomputeVertices(Aspose.ThreeD.Formats.Draco.DracoMesh,Aspose.ThreeD.Formats.Draco.PointAttribute)">
            <summary>
            Recomputes vertices using the newly added seam edges (needs to be called
            whenever the seam edges are updated).
            |mesh| and |att| can be null, in which case mapping between vertices and
            attribute value ids is set to identity.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.MeshAttributeCornerTable.IsCornerOnSeam(System.Int32)">
            <summary>
            Returns true when a corner is attached to any attribute seam.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.MeshAttributeCornerTable.GetLeftCorner(System.Int32)">
            <summary>
            Similar to CornerTable::GetLeftCorner and CornerTable::GetRightCorner, but
            does not go over seam edges.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.MeshAttributeCornerTable.SwingRight(System.Int32)">
            <summary>
            Similar to CornerTable::SwingRight, but it does not go over seam edges.
            </summary>
            <param name="corner"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.MeshAttributeCornerTable.SwingLeft(System.Int32)">
            <summary>
            Similar to CornerTable.SwingLeft, but it does not go over seam edges.
            </summary>
            <param name="corner"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointAttribute.GetValue(System.Int32,System.Byte[])">
            <summary>
            Fills outData with the raw value of the requested attribute entry.
            outData must be at least byteStride long.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointAttribute.Reset(System.Int32)">
            <summary>
            Prepares the attribute storage for the specified number of entries.
            </summary>
            <param name="numAttributeValues"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointAttribute.Resize(System.Int32)">
            <summary>
            Sets the new number of unique attribute entries for the attribute.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.PointAttribute.IdentityMapping">
            <summary>
            Functions for setting the type of mapping between point indices and
            attribute entry ids.
            This function sets the mapping to implicit, where point indices are equal
            to attribute entry indices.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointAttribute.SetExplicitMapping(System.Int32)">
            <summary>
            This function sets the mapping to be explicitly using the indicesMap
            array that needs to be initialized by the caller.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointAttribute.SetPointMapEntry(System.Int32,System.Int32)">
            <summary>
            Set an explicit map entry for a specific point index.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.PointAttribute.SetAttributeValue(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copy raw bytes from buffer with given offset to the attribute's internal buffer at specified element index
            </summary>
            <param name="index"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.DracoPointCloud">
            <summary>
            DracoPointCloud is a collection of n-dimensional points that are described by a
            set of PointAttributes that can represent data such as positions or colors
            of individual points (see pointAttribute.h).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.DracoPointCloud.attributes">
            <summary>
            Attributes describing the point cloud.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.DracoPointCloud.namedAttributeIndex">
            <summary>
            Ids of named attributes of the given type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.DracoPointCloud.numPoints">
            <summary>
            The number of n-dimensional points. All point attribute values are stored
            in corresponding PointAttribute instances in the |attributes| array.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.NumNamedAttributes(Aspose.ThreeD.Formats.Draco.AttributeType)">
            <summary>
            Returns the number of named attributes of a given type.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.GetNamedAttributeId(Aspose.ThreeD.Formats.Draco.AttributeType)">
            <summary>
            Returns attribute id of the first named attribute with a given type or -1
            when the attribute is not used by the point cloud.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.GetNamedAttributeId(Aspose.ThreeD.Formats.Draco.AttributeType,System.Int32)">
            <summary>
            Returns the id of the i-th named attribute of a given type.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.GetNamedAttribute(Aspose.ThreeD.Formats.Draco.AttributeType,System.Int32)">
            <summary>
            Returns the i-th named attribute of a given type.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.GetNamedAttributeByCustomId(Aspose.ThreeD.Formats.Draco.AttributeType,System.UInt16)">
            <summary>
            Returns the named attribute of a given custom id.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.AddAttribute(Aspose.ThreeD.Formats.Draco.PointAttribute)">
            <summary>
            Adds a new attribute to the point cloud.
            Returns the attribute id.
            </summary>
            <param name="pa"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.AddAttribute(Aspose.ThreeD.Formats.Draco.GeometryAttribute,System.Boolean,System.Int32)">
            <summary>
            Creates and adds a new attribute to the point cloud. The attribute has
            properties derived from the provided GeometryAttribute |att|.
            If |identityMapping| is set to true, the attribute will use identity
            mapping between point indices and attribute value indices (i.e., each point
            has a unique attribute value).
            If |identityMapping| is false, the mapping between point indices and
            attribute value indices is set to explicit, and it needs to be initialized
            manually using the PointAttribute::SetPointMapEntry() method.
            |numAttributeValues| can be used to specify the number of attribute
            values that are going to be stored in the newly created attribute.
            Returns attribute id of the newly created attribute.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.DeduplicateAttributeValues">
            <summary>
            Deduplicates all attribute values (all attribute entries with the same
            value are merged into a single entry).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.DeduplicatePointIds">
            <summary>
            Removes duplicate point ids (two point ids are duplicate when all of their
            attributes are mapped to the same entry ids).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Draco.DracoPointCloud.NumPoints">
            <summary>
            Gets or sets the number of n-dimensional points stored within the point cloud.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Draco.DracoPointCloud.ApplyPointIdDeduplication(System.Int32[],Aspose.ThreeD.Utilities.IntList)">
            <summary>
            Applies id mapping of deduplicated points (called by DeduplicatePointIds).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.EdgeBreakerTopologyBitPattern">
             <summary>
             A variable length encoding for storing all possible topology configurations
             during traversal of mesh's surface. The configurations are based on visited
             state of neighboring triangles around a currently processed face corner.
             Note that about half of the encountered configurations is expected to be of
             type TOPOLOGYC. It's guaranteed that the encoding will use at most 2 bits
             per triangle for meshes with no holes and up to 6 bits per triangle for
             general meshes. In addition, the encoding will take up to 4 bits per triangle
             for each non-position attribute attached to the mesh.
            
                 *-------*          *-------*          *-------*
                / \     / \        / \     / \        / \     / \
               /   \   /   \      /   \   /   \      /   \   /   \
              /     \ /     \    /     \ /     \    /     \ /     \
             *-------v-------*  *-------v-------*  *-------v-------*
              \     /x\     /          /x\     /    \     /x\
               \   /   \   /          /   \   /      \   /   \
                \ /  C  \ /          /  L  \ /        \ /  R  \
                 *-------*          *-------*          *-------*
            
                 *       *
                / \     / \
               /   \   /   \
              /     \ /     \
             *-------v-------*          v
              \     /x\     /          /x\
               \   /   \   /          /   \
                \ /  S  \ /          /  E  \
                 *-------*          *-------*
            
             </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.EdgeFaceName">
            <summary>
            Types of edges used during mesh traversal relative to the tip vertex of a
            visited triangle.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.DracoEncodingMethod">
            <summary>
             List of encoding methods for point clouds.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.AttributeEncoderType">
            <summary>
             List of various attribute encoders supported by our framework. The entries
             are used as unique identifiers of the encoders and their values should not
             be changed!
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.SequentialAttributeEncoderType">
            <summary>
             List of various sequential attribute encoder/decoders that can be used in our
             pipeline. The values represent unique identifiers used by the decoder and
             they should not be changed.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.PredictionSchemeMethod">
            <summary>
             List of all prediction methods currently supported by our framework.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.PredictionSchemeMethod.None">
            <summary>
             Special value indicating that no prediction scheme was used.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.PredictionSchemeMethod.Undefined">
            <summary>
             Used when no specific prediction scheme is required.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Draco.PredictionSchemeTransformType">
            <summary>
             List of all prediction scheme transforms used by our framework.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.PredictionSchemeTransformType.Delta">
            <summary>
             Basic delta transform where the prediction is computed as difference the
             predicted and original value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.PredictionSchemeTransformType.Wrap">
            <summary>
             An improved delta transform where all computed delta values are wrapped
             around a fixed interval which lowers the entropy.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.PredictionSchemeTransformType.NormalOctahedron">
            <summary>
             Specialized transform for normal coordinates using inverted tiles.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.Draco.PredictionSchemeTransformType.NormalOctahedronCanonicalized">
            <summary>
             Specialized transform for normal coordinates using canonicalized inverted tiles.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Express.ExpressDetector">
            <summary>
            This format detector detects the file format from the EXPRESS source file.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.HTML5SaveOptions">
            <summary>
            Save options for HTML5
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.ShowGrid">
            <summary>
            Display a grid in the scene.
            Default value is true.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.ShowRulers">
            <summary>
            Display rulers of x/y/z axises in the scene to measure the model.
            Default value is false.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.ShowUI">
            <summary>
            Display a simple UI in the scene.
            Default value is true.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.OrientationBox">
            <summary>
            Display a orientation box.
            Default value is true.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.UpVector">
            <summary>
            Gets or sets the up vector, value can be "x"/"y"/"z", default value is "y"
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.FarPlane">
            <summary>
            Gets or sets the far plane of the camera, default value is 1000.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.NearPlane">
            <summary>
            Gets or sets the near plane of the camera, default value is 1
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.LookAt">
            <summary>
            Gets or sets the default look at position, default value is (0, 0, 0)
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.CameraPosition">
            <summary>
            Gets or sets the initial position of the camera, default value is (10, 10, 10)
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.HTML5SaveOptions.FieldOfView">
            <summary>
            Gets or sets the field of the view, default value is 45, measured in degree.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.HTML5SaveOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.HTML5SaveOptions"/> with all default settings.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STEP.Loop.Tessellate">
            <summary>
            Break the edge curves into edge loop represented by a line strip
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STEP.Loop.LineSegment(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Insert the line segment and convert it into line strip internally, swap the line's direction if necessary
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.AMFSaveOptions">
            <summary>
            Save options for AMF
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.AMFSaveOptions.#ctor">
            <summary>
             Constructor of <see cref="T:Aspose.ThreeD.Formats.AMFSaveOptions"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.AMFSaveOptions.EnableCompression">
            <summary>
            Whether to use compression to reduce the final file size, default value is true
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.ASE.AseImporter.EscapeBlock">
            <summary>
            Read until the } found
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.ASE.AseImporter.Attach(Aspose.ThreeD.Node,System.String)">
            <summary>
            Attach node to the parent node
            </summary>
            <param name="node"></param>
            <param name="parent"></param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.RvmLoadOptions">
            <summary>
            Load options for AVEVA Plant Design Management System's RVM file.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.GenerateMaterials">
            <summary>
            Generate materials with random colors for each objects in the scene if color table is not exported within the RVM file.
            Default value is true
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.CylinderRadialSegments">
            <summary>
            Gets or sets the number of cylinder's radial segments, default value is 16
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.DishLongitudeSegments">
            <summary>
            Gets or sets the number of dish's longitude segments, default value is 12
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.DishLatitudeSegments">
            <summary>
            Gets or sets the number of dish's latitude segments, default value is 8 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.TorusTubularSegments">
            <summary>
            Gets or sets the number of torus's tubular segments, default value is 20 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.RectangularTorusSegments">
            <summary>
            Gets or sets the number of rectangular torus's radial segments, default value is 20 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.CenterScene">
            <summary>
            Center the scene after it's loaded.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.AttributePrefix">
            <summary>
            Gets or sets the prefix of the attributes that were defined in external attribute files,
            The prefix are used to avoid name conflicts, default value is "rvm:"
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmLoadOptions.LookupAttributes">
            <summary>
            Gets or sets whether to load attributes from external attribute list file(.att/.attrib/.txt), default value is true.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.RvmLoadOptions.#ctor(Aspose.ThreeD.FileContentType)">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Formats.RvmLoadOptions"/> instance
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.RvmLoadOptions.#ctor">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Formats.RvmLoadOptions"/> instance
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.RvmSaveOptions">
            <summary>
            Save options for Aveva PDMS RVM file.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.FileNote">
            <summary>
            File note in the file header.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.Author">
            <summary>
            Author information, default value is '3d@aspose'
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.CreationTime">
            <summary>
            The timestamp that exported this file, default value is current time
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.AttributePrefix">
            <summary>
            Gets or sets the prefix of which attributes that will be exported, the exported property will contains no prefix, custom properties with different prefix will not be exported, default value is 'rvm:'.
            For example if a property is rvm:Refno=345, the exported attribute will be Refno = 345, the prefix is stripped.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.AttributeListFile">
            <summary>
            Gets or sets the file name of attribute list file, exporter will generate a name based on the .rvm file name when this property is undefined, default value is null.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.RvmSaveOptions.ExportAttributes">
            <summary>
            Gets or sets whether to export the attribute list to an external .att file, default value is false.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.RvmSaveOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.RvmSaveOptions"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.RvmSaveOptions.#ctor(Aspose.ThreeD.FileContentType)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.RvmSaveOptions"/>
            </summary>
            <param name="contentType">Text or binary RVM file?</param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.ColladaTransformStyle">
            <summary>
            The node's transform style of node
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.ColladaTransformStyle.Components">
             <summary>
            Export the node's transform as rotate/scale/translate
             </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.ColladaTransformStyle.Matrix">
             <summary>
            Export the node's transfrom as matrix
             </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.ColladaSaveOptions">
            <summary>
            Save options for collada
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ColladaSaveOptions.Indented">
            <summary>
            Gets or sets whether the exported XML document is indented.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ColladaSaveOptions.TransformStyle">
            <summary>
            Gets or sets the style of node transformation
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.ColladaSaveOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.ColladaSaveOptions"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Collada.ColladaLoadOptions">
            <summary>
            Load options for Collada format
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Collada.ColladaLoadOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.Collada.ColladaLoadOptions"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Collada.ColladaLoadOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets whether flip coordinate system of control points/normal during importing/exporting.
            Default value is false
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Collada.ColladaLoadOptions.CreateDefaultAnimationClip">
            <summary>
            Create a default animation clip for all animations in the collada file.
            Default value is false
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Collada.ColladaXmlReader.ReadParameter(Aspose.ThreeD.Formats.Collada.DataInfos.ColladaParameterGroup)">
            <summary>
            Read typed parameter (
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Collada.ColladaUtils.ReorderMatrix(Aspose.ThreeD.Utilities.Matrix4@)">
            <summary>
            Swap m30/m03, m31/m13, m32/m23
            </summary>
            <param name="mat"></param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.DracoFormat">
            <summary>
            Google Draco format
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.DracoFormat.Decode(System.String)">
            <summary>
            Decode the point cloud or mesh from specified file name
            </summary>
            <param name="fileName">The file name contains the drc file</param>
            <returns>A <see cref="T:Aspose.ThreeD.Entities.Mesh"/> or <see cref="T:Aspose.ThreeD.Entities.PointCloud"/> instance depends on the file content</returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.DracoFormat.Decode(System.Byte[])">
            <summary>
            Decode the point cloud or mesh from memory data
            </summary>
            <param name="data">The raw drc bytes</param>
            <returns>A <see cref="T:Aspose.ThreeD.Entities.Mesh"/> or <see cref="T:Aspose.ThreeD.Entities.PointCloud"/> instance depends on the content</returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.DracoFormat.Encode(Aspose.ThreeD.Entity,System.IO.Stream,Aspose.ThreeD.Formats.DracoSaveOptions)">
            <summary>
            Encode the entity to specified stream
            </summary>
            <param name="entity">The entity to be encoded</param>
            <param name="stream">The stream that encoded data will be written to</param>
            <param name="options">Extra options for encoding the point cloud</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.DracoFormat.Encode(Aspose.ThreeD.Entity,System.String,Aspose.ThreeD.Formats.DracoSaveOptions)">
            <summary>
            Encode the entity to specified file
            </summary>
            <param name="entity">The entity to be encoded</param>
            <param name="fileName">The file name to be written</param>
            <param name="options">Extra options for encoding the point cloud</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.DracoFormat.Encode(Aspose.ThreeD.Entity,Aspose.ThreeD.Formats.DracoSaveOptions)">
            <summary>
            Encode the entity to Draco raw data
            </summary>
            <param name="entity">The entity to be encoded</param>
            <param name="options">Extra options for encoding the point cloud</param>
            <returns>The encoded draco data represented in bytes</returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.DracoCompressionLevel">
            <summary>
            Compression level for draco file
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.DracoCompressionLevel.NoCompression">
            <summary>
            No compression, this will result in the minimum encoding time.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.DracoCompressionLevel.Fast">
            <summary>
            Encoder will perform a compression as quickly as possible.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.DracoCompressionLevel.Standard">
            <summary>
            Standard mode, with good compression and speed.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.DracoCompressionLevel.Optimal">
            <summary>
            Encoder will compress the scene optimally, which may takes longer time to finish.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.DracoSaveOptions">
            <summary>
            Save options for Google draco files
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.PositionBits">
            <summary>
            Quantization bits for position, default value is 14
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.TextureCoordinateBits">
            <summary>
            Quantization bits for texture coordinate, default value is 12
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.ColorBits">
            <summary>
            Quantization bits for vertex color, default value is 10
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.NormalBits">
            <summary>
            Quantization bits for normal vectors, default value is 10
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.CompressionLevel">
            <summary>
            Compression level, default value is <see cref="F:Aspose.ThreeD.Formats.DracoCompressionLevel.Standard"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.DracoSaveOptions.PointCloud">
            <summary>
            Export the scene as point cloud, default value is false.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.DracoSaveOptions.#ctor">
            <summary>
            Construct a default configuration for saving draco files.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTFLoadOptions">
            <summary>
            Load options for glTF format
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFLoadOptions.FlipTexCoordV">
            <summary>
            Flip the v(t) coordinate in mesh's texture coordinate, default value is true.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTFLoadOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.GLTFLoadOptions"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.MaterialConverter">
            <summary>
            Custom converter to convert the geometry's original material to GLTF's PBR material.
            </summary>
            <param name="mat">Old material instance</param>
            <returns>New material instance</returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.GLTFSaveOptions">
            <summary>
            Save options for glTF format.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.PrettyPrint">
            <summary>
            The JSON content of GLTF file is indented for human reading, default value is false
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.EmbedAssets">
            <summary>
            Embed all external assets as base64 into single file in ASCII mode, default value is false.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.MaterialConverter">
            <summary>
            Custom converter to convert the geometry's material to PBR material
            If this is unassigned, glTF 2.0 exporter will automatically convert the standard material to PBR material.
            Default value is null
            This property is used when exporting a scene to a glTF 2.0 file.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.UseCommonMaterials">
            <summary>
            Serialize materials using KHR common material extensions, default value is false.
            Set this to false will cause Aspose.3D export a set of vertex/fragment shader if <see cref="P:Aspose.ThreeD.Formats.GLTFSaveOptions.ExportShaders"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.ExportShaders">
            <summary>
            Export default vertex/fragment shader used by standard glTF materials, default value is false.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.FlipTexCoordV">
            <summary>
            Flip texture coordinate  v(t) component, default value is true.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.TransformUseMatrix">
            <summary>
            If this field is true, node's transform will use matrix instead of translation/rotation/scale, default value is true.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.BufferFile">
            <summary>
            The file name of the external buffer file used to store binary data.
            If this file is not specified, Aspose.3D will generate a name for you.
            This is ignored when export glTF in binary mode.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.SaveExtras">
            <summary>
            Save scene object's dynamic properties into 'extra' fields in the generated glTF file.
            This is useful to provide application-specific data.
            Default value is false.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.GLTFSaveOptions.DracoCompression">
            <summary>
            Gets or sets whether to enable draco compression
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTFSaveOptions.#ctor(Aspose.ThreeD.FileContentType)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.GLTFSaveOptions"/>
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.GLTFSaveOptions.#ctor(Aspose.ThreeD.FileFormat)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.GLTFSaveOptions"/>
            </summary>
            <param name="format"></param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.ObjLoadOptions">
            <summary>
            Load options for wavefront obj
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.ObjLoadOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.ObjLoadOptions"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ObjLoadOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets whether flip coordinate system of control points/normal during importing
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ObjLoadOptions.EnableMaterials">
            <summary>
            Gets or sets whether import materials for each object
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ObjLoadOptions.Scale">
            <summary>
            Scales on x/y/z axis, default value is 1.0
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ObjLoadOptions.NormalizeNormal">
            <summary>
            Gets or sets whether to normalize the normal vector during the loading.
            Default value is true.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.ObjSaveOptions">
            <summary>
            Save options for wavefront obj file
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.ObjSaveOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.ObjSaveOptions"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.PointCloud">
            <summary>
            Gets or sets the flag whether the exporter should export the scene as point cloud(without topological structure), default value is false
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.Verbose">
            <summary>
            Gets or sets whether generate comments for each section
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.SerializeW">
            <summary>
            Gets or sets whether serialize W component in model's vertex position.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.EnableMaterials">
            <summary>
            Gets or sets whether import/export materials for each object
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.ObjSaveOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets whether flip coordinate system of control points/normal during importing/exporting.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PDF.XRefFlags.Compressed">
            <summary>
            Object is compressed and saved in another object stream
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PDF.XRefFlags.Unpacked">
            <summary>
            This is an object stream, and it's decompressed
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PDF.PdfDocument.ReleaseUnused(System.Int32)">
            <summary>
            Release most unused objects
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PDF.PdfEncrypt.SetupGlobalEncryptionKey(System.Byte[],System.Byte[],System.Byte[],System.Int64)">
            
            ownerKey, documentID must be setup
        </member>
        <member name="M:Aspose.ThreeD.Formats.PDF.PdfEncrypt.SetupUserKey">
            
            mkey must be setup
        </member>
        <member name="M:Aspose.ThreeD.Formats.PDF.PdfStream.GetContent">
            <summary>
            Get content that used in reading
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PDF.PdfStream.GetRawContent(Aspose.ThreeD.Formats.PDF.PdfDictionary@)">
            <summary>
            Get raw content that used in serialization/deserialization
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.PDF.PdfExternalStream">
            <summary>
            Stream from external source
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PDF.PdfExternalStream.GetRawContent(Aspose.ThreeD.Formats.PDF.PdfDictionary@)">
            <summary>
            Get raw content that used in serialization/deserialization
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.PDF.PdfEmbeddedStream">
            <summary>
            Stream from embedded PDF file
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PDF.RC4.#ctor">
            Creates a new instance of ARCFOUREncryption 
        </member>
        <member name="T:Aspose.ThreeD.Formats.PdfFormat">
            <summary>
            Adobe's Portable Document Format
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PdfFormat.Extract(System.String,System.Byte[])">
            <summary>
            Extract raw 3D content from PDF file.
            </summary>
            <param name="fileName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PdfFormat.Extract(System.IO.Stream,System.Byte[])">
            <summary>
            Extract raw 3D content from PDF stream.
            </summary>
            <param name="stream"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PdfFormat.ExtractScene(System.String,System.Byte[])">
            <summary>
            Extract 3D scenes from PDF file.
            </summary>
            <param name="fileName"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PdfFormat.ExtractScene(System.IO.Stream,System.Byte[])">
            <summary>
            Extract raw 3D content from PDF stream.
            </summary>
            <param name="stream"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.PdfLoadOptions">
            <summary>
            Options for PDF loading
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PdfLoadOptions.Password">
            <summary>
            The password to unlock the encrypted PDF file.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PdfLoadOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PdfLoadOptions"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.PdfRenderMode">
            <summary>
            Render mode specifies the style in which the 3D artwork is rendered. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Solid">
            <summary>
            Displays textured and lit geometric shapes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.SolidWireframe">
            <summary>
            Displays textured and lit geometric shapes (triangles) with single color edges on top of them.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Transparent">
            <summary>
            Displays textured and lit geometric shapes (triangles) with an added level of transparency.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.TransparentWireframe">
            <summary>
            Displays textured and lit geometric shapes (triangles) with an added level of transparency, with single color opaque edges on top of it.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.BoundingBox">
            <summary>
            Displays the bounding box edges of each node, aligned with the axes of the local coordinate space for that node.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.TransparentBoundingBox">
            <summary>
            Displays bounding boxes faces of each node, aligned with the axes of the local coordinate space for that node, with an added level of transparency.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.TransparentBoundingBoxOutline">
            <summary>
            Displays bounding boxes edges and faces of each node, aligned with the axes of the local coordinate space for that node, with an added level of transparency.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Wireframe">
            <summary>
            Displays only edges in a single color.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.ShadedWireframe">
            <summary>
            Displays only edges, though interpolates their color between their two vertices and applies lighting.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.HiddenWireframe">
            <summary>
            Displays edges in a single color, though removes back-facing and obscured edges.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Vertices">
            <summary>
            Displays only vertices in a single color.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.ShadedVertices">
            <summary>
            Displays only vertices, though uses their vertex color and applies lighting.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.Illustration">
            <summary>
            Displays silhouette edges with surfaces, removes obscured lines.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.SolidOutline">
            <summary>
            Displays silhouette edges with lit and textured surfaces, removes obscured lines.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfRenderMode.ShadedIllustration">
            <summary>
            Displays silhouette edges with lit and textured surfaces and an additional emissive term to remove poorly lit areas of the artwork.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.PdfLightingScheme">
            <summary>
            LightingScheme specifies the lighting to apply to 3D artwork.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Artwork">
            <summary>
            Uses the lights defined in the scene
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.None">
            <summary>
            No lights are used.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.White">
            <summary>
            Three blue-grey infinite lights, no ambient term
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Day">
            <summary>
            Three light-grey infinite lights, no ambient term
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Night">
            <summary>
            One yellow, one aqua, and one blue infinite light, no ambient term
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Hard">
            <summary>
            Three grey infinite lights, moderate ambient term
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Primary">
            <summary>
            One red, one green, and one blue infinite light, no ambient term
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Blue">
            <summary>
            Three blue infinite lights, no ambient term
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Red">
            <summary>
            Three red infinite lights, no ambient term
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Cube">
            <summary>
            Six grey infinite lights aligned with the major axes, no ambient term
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.CAD">
            <summary>
            Three grey infinite lights and one light attached to the camera, no ambient term
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.PdfLightingScheme.Headlamp">
            <summary>
            Single infinite light attached to the camera, low ambient term
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.PdfSaveOptions">
            <summary>
            The save options in PDF exporting.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.RenderMode">
            <summary>
            Render mode specifies the style in which the 3D artwork is rendered. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.LightingScheme">
            <summary>
            LightingScheme specifies the lighting to apply to 3D artwork.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.BackgroundColor">
            <summary>
            Background color of the 3D view in PDF file.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.FaceColor">
            <summary>
            Gets or sets the face color to be used  when rendering the 3D content. 
            This is only relevant only when the <see cref="P:Aspose.ThreeD.Formats.PdfSaveOptions.RenderMode"/> has a value of Illustration.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.AuxiliaryColor">
            <summary>
            Gets or sets the auxiliary color to be used  when rendering the 3D content.
            The interpretation of this color depends on the <see cref="P:Aspose.ThreeD.Formats.PdfSaveOptions.RenderMode"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PdfSaveOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets to flip the coordinate system of the scene during exporting.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PdfSaveOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PdfSaveOptions"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.PlyFormat">
            <summary>
            The PLY format.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PlyFormat.EncodeMesh(Aspose.ThreeD.Entities.IMeshConvertible,System.IO.Stream,Aspose.ThreeD.Formats.PlySaveOptions)">
            <summary>
            Encode the mesh and save the result into the stream.
            </summary>
            <param name="mesh">The mesh to encode</param>
            <param name="stream">The stream to write to, this method will not close this stream</param>
            <param name="opt">Save options</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PlyFormat.Encode(Aspose.ThreeD.Entity,System.IO.Stream,Aspose.ThreeD.Formats.PlySaveOptions)">
            <summary>
            Encode the entity and save the result into the stream.
            </summary>
            <param name="entity">The entity to encode</param>
            <param name="stream">The stream to write to, this method will not close this stream</param>
            <param name="opt">Save options</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PlyFormat.Encode(Aspose.ThreeD.Entity,System.String,Aspose.ThreeD.Formats.PlySaveOptions)">
            <summary>
            Encode the entity and save the result into an external file.
            </summary>
            <param name="entity">The entity to encode</param>
            <param name="fileName">The file to write to</param>
            <param name="opt">Save options</param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PlyFormat.Decode(System.String,Aspose.ThreeD.Formats.PlyLoadOptions)">
            <summary>
            Decode a point cloud or mesh from the specified stream.
            </summary>
            <param name="fileName">The input stream</param>
            <param name="opt">The load option of PLY format</param>
            <returns>A <see cref="T:Aspose.ThreeD.Entities.Mesh"/> or <see cref="T:Aspose.ThreeD.Entities.PointCloud"/> instance</returns>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PlyFormat.Decode(System.IO.Stream,Aspose.ThreeD.Formats.PlyLoadOptions)">
            <summary>
            Decode a point cloud or mesh from the specified stream.
            </summary>
            <param name="stream">The input stream</param>
            <param name="opt">The load option of PLY format</param>
            <returns>A <see cref="T:Aspose.ThreeD.Entities.Mesh"/> or <see cref="T:Aspose.ThreeD.Entities.PointCloud"/> instance</returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.PlyLoadOptions">
            <summary>
            Load options for PLY files
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlyLoadOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets flip coordinate system of control points/normal during importing/exporting.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PlyLoadOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PlyLoadOptions"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.PlySaveOptions">
            <summary>
            Save options for exporting scene as PLY file.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PlySaveOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PlySaveOptions"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.PlySaveOptions.#ctor(Aspose.ThreeD.FileContentType)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.PlySaveOptions"/>
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.PointCloud">
            <summary>
            Export the scene as point cloud, the default value is false.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.FlipCoordinate">
            <summary>
            Flip the coordinate while saving the scene, default value is true
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.VertexElement">
            <summary>
            The element name for the vertex data, default value is "vertex"
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.PositionComponents">
            <summary>
            The component names for position data, default value is ("x", "y", "z")
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.NormalComponents">
            <summary>
            The component names for normal data, default valaue is ("nx", "ny", "nz")
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.TextureCoordinateComponents">
            <summary>
            The component names for texture coordinate data, default value is ("u", "v")
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.ColorComponents">
            <summary>
            The component names for vertex color, default value is ("red", "green", "blue")
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.FaceElement">
            <summary>
            The element name for the face data, default value is "face"
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.PlySaveOptions.FaceProperty">
            <summary>
            The property name for the face data, default value is "vertex_index"
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.STL.ASCIISTLExporter">
            <summary>
            Export ASCII STL file
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STL.ASCIISTLExporter.ExportScene(Aspose.ThreeD.Scene,System.IO.Stream,Aspose.ThreeD.Formats.SaveOptions)">
            <summary>
            Export Scene object to output stream
            </summary>
            <param name="scene">scene object</param>
            <param name="stream">output stream</param>
            <param name="config">IO config</param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.STL.ASCIISTLImporter">
            <summary>
            Import ASCII STL file to Scene object
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STL.ASCIISTLImporter.LoadScene(Aspose.ThreeD.Formats.ImportContext)">
            <summary>
            Load Scene object from input ASCII STL stream
            </summary>
            <returns>Scene object</returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.STL.BinarySTLExporter">
            <summary>
            Export Binary STL file
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STL.BinarySTLExporter.ExportScene(Aspose.ThreeD.Scene,System.IO.Stream,Aspose.ThreeD.Formats.SaveOptions)">
            <summary>
            Export Scene object to output stream
            </summary>
            <param name="scene">scene object</param>
            <param name="stream">output stream</param>
            <param name="config">IO config</param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.STL.BinarySTLImporter">
            <summary>
            Import Binary STL file to Scene object
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STL.BinarySTLImporter.LoadScene(Aspose.ThreeD.Formats.ImportContext)">
            <summary>
            Load Scene object from input Binary STL stream
            </summary>
            <returns>Scene object</returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3D.Decoders.DummyDecoder">
            <summary>
            Decoder for unsupported blocks
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3D.Decoders.CodecUtils">
            <summary>
            Utilities used in coder and decoders.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3D.Decoders.ProgressiveMeshContinuationDecoder">
            <summary>
            Translated from U3D's CIFXAuthorCLODDcodre_P.cpp
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3D.Objects.IShadable">
            <summary>
            Resourcee that implemented this interface can be used by Shading modifier.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3D.U3DWriter">
            <summary>
            Translated from CIFXBitStreamX.cpp of original U3D implementation.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.U3D.BitStream.ReadAllData">
            <summary>
            A faster implementation to read all rest data than <see cref="M:Aspose.ThreeD.Formats.U3D.U3DReader.Read(System.Byte[])"/>
            </summary>
            <returns></returns>
        </member>
        <member name="F:Aspose.ThreeD.Formats.U3D.IFXAuthorMaterial.m_uNumTextureLayers">
            The number of texture layers used by this material
        </member>
        <member name="F:Aspose.ThreeD.Formats.U3D.IFXAuthorMaterial.m_uTexCoordDimensions">
                        This array gives the dimensions of the texture coordinates used for 
                        each texture layer in the material.  Texture coordinates can 
                        range from 1-dimensional to 4-dimensional. 
        </member>
        <member name="F:Aspose.ThreeD.Formats.U3D.IFXAuthorMaterial.m_uOriginalMaterialID">
                        If the array of IFXAuthorMaterials gets smaller because the scrubber 
                        removed unused materials and repacked them, this field gives the
                        original array index of the material record.  
        </member>
        <member name="F:Aspose.ThreeD.Formats.U3D.IFXAuthorMaterial.m_uDiffuseColors">
            True if this material specifies diffuse vertex colors.
        </member>
        <member name="F:Aspose.ThreeD.Formats.U3D.IFXAuthorMaterial.m_uSpecularColors">
            True if this material specifies specular vertex colors.
        </member>
        <member name="F:Aspose.ThreeD.Formats.U3D.IFXAuthorMaterial.m_uNormals">
                        Set to TRUE if any of the faces in this material use normals, 
                        FALSE if no faces use normals.
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3D.IFXSetAdjacencyX">
            <summary>
            This class is used by the progressive geometry compression and decompression
            And translated from U3D's CIFXSetAdjacencyX.cpp
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3D.IFXSetX">
            <summary>
            This class is used by the progressive geometry compression and decompression
            And translated from U3D's CIFXSetX.cpp
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3D.U3DContext">
            <summary>
            Context objects used during importing/exporting
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Formats.U3D.Constants.u8AMPOrientationLeft">
            @todo: Renumber contexts
        </member>
        <member name="F:Aspose.ThreeD.Formats.U3D.Constants.ContextOrientationType">
            @todo: Reorder and renumber contexts
        </member>
        <member name="T:Aspose.ThreeD.Formats.XLoadOptions">
            <summary>
            The Load options for DirectX X files.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.XLoadOptions.FlipCoordinateSystem">
            <summary>
            Flip the coordinate system, this is true by default
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.XLoadOptions.#ctor(Aspose.ThreeD.FileContentType)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.XLoadOptions"/>
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.X.XTokenizer.BlockBegin(System.String)">
            <summary>
            Match a name(optional) and expect an OBrace
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.IFileFormatDetector">
            <summary>
            Detect file's version and type
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.IFileFormatDetector.Detect(System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="header"></param>
            <returns>return null if failed to detect the file type</returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.IOService">
            <summary>
            The IOService allows to create exporter/importer for different file formats, and provides the file format detection service.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.IOService.GetFileFormat(System.String,System.Byte[])">
            <summary>
            Get the file's format according to file's leading header bytes.
            IOService won't garantee the file format returned by this function is supported.
            </summary>
            <param name="fileName"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.NamespaceDoc">
            <summary>
            IO related customization are defined in this namespace.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.ObjExporter.IsValidMeshNode(Aspose.ThreeD.Node)">
            <summary>
            Check if this node contains valid point cloud or entities that can be converted to mesh
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Formats.STLLoadOptions">
            <summary>
            Load options for STL
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STLLoadOptions.#ctor">
            <summary>
            Initializes of a new <see cref="T:Aspose.ThreeD.Formats.STLLoadOptions"/> instance.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STLLoadOptions.#ctor(Aspose.ThreeD.FileContentType)">
            <summary>
            Initializes of a new <see cref="T:Aspose.ThreeD.Formats.STLLoadOptions"/> instance.
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="P:Aspose.ThreeD.Formats.STLLoadOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets whether to flip coordinate system of control points/normal during importing.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.STLLoadOptions.RecalculateNormal">
            <summary>
            Ignore the normal data that stored in STL file and recalculate the normal data based on the vertex position.
            Default value is false
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.STLSaveOptions">
            <summary>
            Save options for STL
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STLSaveOptions.#ctor">
            <summary>
            Initializes of a new <see cref="T:Aspose.ThreeD.Formats.STLSaveOptions"/> instance.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.STLSaveOptions.#ctor(Aspose.ThreeD.FileContentType)">
            <summary>
            Initializes of a new <see cref="T:Aspose.ThreeD.Formats.STLSaveOptions"/> instance.
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="P:Aspose.ThreeD.Formats.STLSaveOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets whether flip coordinate system of control points/normal during exporting.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3DLoadOptions">
            <summary>
            Load options for universal 3d
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.U3DLoadOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.U3DLoadOptions"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.U3DLoadOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets whether flip coordinate system of control points/normal during importing/exporting.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.U3DSaveOptions">
            <summary>
            Save options for universal 3d
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.U3DSaveOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.U3DSaveOptions"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets whether flip coordinate system of control points/normal during importing/exporting.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.MeshCompression">
            <summary>
            Gets or sets whether to enable mesh data compression.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.ExportNormals">
            <summary>
            Gets or sets whether to export normal data.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.ExportTextureCoordinates">
            <summary>
            Gets or sets whether to export texture coordinates.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.ExportVertexDiffuse">
            <summary>
            Gets or sets whether to export vertex's diffuse color.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.U3DSaveOptions.ExportVertexSpecular">
            <summary>
            Gets or sets whether to export vertex' specular color.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Discreet3DSLoadOptions">
            <summary>
            Load options for 3DS file.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Discreet3DSLoadOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.Discreet3DSLoadOptions"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSLoadOptions.GammaCorrectedColor">
            <summary>
            A 3ds file may contains original color and gamma corrected color for same attribute,
            Setting this to true will use the gamma corrected color if possible, 
            otherwise the Aspose.3D will try to use the original color.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSLoadOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets flip coordinate system of control points/normal during importing/exporting.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSLoadOptions.ApplyAnimationTransform">
            <summary>
            Gets or sets wheather to use the transformation defined in the first frame of animation track.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.Discreet3DSSaveOptions">
            <summary>
            Save options for 3DS file.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.Discreet3DSSaveOptions"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.ExportLight">
            <summary>
            Gets or sets whether export all lights in the scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.ExportCamera">
            <summary>
            Gets or sets whether export all cameras in the scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.DuplicatedNameSeparator">
            <summary>
            The separator between object's name and the duplicated counter, default value is "_".
            
            When scene contains objects that use the same name, Aspose.3D 3DS exporter will generate a different name for the object.
            For example there's two nodes named "Box", the first node will have a name "Box",
            and the second node will get a new name "Box_2" using the default configuration.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.DuplicatedNameCounterBase">
            <summary>
            The counter used by generating new name for duplicated names, default value is 2.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.DuplicatedNameCounterFormat">
            <summary>
            The format of the duplicated counter, default value is empty string.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.MasterScale">
            <summary>
            Gets or sets the master scale used in exporting.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.GammaCorrectedColor">
            <summary>
            A 3ds file may contains original color and gamma corrected color for same attribute,
            Setting this to true will use the gamma corrected color if possible, 
            otherwise the Aspose.3D will try to use the original color.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.FlipCoordinateSystem">
            <summary>
            Gets or sets flip coordinate system of control points/normal during importing/exporting.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.Discreet3DSSaveOptions.HighPreciseColor">
            <summary>
            If this is true, the generated 3ds file will use high precise color, means each channel of red/green/blue are in 32bit float.
            Otherwise the generated file will use 24bit color, each channel use 8bit byte.
            The default value is false, because not all applications supports the high-precise color.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.IOConfig">
            <summary>
            IO config for serialization/deserialization.
            User can specify detailed configurations like dependency look-up path
            Or format-related configs here
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.IOConfig.FileFormat">
            <summary>
            Gets the file format that specified in current Save/Load option.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.IOConfig.GetConfigAs``1(Aspose.ThreeD.Formats.IOConfig)">
            <summary>
            Always returns an IOConfig instance with given type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cfg"></param>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Formats.IOConfig.FileSystem">
            <summary>
            Allow user to handle how to manage the external dependencies during load/save.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.IOConfig.LookupPaths">
            <summary>
            Some files like OBJ depends on external file, the lookup paths will allows Aspose.3D to look for external file to load.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.IOConfig.FileName">
            <summary>
            The file name of the exporting/importing scene.
            This is optional, but useful when serialize external assets like OBJ's material.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.IOConfig.#ctor(Aspose.ThreeD.FileFormat)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.IOConfig"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.IOConfig.LookupForFile(System.String,System.String)">
            <summary>
            Look up for file in given lookup paths
            User can override this to provide more customized file lookup mechanisms.
            </summary>
            <returns>The for file.</returns>
            <param name="fileName">File name to look up</param>
            <param name="alternativeFile">If the file cannot be found, return this</param>
        </member>
        <member name="T:Aspose.ThreeD.Formats.SaveOptions">
            <summary>
            The base class to configure options in file saving for different types
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.LoadOptions">
            <summary>
            The base class to configure options in file loading for different types
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBXLoadOptions">
            <summary>
            Load options for FBX format.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBXLoadOptions.KeepBuiltinGlobalSettings">
            <summary>
            Gets or sets whether to keep the builtin properties in GlobalSettings which have a native property replacement in <see cref="T:Aspose.ThreeD.AssetInfo"/>.
            Set this to true if you want the full properties in GlobalSettings
            Default value is false
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBXLoadOptions.#ctor(Aspose.ThreeD.FileFormat)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.FBXLoadOptions"/>
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBXLoadOptions.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Formats.FBXLoadOptions"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Formats.FBXSaveOptions">
            <summary>
            Save options for FBX file.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Formats.FBXSaveOptions.#ctor(Aspose.ThreeD.FileFormat)">
            <summary>
            Initializes a <see cref="T:Aspose.ThreeD.Formats.FBXSaveOptions"/>
            </summary>
            <param name="format"></param>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.ReusePrimitiveMesh">
            <summary>
            Reuse the mesh for the primitives with same parameters, this will significantly reduce the size of FBX output which scene was constructed by large set of primitive shapes(like imported from CAD files).
            Default value is false
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.EnableCompression">
            <summary>
            Compression large binary data in the FBX file(e.g. animation data, control points, vertex element data, indices), default value is true.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.FoldRepeatedCurveData">
            <summary>
            Gets or sets whether reuse repeated curve data by increasing last data's ref count
            </summary>
            <value>true if fold repeated curve data; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.ExportLegacyMaterialProperties">
            <summary>
            Gets or sets whether export legacy material properties, used for back compatibility.
            This option is turned on by default.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.VideoForTexture">
            <summary>
            Gets or sets whether generate a Video instance for <see cref="T:Aspose.ThreeD.Shading.Texture"/> when exporting as FBX.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Formats.FBXSaveOptions.GenerateVertexElementMaterial">
            <summary>
            Gets or sets whether always generate a <see cref="T:Aspose.ThreeD.Entities.VertexElementMaterial"/> for geometries if the attached node contains materials.
            This is turned off by default.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.ArbitraryProfile">
            <summary>
            This class allows you to construct a 2D profile directly from arbitrary curve. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.ArbitraryProfile.Curve">
            <summary>
            The Curve used to construct the profile
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.ArbitraryProfile.Closed">
            <summary>
            Gets or sets if this is a closed profile
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ArbitraryProfile.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.ArbitraryProfile"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ArbitraryProfile.#ctor(Aspose.ThreeD.Entities.Curve)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.ArbitraryProfile"/> with an initial curve.
            </summary>
            <param name="curve"></param>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.HollowCircleShape">
            <summary>
            IFC compatible hollow circle profile.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HollowCircleShape.WallThickness">
            <summary>
            Gets or sets the difference between the outer and inner radius.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.HollowRectangleShape">
            <summary>
            IFC compatible hollow rectangular shape with both inner/outer rounding corners.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HollowRectangleShape.WallThickness">
            <summary>
            The thickness between the boundary of the rectangle and the inner hole
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HollowRectangleShape.InnerFilletRadius">
            <summary>
            The inner fillet radius of the inner rectangle.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.NamespaceDoc">
            <summary>
            All 2D profile classes are defined in this namespace.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TransformedProfile.BaseProfile">
            <summary>
            The base profile to be mirrored.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TransformedProfile.Transform">
            <summary>
            The 2D transformation matrix.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.TransformedProfile.#ctor(Aspose.ThreeD.Profiles.Profile,Aspose.ThreeD.Utilities.Matrix3)">
            <summary>
            Construct a new <see cref="T:Aspose.ThreeD.Profiles.MirroredProfile"/> from an existing profile.
            </summary>
            <param name="baseProfile">The base profile to be mirrored.</param>
            <param name="transform">The 2D transformation matrix.</param>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.CircleShape">
            <summary>
            IFC compatible circle profile, which can be used to construct a mesh through <see cref="T:Aspose.ThreeD.Entities.LinearExtrusion"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.CircleShape.Radius">
            <summary>
            Gets or sets the radius of the circle.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.CircleShape.#ctor">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Profiles.CircleShape"/> profile with default radius(5).
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.CircleShape.#ctor(System.Double)">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Profiles.CircleShape"/> profile with specified radius.
            </summary>
            <param name="radius"></param>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.CircleShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.CShape">
            <summary>
            IFC compatible C-shape profile that defined by parameters.
            The center position of the profile is in the center of the bounding box.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.CShape.Depth">
            <summary>
            Gets or sets the depth of the profile.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.CShape.Width">
            <summary>
            Gets or sets the width of the profile.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.CShape.Girth">
            <summary>
            Gets or sets the length of girth.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.CShape.WallThickness">
            <summary>
            Gets or sets the thickness of the wall.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.CShape.InternalFilletRadius">
            <summary>
            Gets or sets the internal fillet radius.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.CShape.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.CShape"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.CShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.EllipseShape">
            <summary>
            IFC compatible ellipse shape that defined by parameters.
            The center position of the profile is in the center of the bounding box.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.EllipseShape.SemiAxis1">
            <summary>
            Gets or sets the first radius of the ellipse that measured in the direction of x axis.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.EllipseShape.SemiAxis2">
            <summary>
            Gets or sets the second radius of the ellipse that measured in the direction of y axis.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.EllipseShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.HShape">
            <summary>
            The <see cref="T:Aspose.ThreeD.Profiles.HShape"/> provides the defining parameters of an 'H' or 'I' shape.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.OverallDepth">
            <summary>
            Gets or sets the extent of the depth.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.BottomFlangeWidth">
            <summary>
            Gets or sets the extent of the width.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.TopFlangeWidth">
            <summary>
            Gets or sets the width of the top flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.TopFlangeThickness">
            <summary>
            Gets or sets the thickness of the top flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.TopFlangeEdgeRadius">
            <summary>
            Gets or sets the radius of the lower edges of the top flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.TopFlangeFilletRadius">
            <summary>
            Gets or sets the radius of fillet between the web and the top flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.BottomFlangeThickness">
            <summary>
            Gets or sets the flange thickness of H-shape.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.WebThickness">
            <summary>
            Gets or sets the thickness of the web of the H-shape.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.BottomFlangeFilletRadius">
            <summary>
            Gets or sets the radius of fillet between the web and the bottom flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.HShape.BottomFlangeEdgeRadius">
            <summary>
            Gets or sets the radius of the upper edges of the bottom flange.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.HShape.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.HShape"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.HShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.LShape">
            <summary>
            IFC compatible L-shape profile that defined by parameters.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.LShape.Depth">
            <summary>
            Gets or sets the depth of the profile.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.LShape.Width">
            <summary>
            Gets or sets the width of the profile.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.LShape.Thickness">
            <summary>
            Gets or sets the thickness of the constant wall.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.LShape.FilletRadius">
            <summary>
            Gets or sets the radius of the fillet.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.LShape.EdgeRadius">
            <summary>
            Gets or sets the radius of the edge.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.LShape.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.LShape"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.LShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.MirroredProfile">
            <summary>
            IFC compatible mirror profile.
            This profile defines a new profile by mirroring the base profile about the y axis.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.MirroredProfile.BaseProfile">
            <summary>
            The base profile to be mirrored.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.MirroredProfile.#ctor(Aspose.ThreeD.Profiles.Profile)">
            <summary>
            Construct a new <see cref="T:Aspose.ThreeD.Profiles.MirroredProfile"/> from an existing profile.
            </summary>
            <param name="baseProfile">The base profile to be mirrored.</param>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.Profile">
            <summary>
            2D Profile in xy plane
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.Profile.GetEntityRendererKey">
            <summary>
            Gets the key of the entity renderer registered in the renderer 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.Profile.Tessellate(Aspose.ThreeD.Utilities.Vector4List)">
            <summary>
            Override this to tessellate the 2D profile into control point list in x-y plane.
            </summary>
            <param name="controlPoints"></param>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.Profile.TessellateHoles">
            <summary>
            Override this to tessellate the holes of the 2D profile in x-y plane. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.ParameterizedProfile">
            <summary>
            The base class of all parameterized profiles.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ParameterizedProfile.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.RectangleShape">
            <summary>
            IFC compatible rectangular shape with rounding corners.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.RectangleShape.RoundingRadius">
            <summary>
            Gets or sets the radius of the circular arcs of all four corners, measured in degrees.
            Default value is 0.0
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.RectangleShape.XDim">
            <summary>
            Gets or sets the extent of the rectangle in the direction of x-axis
            Default value is 2.0
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.RectangleShape.YDim">
            <summary>
            Gets or sets the extent of the rectangle in the direction of y-axis
            Default value is 2.0
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.RectangleShape.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.RectangleShape"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.RectangleShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.ShapeDrawer">
            <summary>
            This class provides the utility to draws the vectorized shape in x-y plane
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ShapeDrawer.Begin">
            <summary>
            Begin a new shape, this will affects the <see cref="M:Aspose.ThreeD.Profiles.ShapeDrawer.SameSense(System.Boolean)"/> and <see cref="M:Aspose.ThreeD.Profiles.ShapeDrawer.Apply(Aspose.ThreeD.Utilities.Matrix4)"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ShapeDrawer.Go(System.Double)">
            <summary>
            Go forward 
            </summary>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ShapeDrawer.Rotate(System.Double,System.Double)">
            <summary>
            Rotate the direction, draw arc if necessary
            </summary>
            <param name="angle"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ShapeDrawer.Close">
            <summary>
            Close the shape, make sure the first and the last point are the same, otherwise duplicate the first point to the last
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ShapeDrawer.SameSense(System.Boolean)">
            <summary>
            Reverse the shape if the same sense is false.
            </summary>
            <param name="sameSense"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ShapeDrawer.Reverse">
            <summary>
            Reverse the shape 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ShapeDrawer.Optimize(System.Double)">
            <summary>
            Remove the continuous similar points 
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.TrapeziumShape">
            <summary>
            IFC compatible Trapezium shape defined by parameters. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TrapeziumShape.BottomXDim">
            <summary>
            Gets or sets the extent of the bottom line measured along the x-axis.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TrapeziumShape.TopXDim">
            <summary>
            Gets or sets the extent of the top line measured along the x-axis.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TrapeziumShape.YDim">
            <summary>
            Gets or sets the distance between the top and bottom lines measured along the y-axis. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TrapeziumShape.TopXOffset">
            <summary>
            Gets or sets the offset from the beginning of the top line to the bottom line. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.TrapeziumShape.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.TrapeziumShape"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.TrapeziumShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.TShape">
            <summary>
            IFC compatible T-shape defined by parameters.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TShape.Depth">
            <summary>
            Gets or sets the length of the web. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TShape.FlangeWidth">
            <summary>
            Gets or sets the length of the flange. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TShape.WebThickness">
            <summary>
            Gets or sets the wall thickness of web.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TShape.FlangeThickness">
            <summary>
            Gets or sets the wall thickness of flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TShape.FilletRadius">
            <summary>
            Gets or sets the radius of fillet between web and flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TShape.FlangeEdgeRadius">
            <summary>
            Gets or sets the radius of the flange edge.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.TShape.WebEdgeRadius">
            <summary>
            Gets or sets the radius of web edge.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.TShape.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.TShape"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.TShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.UShape">
            <summary>
            IFC compatible U-shape defined by parameters.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.UShape.Depth">
            <summary>
            Gets or sets the length of web.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.UShape.FlangeWidth">
            <summary>
            Gets or sets the length of flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.UShape.WebThickness">
            <summary>
            Gets or sets the thickness of web.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.UShape.FlangeThickness">
            <summary>
            Gets or sets the thickness of flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.UShape.FilletRadius">
            <summary>
            Gets or sets the radius of fillet between flange and web.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.UShape.EdgeRadius">
            <summary>
            Gets or sets the radius of edge in flange's edge.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.UShape.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.UShape"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.UShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Profiles.ZShape">
            <summary>
            IFC compatible Z-shape profile defined by parameters.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.ZShape.Depth">
            <summary>
            Gets or sets the length of web.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.ZShape.FlangeWidth">
            <summary>
            Gets or sets the length of flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.ZShape.WebThickness">
            <summary>
            Gets or sets the thickness of wall.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.ZShape.FlangeThickness">
            <summary>
            Gets or sets the thickness of flange.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.ZShape.FilletRadius">
            <summary>
            Gets or sets the radius of fillet between flange and web.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Profiles.ZShape.EdgeRadius">
            <summary>
            Gets or sets the radius of flange edge.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ZShape.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Profiles.ZShape"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Profiles.ZShape.GetExtent">
            <summary>
            Gets the extent in x and y dimension.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.LZMA.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.LZMA.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.LZMA.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.LZMA.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,Aspose.ThreeD.Utilities.LZMA.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:Aspose.ThreeD.Utilities.LZMA.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.LZMA.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.PosStateBits">
            <summary>
            Specifies number of postion state bits for LZMA (0 le x le 4).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.LitContextBits">
            <summary>
            Specifies number of literal context bits for LZMA (0 le x le 8).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.LitPosBits">
            <summary>
            Specifies number of literal position bits for LZMA (0 le x le 4).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.LZMA.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.BoundingBox2D">
            <summary>
            The axis-aligned bounding box for <see cref="T:Aspose.ThreeD.Utilities.Vector2"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoundingBox2D.Null">
            <summary>
            The null bounding box
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoundingBox2D.Infinite">
            <summary>
            The infinite bounding box
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.BoundingBox2D.Extent">
            <summary>
            Gets the extent of the bounding box.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.BoundingBox2D.Minimum">
            <summary>
            The minimum corner of the bounding box
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.BoundingBox2D.Maximum">
            <summary>
            The maximum corner of the bounding box
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox2D.#ctor(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Initialize a finite bounding box with given minimum and maximum corner
            </summary>
            <param name="minimum">The minimum corner</param>
            <param name="maximum">The maximum corner</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox2D.Merge(Aspose.ThreeD.Utilities.Vector2)">
            <summary>
             Merges the new box into the current bounding box.
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox2D.Merge(Aspose.ThreeD.Utilities.BoundingBox2D)">
            <summary>
             Merges the new box into the current bounding box.
            </summary>
            <param name="bb"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox2D.ToString">
            <summary>
            Gets the string representation of the bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Algorithms.PointInsideTriangle(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Check if point p is inside triangle (p0, p1, p2)
            </summary>
            <param name="p"></param>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Algorithms.RayIntersect(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Check if ray (origin, dir) intersects with line segment(start, end)
            </summary>
            <param name="origin"></param>
            <param name="dir"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.DoubleList">
            <summary>
            Performance optimized list for accessing doubles.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.DoubleList.AddRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Add a range of vectors into current list
            </summary>
            <param name="vectors"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.DoubleList.CopyTo(System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
            Copy elements to specified array 
            </summary>
            <param name="offset">source offset</param>
            <param name="array">destination array</param>
            <param name="arrayIndex">destination offset</param>
            <param name="count">elements to copy</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.DoubleList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove elements in specified range
            </summary>
            <param name="start">Index of the first element to be removed</param>
            <param name="length">Length of the elements to be removed</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.DoubleList.Reverse">
            <summary>
            Reverse the elements in the list
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.DoubleList.ToArray">
            <summary>
            Convert this list to array
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.FMatrix3">
            <summary>
            Matrix 3x3 with all component in float type
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.m00">
            <summary>
            The m00.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.m01">
            <summary>
            The m01.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.m02">
            <summary>
            The m02.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.m10">
            <summary>
            The m10.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.m11">
            <summary>
            The m11.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.m12">
            <summary>
            The m12.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.m20">
            <summary>
            The m20.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.m21">
            <summary>
            The m21.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.m22">
            <summary>
            The m22.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix3.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initialize the instance of <see cref="T:Aspose.ThreeD.Utilities.FMatrix3"/>
            </summary>
            <param name="m00"></param>
            <param name="m01"></param>
            <param name="m02"></param>
            <param name="m10"></param>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m20"></param>
            <param name="m21"></param>
            <param name="m22"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix3.#ctor(Aspose.ThreeD.Utilities.FMatrix4)">
            <summary>
            Initialize the instance of <see cref="T:Aspose.ThreeD.Utilities.FMatrix3"/> from a <see cref="T:Aspose.ThreeD.Utilities.Matrix4"/> instance.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix3.#ctor(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Initialize the instance of <see cref="T:Aspose.ThreeD.Utilities.FMatrix3"/> from a <see cref="T:Aspose.ThreeD.Utilities.Matrix4"/> instance.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix3.Transpose">
            <summary>
            Transposes this instance.
            </summary>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.IOUtils">
            <summary>
            Utilities to write matrix/vector to binary writer
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Write the matrix to the binary writer
            </summary>
            <param name="writer">Target binary writer</param>
            <param name="mat">Matrix to write</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.FMatrix4)">
            <summary>
            Write the matrix to the binary writer
            </summary>
            <param name="writer">Target binary writer</param>
            <param name="mat">Matrix to write</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.FVector2)">
            <summary>
            Write the vector to the binary writer
            </summary>
            <param name="writer">Target binary writer</param>
            <param name="v">Vector to write</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.FVector3)">
            <summary>
            Write the vector to the binary writer
            </summary>
            <param name="writer">Target binary writer</param>
            <param name="v">Vector to write</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.FVector4)">
            <summary>
            Write the vector to the binary writer
            </summary>
            <param name="writer">Target binary writer</param>
            <param name="v">Vector to write</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Write the vector to the binary writer
            </summary>
            <param name="writer">Target binary writer</param>
            <param name="v">Vector to write</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Write the vector to the binary writer
            </summary>
            <param name="writer">Target binary writer</param>
            <param name="v">Vector to write</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IOUtils.Write(System.IO.BinaryWriter,Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Write the vector to the binary writer
            </summary>
            <param name="writer">Target binary writer</param>
            <param name="v">Vector to write</param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Polygon">
            <summary>
            This represents the polygon in directed graph, used for boolean operations like union/intersect/subtract
            The algorithm used in this implementation was invented by Lex Chou, the hole algorithm used in is from paper "Triangulation by Ear Clipping" by "David Eberly"
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Polygon.Edge.BreakEdge(Aspose.ThreeD.Utilities.Polygon.Vertex)">
            <summary>
            Break the edge into two edges, and return the new edge
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Polygon.CopyState(Aspose.ThreeD.Utilities.Polygon)">
            <summary>
            Copy basic states to destination polygon
            </summary>
            <param name="dst"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Polygon.Clone(Aspose.ThreeD.Utilities.Polygon,Aspose.ThreeD.Utilities.Polygon,Aspose.ThreeD.Utilities.Polygon,Aspose.ThreeD.Utilities.Polygon)">
            <summary>
            Clone two polygons to another polygons and share the same vertex instances, and make sure they're on the same plane
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Polygon.MakeHole(Aspose.ThreeD.Utilities.Polygon)">
            <summary>
            Explanation of this algorithm can be found in paper "Triangulation by Ear Clipping", David Eberly, Geometric Tools, Redmond WA 98052 
            </summary>
            <param name="hole"></param>
            <returns></returns>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.OS.ClassStyles.HorizontalRedraw">
            <summary>Redraws the entire window if a movement or size adjustment changes the width of the client area.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.OS.ClassStyles.OwnDC">
            <summary>Allocates a unique device context for each window in the class.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.OS.ClassStyles.VerticalRedraw">
            <summary>Redraws the entire window if a movement or size adjustment changes the height of the client area.</summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.OS.Linux.gdk_x11_drawable_get_xid(System.IntPtr)">
            <summary> Returns the X resource (window or pixmap) belonging to a GdkDrawable. </summary>
            <remarks> XID gdk_x11_drawable_get_xid(GdkDrawable *drawable); </remarks>
            <param name="gdkDisplay"> The GdkDrawable. </param>
            <returns> The ID of drawable's X resource. </returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.OS.Linux.gdk_wayland_display_get_wl_display(System.IntPtr)">
            <remarks> struct wl_display * gdk_wayland_display_get_wl_display (GdkDisplay *display); </remarks>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.OS.Linux.gdk_wayland_window_get_wl_surface(System.IntPtr)">
            <remarks>struct wl_surface * gdk_wayland_window_get_wl_surface (GdkWindow *window); </remarks>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.OS.Linux.gdk_display_get_default">
            <remarks> GdkDisplay * gdk_display_get_default (void); </remarks>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.OS.Linux.gdk_x11_get_default_xdisplay">
            <remarks> Display * gdk_x11_get_default_xdisplay (void); </remarks>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.OS.Linux.gdk_x11_display_get_xdisplay(System.IntPtr)">
            <summary> Returns the X display of a GdkDisplay. </summary>
            <remarks> Display* gdk_x11_display_get_xdisplay(GdkDisplay *display); </remarks>
            <param name="gdkDisplay"> The GdkDrawable. </param>
            <returns> The X Display of the GdkDisplay. </returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.A3DXmlWriter">
            <summary>
            Java porter friendly implementation.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.IArrayList`1">
            <summary>
            Aspose.3D has its own highly optimized implementation of <see cref="T:System.Collections.Generic.List`1"/> for better loading/saving performance
            Only this interface is exposed for user with <see cref="T:System.Collections.Generic.IList`1"/> compatible and similar interfaces.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IArrayList`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary>
            Adds all items from <paramref name="list"/>, this is optimized version for <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IArrayList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds all items from <paramref name="collection"/>, this is general version for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IArrayList`1.ToArray">
            <summary>
            Converts all items in the list to an array
            </summary>
            <returns>Items array</returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.ArrayList`1">
            <summary>
            According to performance diagnosis, 21.5% time are used by <see cref="T:System.Collections.Generic.List`1"/> 
            Implement our own IList and expose internal data structure can eliminate the boundary checking and function call to reduce 21.5% loading time.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.ArrayList`1.#ctor(`0[])">
            <summary>
            caution: ArrayList will take the ownership of this array for performance, do not remove the <paramref name="data"/> out side of the ArrayList
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.BinderBase">
            <summary>
            ReleaseTool will find all child class of BinderBase, and modify the MSIL of all functions that marked with <see cref="T:Aspose.ThreeD.Utilities.LateBindingAttribute"/> to turn it a bridge to the external functions.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.BitVector">
            <summary>
            Extendable Bit vector
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.BoundingBoxExtent">
            <summary>
            The extent of the bounding box
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoundingBoxExtent.Null">
            <summary>
            Null bounding box
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoundingBoxExtent.Finite">
            <summary>
            Finite bounding box
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoundingBoxExtent.Infinite">
            <summary>
            Infinite bounding box
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.BoundingBox">
            <summary>
            The axis-aligned bounding box
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoundingBox.Null">
            <summary>
            The null bounding box
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoundingBox.Infinite">
            <summary>
            The infinite bounding box
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.BoundingBox.Extent">
            <summary>
            Gets the extent of the bounding box.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.BoundingBox.Minimum">
            <summary>
            The minimum corner of the bounding box
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.BoundingBox.Maximum">
            <summary>
            The maximum corner of the bounding box
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.#ctor(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Initialize a finite bounding box with given minimum and maximum corner
            </summary>
            <param name="minimum">The minimum corner</param>
            <param name="maximum">The maximum corner</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initialize a finite bounding box with given minimum and maximum corner
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.FromGeometry(Aspose.ThreeD.Entities.Geometry)">
            <summary>
            Construct a bounding box from given geometry
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.GetBoundingBox(Aspose.ThreeD.Utilities.Vector4List,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Calculate the bounding box of the given points
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.GetBoundingBox(Aspose.ThreeD.Utilities.Vector4List)">
            <summary>
            Calculate the bounding box of the given points
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.Merge(Aspose.ThreeD.Utilities.BoundingBox)">
            <summary>
             Merges the new box into the current bounding box.
            </summary>
            <param name="bb"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.op_Multiply(Aspose.ThreeD.Utilities.BoundingBox,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Operator overloading for multiply
            </summary>
            <param name="bbox"></param>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.ToString">
            <summary>
            Gets the string representation of the bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.GetHashCode">
            <summary>
            Returns the hash code for this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoundingBox.Equals(System.Object)">
            <summary>
            Determines if two objects are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.BytePointer">
            <summary>
            This simulates a byte pointer
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.CircularList`1">
            <summary>
            Implementation of doubly linked list, this is different to the native .net implementation while the First/Last is still avaiable when no elements inserted into the list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.CollectionDebugView`1">
            <summary>
            Utility for debugger to display content of our own collection classes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Contract.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Make sure the argument is not null
            </summary>
            <param name="arg"></param>
            <param name="name"></param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.HandSwitcher">
            <summary>
            Switch from right hand to left hand
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.DataBuffer">
            <summary>
            The differences between <see cref="T:Aspose.ThreeD.Utilities.DataBuffer"/> and <see cref="T:Aspose.ThreeD.Utilities.RawStreamReader"/> is that this encapsulates the random access of binary data.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.FlatScene">
            <summary>
            Utility to access all objects in scene
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.FMatrix4">
            <summary>
            Matrix 4x4 with all component in float type
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m00">
            <summary>
            The m00.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m01">
            <summary>
            The m01.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m02">
            <summary>
            The m02.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m03">
            <summary>
            The m03.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m10">
            <summary>
            The m10.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m11">
            <summary>
            The m11.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m12">
            <summary>
            The m12.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m13">
            <summary>
            The m13.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m20">
            <summary>
            The m20.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m21">
            <summary>
            The m21.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m22">
            <summary>
            The m22.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m23">
            <summary>
            The m23.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m30">
            <summary>
            The m30.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m31">
            <summary>
            The m31.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m32">
            <summary>
            The m32.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.m33">
            <summary>
            The m33.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FMatrix4.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initialize the instance of <see cref="T:Aspose.ThreeD.Utilities.FMatrix4"/>
            </summary>
            <param name="m00"></param>
            <param name="m01"></param>
            <param name="m02"></param>
            <param name="m03"></param>
            <param name="m10"></param>
            <param name="m11"></param>
            <param name="m12"></param>
            <param name="m13"></param>
            <param name="m20"></param>
            <param name="m21"></param>
            <param name="m22"></param>
            <param name="m23"></param>
            <param name="m30"></param>
            <param name="m31"></param>
            <param name="m32"></param>
            <param name="m33"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix4.#ctor(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Initialize the instance of <see cref="T:Aspose.ThreeD.Utilities.FMatrix4"/> from a <see cref="T:Aspose.ThreeD.Utilities.Matrix4"/> instance.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix4.#ctor(Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4)">
            <summary>
            Constructs matrix from 4 rows.
            </summary>
            <param name="r0">R0.</param>
            <param name="r1">R1.</param>
            <param name="r2">R2.</param>
            <param name="r3">R3.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix4.Concatenate(Aspose.ThreeD.Utilities.FMatrix4)">
            <summary>
            Concatenates the two matrices
            </summary>
            <param name="m2">M2.</param>
            <returns>New matrix4</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix4.op_Multiply(Aspose.ThreeD.Utilities.FMatrix4,Aspose.ThreeD.Utilities.FMatrix4)">
            <summary>
            Concatenate the two matrices
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix4.Concatenate(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Concatenates the two matrices
            </summary>
            <param name="m2">M2.</param>
            <returns>New matrix4</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix4.Transpose">
            <summary>
            Transposes this instance.
            </summary>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix4.Inverse">
            <summary>
            Calculate the inverse matrix of current instance.
            </summary>
            <returns>Inverse matrix4</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FMatrix4.op_Multiply(Aspose.ThreeD.Utilities.FMatrix4,System.Single)">
            <summary>
            Multiply the matrix and double value
            </summary>
            <param name="lhs">Lhs.</param>
            <param name="v">V.</param>
            <returns>Result matrix</returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.FVector2">
            <summary>
             A float vector with two components.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector2.Size">
            <summary>
            Size of FVector2 in bytes
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector2.x">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector2.y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector2"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector2.#ctor(Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector2"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector2.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Aspose.ThreeD.Utilities.FVector2"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector2.op_Subtraction(Aspose.ThreeD.Utilities.FVector2,Aspose.ThreeD.Utilities.FVector2)">
            <summary>
            - Operator overloading
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector2.Equals(Aspose.ThreeD.Utilities.FVector2)">
            <summary>
            Check if two vectors are equal
            </summary>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector2.Equals(System.Object)">
            <summary>
            Check if two vectors are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector2.GetHashCode">
            <summary>
            Gets the hash code of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector2.op_Equality(Aspose.ThreeD.Utilities.FVector2,Aspose.ThreeD.Utilities.FVector2)">
            <summary>
            == Operator overloading
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector2.op_Inequality(Aspose.ThreeD.Utilities.FVector2,Aspose.ThreeD.Utilities.FVector2)">
            <summary>
            != Operator overloading
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.FVector3">
            <summary>
             A float vector with three components.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector3.Size">
            <summary>
            Size of FVector3 in bytes
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector3.Zero">
            <summary>
            The Zero vector.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector3.UnitScale">
            <summary>
            The unit scale vector with all components are all 1
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector3.x">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector3.y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector3.z">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector3"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.#ctor(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector3"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.#ctor(Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Aspose.ThreeD.Utilities.FVector3"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>Normalized vector.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.Cross(Aspose.ThreeD.Utilities.FVector3)">
            <summary>
            Cross product of two vectors
            </summary>
            <param name="rhs">Right hand side value.</param>
            <returns>Cross product of two <see cref="T:Aspose.ThreeD.Utilities.FVector3"/>s.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.op_Addition(Aspose.ThreeD.Utilities.FVector3,Aspose.ThreeD.Utilities.FVector3)">
            <summary>
            + Operator overloading
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.op_UnaryNegation(Aspose.ThreeD.Utilities.FVector3)">
            <summary>
            - Operator overloading
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.op_Subtraction(Aspose.ThreeD.Utilities.FVector3,Aspose.ThreeD.Utilities.FVector3)">
            <summary>
            - Operator overloading
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector3.op_Multiply(Aspose.ThreeD.Utilities.FVector3,System.Single)">
            <summary>
            * Operator overloading
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.FVector4">
            <summary>
             A float vector with four components.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector4.Size">
            <summary>
            Size of FVector4 in bytes
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector4.x">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector4.y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector4.z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.FVector4.w">
            <summary>
            The w component.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.#ctor(Aspose.ThreeD.Utilities.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.FVector4"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.op_Addition(Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4)">
            <summary>
            Operator overloading for +
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.op_Subtraction(Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4)">
            <summary>
             Operator overloading for - (minus)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.op_Multiply(Aspose.ThreeD.Utilities.FVector4,Aspose.ThreeD.Utilities.FVector4)">
            <summary>
            Operator overloading for *
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FVector4.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Aspose.ThreeD.Utilities.FVector4"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.GeometriesGenerator">
            <summary>
            Set of utilities to generate geometries used for debugging internally
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.GeometriesGenerator.CreateBox(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Create a box mesh with specified size
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.FileSystem">
            <summary>
            File system encapsulation.
            Aspose.3D will use this to read/write dependencies.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FileSystem.ReadFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
            <summary>
            Create a stream for reading dependencies.
            </summary>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.FileSystem.WriteFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
            <summary>
            Create a stream for writing dependencies.
            </summary>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.LocalFileSystem">
            <summary>
            The <see cref="T:Aspose.ThreeD.Utilities.LocalFileSystem"/> will maps the read/write operations to local directory.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.LocalFileSystem.#ctor(System.String)">
            <summary>
            Initialize a new <see cref="T:Aspose.ThreeD.Utilities.LocalFileSystem"/> with specified base directory.
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.LocalFileSystem.ReadFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
            <summary>
            Create a stream for reading dependencies.
            </summary>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.LocalFileSystem.WriteFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
            <summary>
            Create a stream for writing dependencies.
            </summary>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.MemoryFileSystem">
            <summary>
            The <see cref="T:Aspose.ThreeD.Utilities.MemoryFileSystem"/> will maps the read/write operations to memory.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.MemoryFileSystem.FileNames">
            <summary>
            File names that in this memory file system.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MemoryFileSystem.GetFileContent(System.String)">
            <summary>
            Returns the raw content of the specified file.
            Throw <see cref="T:System.IO.FileNotFoundException"/> if the specified file is not existing.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MemoryFileSystem.ReadFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
            <summary>
            Create a stream for reading dependencies.
            </summary>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MemoryFileSystem.WriteFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
            <summary>
            Create a stream for writing dependencies.
            </summary>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.DummyFileSystem">
            <summary>
            Read/write operations are dummy operations.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.DummyFileSystem.ReadFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
            <summary>
            Create a stream for reading dependencies.
            </summary>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.DummyFileSystem.WriteFile(System.String,Aspose.ThreeD.Formats.IOConfig)">
            <summary>
            Create a stream for writing dependencies.
            </summary>
            <param name="fileName"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.IndexBuilder`1">
            <summary>
            This is a utility class to build indice from a set of data
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IndexBuilder`1.AddAll(System.Collections.Generic.IList{`0})">
            <summary>
            return the indice list of incoming elements
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VerticeIndexBuilder.AddAll(Aspose.ThreeD.Utilities.Vector4List)">
            <summary>
            return the indice list of incoming elements
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.IntArray">
            <summary>
            Wraps a byte array as int array
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IntArray.CopyTo(Aspose.ThreeD.Utilities.IntArray,System.Int32)">
            <summary>
            Copy the content to new array with specified size
            </summary>
            <param name="dst"></param>
            <param name="elements"></param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.IntList">
            <summary>
            Performance optimized list for accessing ints used by <see cref="T:Aspose.ThreeD.Entities.VertexElement"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IntList.AddRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Add a range of vectors into current list
            </summary>
            <param name="vectors"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IntList.CopyTo(System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Copy elements to specified array 
            </summary>
            <param name="offset">source offset</param>
            <param name="array">destination array</param>
            <param name="arrayIndex">destination offset</param>
            <param name="count">elements to copy</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IntList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove elements in specified range
            </summary>
            <param name="start">Index of the first element to be removed</param>
            <param name="length">Length of the elements to be removed</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IntList.Reverse">
            <summary>
            Reverse the elements in the list
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IntList.ToArray">
            <summary>
            Convert this list to array
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.JSONParser">
            <summary>
            Light-weighted JSON parser.
            Written by Lex Chou
            The JavaScriptSerializer in .net framework only exists in full framework, will cause the Aspose.3D failed to build in client-profile framework
            My implementation is 10x faster than .net implementation.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.JSONWriter">
            <summary>
            SAX-style JSON writer
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.LexerBase.ExpectEOL">
            <summary>
            Expect blank spaces and end of line(cr/lf)
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.LexerBase.TokenEquals(Aspose.ThreeD.Utilities.LexerBase.Token,System.String)">
            <summary>
            Compare the token without allocating memory
            </summary>
            <param name="tok"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.PerlinNoise">
            <summary>
            Perlin Noise generator
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.NumberParser">
            <summary>
            This class parses the StringBuilder into integer/float without allocating extra memory
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.OAP.OAP">
            <summary>
            OAP VM instructions
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.ParseException">
            <summary>
            Exception when Aspose.3D failed to parse the input.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.ParseException.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Utilities.ParseException"/>
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Preprocessor">
            <summary>
            A simple preprocessor with c/c++ preprocessor syntax
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.RawStreamReader">
            <summary>
            Uncached stream reader.
            It provides both text/binary access on stream.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.IReflectionAccessor">
            <summary>
            Interface to encapsulates the field/property accessing.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.IReflectionAccessor.GetAttributes(System.Type)">
            <summary>
            Gets the attribute declared on this field/property
            </summary>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Reflection">
            <summary>
            This class encapsulates the reflection operations, to make it easier to port the Aspose.3D to Java and .net core
            All reflection-enabled code should use this class to eliminate the raw .net reflection API usage.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Reflection.GetProperty(System.Type,System.String)">
            <summary>
            Gets a public property or null if missing
            </summary>
            <param name="type"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Reflection.GetFields(System.Type,System.Boolean)">
            <summary>
            Gets all instance fields, including public and non-public
            </summary>
            <param name="type"></param>
            <param name="instanceFields"> true to return instance fields or static fields will be returned</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Reflection.GetField(System.Type,System.String,System.Boolean)">
            <summary>
            Gets a public field or null if missing
            </summary>
            <param name="type"></param>
            <param name="propName"></param>
            <param name="instanceField"> true to return instance field or static field will be returned</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.DotNetReflection.Accessor.GetAttributes(System.Type)">
            <summary>
            Gets the attribute declared on this field/property
            </summary>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.RelativeRectangle">
            <summary>
            Relative rectangle
            The formula between relative component to absolute value is:
            Scale * (Reference Width) + offset
            So if we want it to represent an absolute value, leave all scale fields zero, and use offset fields instead.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.ScaleX">
            <summary>
            Relative coordinate X
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.ScaleY">
            <summary>
            Relative coordinate Y
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.ScaleWidth">
            <summary>
            Relative width
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.ScaleHeight">
            <summary>
            Relative height
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.OffsetX">
            <summary>
            Gets or sets the offset for coordinate X
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.OffsetY">
            <summary>
            Gets or sets the offset for coordinate Y
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.OffsetWidth">
            <summary>
            Gets or sets the offset for width
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.RelativeRectangle.OffsetHeight">
            <summary>
            Gets or sets the offset for height
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.RelativeRectangle.ToAbsolute(System.Drawing.Size)">
            <summary>
            Convert the relative rectangle to absolute rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.RelativeRectangle.ToAbsolute(System.Drawing.Rectangle)">
            <summary>
            Convert the relative rectangle to absolute rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.RelativeRectangle.FromScale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Utilities.RelativeRectangle"/> with all offset fields zero and scale fields from given parameters.
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="scaleWidth"></param>
            <param name="scaleHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.RelativeRectangle.ToString">
            <summary>Converts the value of this instance to a <see cref="T:System.String" />.</summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.ResourceManager">
            <summary>
            This implementation replaces the builtin one so the compress/encryption mechanism can be shared across java/net and
            compatible with mono/unity(unity doesn't support compressed resource)
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.SceneAccessor">
            <summary>
            This class is used to create extra limits for unlicense use of Aspose.3D
            All formats exporters and importers should use this to access the scene objects
            Ticket: http://nanjing.dynabic.com/jira/browse/THREEDNET-383
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.SGSpatialSort">
            <summary>
            Spatial sort for smoothing groups, used by 3ds/ase/lwo
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.SGSpatialSort.FindPositions(Aspose.ThreeD.Utilities.Vector3,System.Single,Aspose.ThreeD.Utilities.IntList)">
            <summary>
            Returns an iterator for all positions close to the given position.
            </summary>
            <param name="position"></param>
            <param name="radius"></param>
            <param name="results"></param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.StreamTokenizer">
            <summary>
            <see cref="T:Aspose.ThreeD.Utilities.LexerBase"/> is string-based which is not suitable for big file.
            Should remove that and refactor the references to use this
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.StreamTokenizer.IsWhiteSpace(System.Char,System.Boolean)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="includeCRLF">CRLF is also blank space</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.StreamTokenizer.ReadUntil(System.Char)">
            <summary>
            Read text into sb until the specified character is found(will not be in the sb)
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.StreamTokenizer.ReadUntil(System.String)">
            <summary>
            Read text into sb until the specified string is found(will not be in the sb)
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.StreamTokenizer.NextDigits">
            <summary>
            Read Pattern: [0-9]*
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.StreamTokenizer.ReadNumeric">
            <summary>
            Pattern: [-+]\d+(.\d+)?([eE][-+]\d+)?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.StreamTokenizer.Match(System.Char)">
            <summary>
            Drop the next char if it matches the input and return true, otherwise return false and keep the stream unchanged
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.StreamTokenizer.Match(System.String)">
            <summary>
            Drop the next chars if all of them matches the input and return true, otherwise return false and keep the stream unchanged
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.StreamTokenizer.ReadLine(System.Text.StringBuilder)">
            <summary>
            Read the following line, until a EOL reached(all kinds of line separators are supported)
            </summary>
            <param name="sb"></param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.ComposeOrder">
            <summary>
            The order to compose transform matrix
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.ComposeOrder.Append">
            <summary>
            Append the new transform to the chain
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.ComposeOrder.Prepend">
            <summary>
            Prepend the new transform to the chain
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.TransformBuilder">
            <summary>
            The <see cref="T:Aspose.ThreeD.Utilities.TransformBuilder"/> is used to build transform matrix by a chain of transformations.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.TransformBuilder.Matrix">
            <summary>
            Gets or sets the current matrix value
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.TransformBuilder.ComposeOrder">
            <summary>
            Gets or sets the chain compose order.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.#ctor(Aspose.ThreeD.Utilities.Matrix4,Aspose.ThreeD.Utilities.ComposeOrder)">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Utilities.TransformBuilder"/> with initial transform matrix and specified compose order
            </summary>
            <param name="initial"></param>
            <param name="order"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.#ctor(Aspose.ThreeD.Utilities.ComposeOrder)">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Utilities.TransformBuilder"/> with initial identity transform matrix and specified compose order
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Compose(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Append or prepend the argument to internal matrix. 
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Append(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Append the new transform matrix to the transform chain.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Prepend(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Prepend the new transform matrix to the transform chain.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Rearrange(Aspose.ThreeD.Axis,Aspose.ThreeD.Axis,Aspose.ThreeD.Axis)">
            <summary>
            Rearrange the layout of the axis.
            </summary>
            <param name="newX">The new x component source</param>
            <param name="newY">The new y component source</param>
            <param name="newZ">The new z component source</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Scale(System.Double)">
            <summary>
            Chain a scaling transform matrix with a component scaled by s
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Chain a scaling transform matrix
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Scale(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Chain a scale transform
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateDegree(System.Double,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Chain a rotation transform in degree
            </summary>
            <param name="angle">The angle to rotate in degree</param>
            <param name="axis">The axis to rotate</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateRadian(System.Double,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Chain a rotation transform in radian
            </summary>
            <param name="angle">The angle to rotate in radian</param>
            <param name="axis">The axis to rotate</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Rotate(Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Chain a rotation by a quaternion
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateEulerDegree(System.Double,System.Double,System.Double)">
            <summary>
            Chain a rotation by euler angles in degree
            </summary>
            <param name="degX"></param>
            <param name="degY"></param>
            <param name="degZ"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateEulerRadian(System.Double,System.Double,System.Double)">
            <summary>
            Chain a rotation by euler angles in radian
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.RotateEulerRadian(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Chain a rotation by euler angles in radian
            </summary>
            <param name="r"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Chain a translation transform
            </summary>
            <param name="tx"></param>
            <param name="ty"></param>
            <param name="tz"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Translate(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Chain a translation transform
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.TransformBuilder.Reset">
            <summary>
            Reset the transform to identity matrix
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Unmanaged.VirtualAllocator">
            <summary>
            This allocator allocates memory virtually, and keep the size/address of allocated memory aligned
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Unmanaged.VirtualAllocator.Reset">
            <summary>
            Reset all allocations
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Unmanaged.VirtualAllocator.Allocate(Aspose.ThreeD.Utilities.Unmanaged.VirtualAllocator.FreeBlock,System.UInt32,System.UInt32)">
            <summary>
            Allocate memory in the specified free block
            </summary>
            <param name="block"></param>
            <param name="size"></param>
            <param name="alignment"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Unmanaged.VirtualAllocator.Free(System.IntPtr)">
            <summary>
            Free memory
            </summary>
            <param name="ptr"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Unmanaged.VirtualAllocator.Defragments">
            <summary>
            Merge connected spaces
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Unsafe">
            <summary>
            Unsafe operations
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Unsafe.ToByteArray(System.Single[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copy float array to byte array
            </summary>
            <param name="arr"></param>
            <param name="start"></param>
            <param name="len"></param>
            <param name="dst"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Unsafe.Zero(System.IntPtr,System.UInt32)">
            <summary>
            Fill the memory region with zero
            </summary>
            <param name="ptr"></param>
            <param name="size"></param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Vector4List">
            <summary>
            Performance optimized list for accessing <see cref="T:Aspose.ThreeD.Utilities.Vector4"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.#ctor">
            <summary>
            Construct a new <see cref="T:Aspose.ThreeD.Utilities.Vector4List"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.ForPoints">
            <summary>
            Create a new Vector4List used for locations, with default w = 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.ForDirections">
            <summary>
            Create a new Vector4List used for directions, with default w = 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.#ctor(System.Int32,System.Double)">
            <summary>
            Construct a new <see cref="T:Aspose.ThreeD.Utilities.Vector4List"/> with specified capacity
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.#ctor(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4})">
            <summary>
            Construct a new <see cref="T:Aspose.ThreeD.Utilities.Vector4List"/> with default elements
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.IndexOf(Aspose.ThreeD.Utilities.Vector4)">
            <summary>Determines the index of a specific item in the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</summary>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
            <param name="item">The object to locate in the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Insert(System.Int32,Aspose.ThreeD.Utilities.Vector4)">
            <summary>Inserts an item to the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" /> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" /> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Vector4List.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.AddRange(System.Collections.Generic.IList{Aspose.ThreeD.Utilities.Vector4})">
            <summary>
            Add a range of vectors into current list
            </summary>
            <param name="vectors"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.AddRange(Aspose.ThreeD.Utilities.Vector4List)">
            <summary>
            Add a range of vectors into current list
            </summary>
            <param name="vectors"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.AddRange(Aspose.ThreeD.Utilities.Vector4List,System.Boolean)">
            <summary>
            Add the range of vectors into current list in reversed orders
            </summary>
            <param name="vectors"></param>
            <param name="reverse"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.AddRange(System.Collections.Generic.IEnumerable{Aspose.ThreeD.Utilities.Vector4})">
            <summary>
            Add a range of vectors into current list
            </summary>
            <param name="vectors"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Add(System.Double,System.Double,System.Double)">
            <summary>Adds an item to the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</summary>
            <param name="x">The x component of the vector to be added to the list</param>
            <param name="y">The y component of the vector to be added to the list</param>
            <param name="z">The z component of the vector to be added to the list</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Add(System.Double,System.Double,System.Double,System.Double)">
            <summary>Adds an item to the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</summary>
            <param name="x">The x component of the vector to be added to the list</param>
            <param name="y">The y component of the vector to be added to the list</param>
            <param name="z">The z component of the vector to be added to the list</param>
            <param name="w">The w component of the vector to be added to the list</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Add(Aspose.ThreeD.Utilities.Vector3)">
            <summary>Adds an item to the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</summary>
            <param name="item">The object to add to the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Add(Aspose.ThreeD.Utilities.Vector4)">
            <summary>Adds an item to the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</summary>
            <param name="item">The object to add to the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Clear">
            <summary>Removes all items from the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Contains(Aspose.ThreeD.Utilities.Vector4)">
            <summary>Determines whether the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" /> contains a specific value.</summary>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.CopyTo(Aspose.ThreeD.Utilities.Vector4[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" /> to an array, starting at a particular array index.</summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Remove(Aspose.ThreeD.Utilities.Vector4)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</summary>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</returns>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Vector4List.Count">
            <summary>Gets the number of elements contained in the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</summary>
            <returns>The number of elements contained in the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" />.</returns>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Vector4List.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" /> is read-only.</summary>
            <returns>true if the <see cref="T:Aspose.ThreeD.Utilities.Vector4List" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Clone">
            <summary>
            Clone the current list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.ToArray">
            <summary>
            Convert this list to array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.ToIndices(Aspose.ThreeD.Utilities.VerticeIndexBuilder)">
            <summary>
            Map vertices to indices using cached indices
            </summary>
            <param name="controlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Reverse">
            <summary>
            Reverse the vertices in the list
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse the vertices in the list
            </summary>
            <param name="offset">The index of first vertex to reverse</param>
            <param name="length">The number of vertices to reverse</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.ApplyRotation(System.Int32,Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Apply the rotation on specified vector(as vector3)
            </summary>
            <param name="i"></param>
            <param name="quat"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.ApplyTransform(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Apply the transform on the whole vectors
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.ApplyTransform(Aspose.ThreeD.Utilities.Matrix4,System.Int32,System.Int32)">
            <summary>
            Apply the transform on the whole vectors
            </summary>
            <param name="transform"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4List.Vector3At(System.Int32)">
            <summary>
            Return the vector3 at specified position, optimal for java ported.
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Vector4Compactor">
            <summary>
            This is used to eliminate the duplicated vectors
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.VersionTracker">
            <summary>
            Internal utility to track version changes.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VersionTracker.Modified">
            <summary>
            Owner's state changed, modify the version state
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.SemanticAttribute">
            <summary>
            Allow user to use their own structure for static declaration of <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.SemanticAttribute.#ctor(Aspose.ThreeD.Utilities.VertexFieldSemantic)">
            <summary>
            Initialize a <see cref="T:Aspose.ThreeD.Utilities.SemanticAttribute"/>
            </summary>
            <param name="semantic">The semantic of the struct's field.</param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Vertex">
            <summary>
            Vertex reference, used to access the raw vertex in <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.ToString">
            <summary>
            Gets the string representation of <see cref="T:Aspose.ThreeD.Utilities.Vertex"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.CompareTo(Aspose.ThreeD.Utilities.Vertex)">
            <summary>
            Compare the vertex with another vertex instance
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.Equals(System.Object)">
            <summary>
            Check if two objects are equal.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.GetHashCode">
            <summary>
            Gets the hash code of the vertex
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadVector4(Aspose.ThreeD.Utilities.VertexField)">
            <summary>
            Read the vector4 field
            </summary>
            <param name="field">The field with a Vector4/FVector4 data type</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadFVector4(Aspose.ThreeD.Utilities.VertexField)">
            <summary>
            Read the vector4 field
            </summary>
            <param name="field">The field with a Vector4/FVector4 data type</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadVector3(Aspose.ThreeD.Utilities.VertexField)">
            <summary>
            Read the vector3 field
            </summary>
            <param name="field">The field with a Vector3/FVector3 data type</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadFVector3(Aspose.ThreeD.Utilities.VertexField)">
            <summary>
            Read the vector3 field
            </summary>
            <param name="field">The field with a Vector3/FVector3 data type</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadVector2(Aspose.ThreeD.Utilities.VertexField)">
            <summary>
            Read the vector2 field
            </summary>
            <param name="field">The field with a Vector2/FVector2 data type</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadFVector2(Aspose.ThreeD.Utilities.VertexField)">
            <summary>
            Read the vector2 field
            </summary>
            <param name="field">The field with a Vector2/FVector2 data type</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadDouble(Aspose.ThreeD.Utilities.VertexField)">
            <summary>
            Read the double field
            </summary>
            <param name="field">The field with a float/double compatible data type</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.ReadFloat(Aspose.ThreeD.Utilities.VertexField)">
            <summary>
            Read the float field
            </summary>
            <param name="field">The field with a float/double compatible data type</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vertex.SetFloat(Aspose.ThreeD.Utilities.VertexField,System.Double,System.Int32)">
            <summary>
            Set the float at specified offset(measured in element not bytes)
            </summary>
            <param name="field"></param>
            <param name="v"></param>
            <param name="baseOffset"></param>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.VertexDeclaration">
            <summary>
            The declaration of a custom defined vertex's structure
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.VertexDeclaration.Sealed">
            <summary>
            A <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration"/> will be sealed when its been used by <see cref="T:Aspose.ThreeD.Entities.TriMesh`1"/> or <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>, no more modifications is allowed.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.VertexDeclaration.Count">
            <summary>
            Gets the count of all fields defined in this <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.VertexDeclaration.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Aspose.ThreeD.Utilities.VertexField"/> by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.Clear">
            <summary>
            Clear all fields.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.AddField(Aspose.ThreeD.Utilities.VertexFieldDataType,Aspose.ThreeD.Utilities.VertexFieldSemantic,System.Int32)">
            <summary>
            Add a new vertex field
            </summary>
            <param name="dataType">The data type of the vertex field</param>
            <param name="semantic">How will this field used for</param>
            <param name="index">The index for same field semantic</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.FromType``1">
            <summary>
            Construct a <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration"/> directly from a struct type.
            Each instance field shall be annotated with <see cref="T:Aspose.ThreeD.Utilities.SemanticAttribute"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.FromGeometry(Aspose.ThreeD.Entities.Geometry,System.Boolean)">
            <summary>
            Create a <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration"/> based on a <see cref="T:Aspose.ThreeD.Entities.Geometry"/>'s layout.
            </summary>
            <param name="geometry"></param>
            <param name="useFloat">Use float instead of double type</param>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.VertexDeclaration.Size">
            <summary>
            The size in byte of the vertex structure.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.CompareTo(Aspose.ThreeD.Utilities.VertexDeclaration)">
            <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.ToString">
            <summary>
            String representation of <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.GetHashCode">
            <summary>Returns the hash code for this string.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a <see cref="T:Aspose.ThreeD.Utilities.VertexDeclaration" /> object, have the same value.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexDeclaration.GetEnumerator">
            <summary>
            Gets an enumerator to walk through all vertex fields in this instance.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.VertexFieldSemantic">
            <summary>
            The semantic of the vertex field
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Position">
            <summary>
            Position data
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Binormal">
            <summary>
            Binormal vector
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Normal">
            <summary>
            Normal vector
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Tangent">
            <summary>
            Tangent vector
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.UV">
            <summary>
            Texture UV coordinate
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.VertexColor">
            <summary>
            Vertex color
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.VertexCrease">
            <summary>
            Vertex crease
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.EdgeCrease">
            <summary>
            Edge crease
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.UserData">
            <summary>
            User data, usually for application-specific purpose
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Visibility">
            <summary>
            Visibility for components
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Specular">
            <summary>
            Specular colors
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldSemantic.Weight">
            <summary>
            Blend weights
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.VertexField">
            <summary>
            Vertex's field memory layout description.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexField.GetHashCode">
            <summary>Returns the hash code for this string.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexField.Equals(System.Object)">
            <summary>Determines whether this instance and a specified object, which must also be a <see cref="T:Aspose.ThreeD.Utilities.VertexField" /> object, have the same value.</summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.VertexField.DataType">
            <summary>
            Data type of this field.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.VertexField.Semantic">
            <summary>
            The usage semantic of this field.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.VertexField.Index">
            <summary>
            Index of this field in the vertex's layout with same semantic.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.VertexField.Offset">
            <summary>
            The offset in bytes of this field.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.VertexField.Size">
            <summary>
            The size in bytes of this field
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexField.CompareTo(Aspose.ThreeD.Utilities.VertexField)">
            <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.VertexField.ToString">
            <summary>
            Gets the string representation of <see cref="T:Aspose.ThreeD.Utilities.VertexField"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.VertexFieldDataType">
            <summary>
            Vertex field's data type
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Float">
            <summary>
            Type of <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.FVector2">
            <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.FVector2"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.FVector3">
            <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.FVector3"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.FVector4">
            <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.FVector4"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Double">
            <summary>
            Type of <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Vector2">
            <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.Vector2"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Vector3">
            <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.Vector3"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Vector4">
            <summary>
            Type of <see cref="T:Aspose.ThreeD.Utilities.Vector4"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Int8">
            <summary>
            Type of <see cref="T:System.Byte"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Int16">
            <summary>
            Type of <see cref="T:System.Int16"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Int32">
            <summary>
            Type of <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.VertexFieldDataType.Int64">
            <summary>
            Type of <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.NameGenerator">
            <summary>
            Used in exporter, to make sure to generate a unique name for a set of node/entity or for any other objects
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.NamespaceDoc">
            <summary>
            All utility classes are defined in this namespace.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Time">
            <summary>
            Time is just used to represent a moment, 
            to represent a period of time, TimeSpan should be used,
            or to represent a date time, DateTime should be used
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.ZERO">
            <summary>
            zero time.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.EPSILON">
            <summary>
            minimum increment of time
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.MINFINITY">
            <summary>
            minus infinity time
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.INFINITY">
            <summary>
            infinity time
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.FIX_DEN">
            <summary>
            fix time
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.MILLISECOND">
            <summary>
            One millisecond.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.SECOND">
            <summary>
            One second
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.MINUTE">
            <summary>
            One minute
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.HOUR">
            <summary>
            One hour
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.DAY">
            <summary>
            One day
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Time.NTSC_FIELD">
            Frame @ 30 Hz
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Distance">
            <summary>
            Distance class
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Distance.Value">
            <summary>
            Gets or sets the distance value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Distance.Unit">
            <summary>
            Gets or sets the measurement unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Distance.Create(System.Single,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Distance"/> struct.
            </summary>
            <param name="value">Value.</param>
            <param name="unit">Unit.</param>
            <returns>New distance</returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Limits">
            <summary>
            Limits defines a limit range for one transform component, either translation, rotation or scaling. 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.MathUtils">
            <summary>
            A set of useful mathematical utilities.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MathUtils.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamp value to range [min, max]
            </summary>
            <param name="val">Value to clamp.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>The value between [min, max]</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToDegree(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Convert a <see cref="T:Aspose.ThreeD.Utilities.Vector3"/> from radian to degree.
            </summary>
            <param name="radian">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToRadian(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Convert a <see cref="T:Aspose.ThreeD.Utilities.Vector3"/> from degree to radian
            </summary>
            <param name="degree">The degree value.</param>
            <returns>The radian value.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToDegree(System.Single)">
            <summary>
            Convert a number from radian to degree
            </summary>
            <param name="radian">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToDegree(System.Double)">
            <summary>
            Convert a number from radian to degree
            </summary>
            <param name="radian">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToDegree(System.Double,System.Double,System.Double)">
            <summary>
            Convert a number from radian to degree
            </summary>
            <param name="x">The x component in radian value.</param>
            <param name="y">The y component in radian value.</param>
            <param name="z">The z component in radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToRadian(System.Single)">
            <summary>
            Convert a number from degree to radian
            </summary>
            <param name="degree">The degree value.</param>
            <returns>The radian value.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToRadian(System.Double)">
            <summary>
            Convert a number from degree to radian
            </summary>
            <param name="degree">The degree value.</param>
            <returns>The radian value.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.MathUtils.ToRadian(System.Double,System.Double,System.Double)">
            <summary>
            Convert a vector from degree to radian
            </summary>
            <param name="x">The x component in degree value.</param>
            <param name="y">The y component in degree value.</param>
            <param name="z">The z component in degree value.</param>
            <returns>The radian value.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix3.Transpose">
            <summary>
            Transposes this instance.
            </summary>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix3.op_Multiply(Aspose.ThreeD.Utilities.Matrix3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Multiply the matrix and vector3
            </summary>
            <param name="lhs">Lhs.</param>
            <param name="v">V.</param>
            <returns>Result matrix</returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Matrix4">
            <summary>
            4x4 matrix implementation.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m00">
            <summary>
            The m00.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m01">
            <summary>
            The m01.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m02">
            <summary>
            The m02.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m03">
            <summary>
            The m03.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m10">
            <summary>
            The m10.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m11">
            <summary>
            The m11.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m12">
            <summary>
            The m12.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m13">
            <summary>
            The m13.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m20">
            <summary>
            The m20.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m21">
            <summary>
            The m21.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m22">
            <summary>
            The m22.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m23">
            <summary>
            The m23.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m30">
            <summary>
            The m30.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m31">
            <summary>
            The m31.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m32">
            <summary>
            The m32.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Matrix4.m33">
            <summary>
            The m33.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.#ctor(Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Constructs matrix from 4 rows.
            </summary>
            <param name="r0">R0.</param>
            <param name="r1">R1.</param>
            <param name="r2">R2.</param>
            <param name="r3">R3.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Matrix4"/> struct.
            </summary>
            <param name="m00">M00.</param>
            <param name="m01">M01.</param>
            <param name="m02">M02.</param>
            <param name="m03">M03.</param>
            <param name="m10">M10.</param>
            <param name="m11">M11.</param>
            <param name="m12">M12.</param>
            <param name="m13">M13.</param>
            <param name="m20">M20.</param>
            <param name="m21">M21.</param>
            <param name="m22">M22.</param>
            <param name="m23">M23.</param>
            <param name="m30">M30.</param>
            <param name="m31">M31.</param>
            <param name="m32">M32.</param>
            <param name="m33">M33.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Matrix4"/> struct.
            </summary>
            <param name="m">M.</param>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Matrix4.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
            <value>The identity.</value>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Concatenate(Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Concatenates the two matrices
            </summary>
            <param name="m2">M2.</param>
            <returns>New matrix4</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Transpose">
            <summary>
            Transposes this instance.
            </summary>
            <returns>The transposed matrix.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>Normalize matrix4</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Inverse">
            <summary>
            Inverses this instance.
            </summary>
            <returns>Inverse matrix4</returns>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Matrix4.Determinant">
            <summary>
            Gets the determinant of the matrix.
            </summary>
            <value>The determinant.</value>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.op_Multiply(Aspose.ThreeD.Utilities.Matrix4,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Multiply the two matrices
            </summary>
            <param name="lhs">Lhs.</param>
            <param name="rhs">Rhs.</param>
            <returns>Result matrix</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.op_Multiply(Aspose.ThreeD.Utilities.Matrix4,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Multiply the matrix and vector3
            </summary>
            <param name="lhs">Lhs.</param>
            <param name="v">V.</param>
            <returns>Result matrix</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.SetTRS(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Initializes the matrix with translation/rotation/scale
            </summary>
            <param name="translation">Translation.</param>
            <param name="rotation">Euler angles for rotation, fields are in degree.</param>
            <param name="scale">Scale.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.op_Multiply(Aspose.ThreeD.Utilities.Matrix4,Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Multiply the matrix and vector4
            </summary>
            <param name="lhs">Lhs.</param>
            <param name="v">V.</param>
            <returns>Result matrix</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.op_Multiply(Aspose.ThreeD.Utilities.Matrix4,System.Double)">
            <summary>
            Multiply the matrix and double value
            </summary>
            <param name="lhs">Lhs.</param>
            <param name="v">V.</param>
            <returns>Result matrix</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.ToArray">
            <summary>
            Converts matrix to array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Decompose(Aspose.ThreeD.Utilities.Vector3@,Aspose.ThreeD.Utilities.Vector3@,Aspose.ThreeD.Utilities.Quaternion@)">
            <summary>
            Decompose the transformation matrix.
            </summary>
            <param name="translation">The translation.</param>
            <param name="scaling">The scaling.</param>
            <param name="rotation">The rotation.</param>
            <returns>True if successed.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Matrix4"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Matrix4"/>.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Translate(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Creates a matrix that translates along the x-axis, the y-axis and the z-axis 
            </summary>
            <param name="t">Translate offset</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix that translates along the x-axis, the y-axis and the z-axis 
            </summary>
            <param name="tx">X-coordinate offset</param>
            <param name="ty">Y-coordinate offset</param>
            <param name="tz">Z-coordinate offset</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Scale(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, the y-axis and the z-axis.
            </summary>
            <param name="s">Scaling factories applies to the x-axis, the y-axis and the z-axis</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Scale(System.Double)">
            <summary>
            Creates a matrix that scales along the x-axis, the y-axis and the z-axis.
            </summary>
            <param name="s">Scaling factories applies to all axises</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix that scales along the x-axis, the y-axis and the z-axis.
            </summary>
            <param name="sx">Scaling factories applies to the x-axis</param>
            <param name="sy">Scaling factories applies to the y-axis</param>
            <param name="sz">Scaling factories applies to the z-axis</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.RotateFromEuler(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Create a rotation matrix from euler angle
            </summary>
            <param name="eul">Rotation in radian</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.RotateFromEuler(System.Double,System.Double,System.Double)">
            <summary>
            Create a rotation matrix from euler angle
            </summary>
            <param name="rx">Rotation in x axis in radian</param>
            <param name="ry">Rotation in y axis in radian</param>
            <param name="rz">Rotation in z axis in radian</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Rotate(System.Double,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Create a rotation matrix by rotation angle and axis
            </summary>
            <param name="angle">Rotate angle in radian</param>
            <param name="axis">Rotation axis</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.Rotate(Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Create a rotation matrix from a quaternion
            </summary>
            <param name="q">Rotation quaternion</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.NoTrans">
            Return the 3x3 part of the matrix to exclude the translation part
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Matrix4.IsIdentity">
            <summary>
            Check if the matrix is identity matrix
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Quaternion">
            <summary>
            Quaternion is usually used to perform rotation in computer graphics.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Quaternion.Identity">
            <summary>
            The Identity quaternion.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Quaternion.w">
            <summary>
            The w component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Quaternion.x">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Quaternion.y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Quaternion.z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Quaternion"/> class.
            </summary>
            <param name="w">w component of the quaternion</param>
            <param name="x">x component of the quaternion</param>
            <param name="y">y component of the quaternion</param>
            <param name="z">z component of the quaternion</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.Equals(System.Object)">
            <summary>
            Check if two quaternions equals
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all components are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.GetHashCode">
            <summary>
            Gets the hash code of Quaternion
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Utilities.Quaternion"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.Conjugate">
            <summary>
            Returns a conjugate quaternion of current quaternion
            </summary>
            <returns>The conjugate quaternion.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.Inverse">
            <summary>
            Returns a inverse quaternion of current quaternion
            </summary>
            <returns>Inversed quaternion.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.Dot(Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Dots product
            </summary>
            <param name="q">The quaternion</param>
            <returns>Dot value</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.EulerAngles">
            <summary>
            Converts quaternion to rotation represented by euler angles
            All components are in radian
            </summary>
            <returns>Result vector</returns>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Quaternion.Length">
            <summary>
            Gets the length of the quaternion
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.Normalize">
            <summary>
            Normalize the quaternion
            </summary>
            <returns>Normalized quaternion.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.ToAngleAxis(System.Double@,Aspose.ThreeD.Utilities.Vector3@)">
            <summary>
            Decompose the quaternion to angle and axis
            </summary>
            <param name="angle">The angle to rotate, in radian.</param>
            <param name="axis">The axis that rotates around.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.Concat(Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Concatenate two quatrenions
            </summary>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.FromAngleAxis(System.Double,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Creates a quaternion around given axis and rotate in clockwise 
            </summary>
            <param name="a">Clockwise rotation in radian</param>
            <param name="axis">Axis</param>
            <returns>Created quaternion</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.FromRotation(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Creates a quaternion that rotate from original to destinal direction
            </summary>
            <param name="orig">Original direction</param>
            <param name="dest">Destinal direction</param>
            <returns>Created quaternion</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.FromRotation(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Creates a quaternion that rotate from original to destinal direction
            </summary>
            <param name="orig">Original direction</param>
            <param name="dest">Destinal direction</param>
            <param name="rotationAxis">The axis to rotate</param>
            <returns>Created quaternion</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.FromEulerAngle(System.Double,System.Double,System.Double)">
            <summary>
            Creates quaternion from given euler angle
            </summary>
            <param name="pitch">Pitch in radian</param>
            <param name="yaw">Yaw in radian</param>
            <param name="roll">Roll in radian</param>
            <returns>Created quaternion</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.FromEulerAngle(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Creates quaternion from given euler angle
            </summary>
            <param name="eulerAngle">Euler angle in radian</param>
            <returns>Created quaternion</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.ToMatrix(Aspose.ThreeD.Utilities.Matrix3@)">
            <summary>
            Convert the rotation presented by quaternion to transform matrix.
            </summary>
            <returns>The matrix representation of current quaternion.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.ToMatrix">
            <summary>
            Convert the rotation presented by quaternion to transform matrix.
            </summary>
            <returns>The matrix representation of current quaternion.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Addition(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Operator overloading for +
            </summary>
            <param name="lhs">Left quaternion</param>
            <param name="rhs">Right quaternion</param>
            <returns>Result quaternion</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Division(Aspose.ThreeD.Utilities.Quaternion,System.Double)">
            <summary>
            Operator overloading for /
            </summary>
            <param name="lhs">Left quaternion</param>
            <param name="rhs">Right quaternion</param>
            <returns>Result quaternion</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Quaternion,System.Double)">
            <summary>
            Operator overloading for *
            </summary>
            <param name="lhs">Left quaternion</param>
            <param name="rhs">Right quaternion</param>
            <returns>Result quaternion</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Operator overloading for *
            </summary>
            <param name="lhs">Left quaternion</param>
            <param name="rhs">Right quaternion</param>
            <returns>Result quaternion</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Operator overloading for *
            </summary>
            <param name="q">The rotation quaternion</param>
            <param name="v">Vector to rotate</param>
            <returns>Rotated vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Operator overloading for *
            </summary>
            <param name="q">The rotation quaternion</param>
            <param name="v">Vector to rotate</param>
            <returns>Rotated vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.ToString">
            <summary>
            Gets the representation of quaternion in string
            </summary>
            <returns>Object string</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Multiply(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Operator overloading for *
            </summary>
            <param name="v">The rotation quaternion</param>
            <param name="q">Vector to rotate</param>
            <returns>Rotated vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Equality(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Equal operator for quaternion
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>True if all components are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.op_Inequality(Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Not-equal operator for quaternion
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>True if two quaternions are not equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Quaternion.Interpolate(System.Single,Aspose.ThreeD.Utilities.Quaternion,Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Populates this quaternion with the interpolated value between the given quaternion arguments for a t between from and to.
            </summary>
            <param name="t">The coefficient to interpolate.</param>
            <param name="from">Source quaternion.</param>
            <param name="to">Target quaternion.</param>
            <returns>The interpolated quaternion.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Transforms">
            <summary>
            Commonly-used transform matrix
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Transforms.HandFlipTransform">
            <summary>
            Transform from (x, y, z) to (-x, z, y)
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Translate(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Creates a translation matrix 
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Creates a translation matrix 
            </summary>
            <param name="tx"></param>
            <param name="ty"></param>
            <param name="tz"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Scale(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Create a scale matrix
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Scale(System.Double)">
            <summary>
            Create a scale matrix
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Create a scale matrix
            </summary>
            <param name="sx"></param>
            <param name="sy"></param>
            <param name="sz"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.RotateFromEuler(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Create a rotation matrix from euler angle
            </summary>
            <param name="eul"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.RotateFromEuler(System.Double,System.Double,System.Double)">
            <summary>
            Create a rotation matrix from euler angle
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.PerspectiveFov(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculate perspective projection matrix in right hand system
            </summary>
            <param name="fov"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="nearPlane"></param>
            <param name="farPlane"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Rotate(System.Double,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Create a rotation matrix by rotation angle and axis
            </summary>
            <param name="angle">Rotate angle in radian</param>
            <param name="axis">Rotation axis</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Rotate(Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Create a rotation matrix from a quaternion
            </summary>
            <param name="rotate"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.LookAt(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Create a right handed look at matrix.
            </summary>
            <param name="eye"></param>
            <param name="target"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Decompose(Aspose.ThreeD.Utilities.Matrix4,Aspose.ThreeD.Utilities.Vector3@,Aspose.ThreeD.Utilities.Vector3@,Aspose.ThreeD.Utilities.Quaternion@)">
            <summary>
            Decompose the matrix into its component parts
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Transform(Aspose.ThreeD.Utilities.Vector4List,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Transform set of vectors with given matrix
            </summary>
            <param name="vectors"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Transform(Aspose.ThreeD.Utilities.Vector4[],System.Int32,System.Int32,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Transform set of vectors with given matrix
            </summary>
            <param name="vectors"></param>
            <param name="start">Start index of the vectors</param>
            <param name="length">Number of elements to transform</param>
            <param name="transform">Transform matrix to apply</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Transform(Aspose.ThreeD.Utilities.ArrayList{Aspose.ThreeD.Utilities.Vector3},Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Transform set of vectors with given matrix
            </summary>
            <param name="vectors"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Transform(Aspose.ThreeD.Utilities.Vector3[],System.Int32,System.Int32,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Transform set of vectors with given matrix
            </summary>
            <param name="vectors"></param>
            <param name="start">Start index of the vectors</param>
            <param name="length">Number of elements to transform</param>
            <param name="transform">Transform matrix to apply</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Transform(Aspose.ThreeD.Utilities.Vector3[],Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Transform set of vectors with given matrix
            </summary>
            <param name="vectors"></param>
            <param name="transform"></param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Transforms.Recompose(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Quaternion)">
            <summary>
            Recompose the translation/scaling/rotation to a matrix
            </summary>
            <param name="translate"></param>
            <param name="scale"></param>
            <param name="rotate"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.UnclosableStream">
            <summary>
            Aspose.3D will not close the stream passed to <see cref="M:Aspose.ThreeD.Scene.Open(System.IO.Stream,System.Threading.CancellationToken)"/> nor <see cref="M:Aspose.ThreeD.Scene.Save(System.IO.Stream,Aspose.ThreeD.FileFormat,System.Threading.CancellationToken)"/>
            But it breaks SonarQube's rule, this delegate class will make SonarQube happier.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Vector2">
            <summary>
             A vector with two components.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector2.x">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector2.y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector2"/> struct.
            </summary>
            <param name="s">S.</param>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Vector2.U">
            <summary>
            Gets or sets the U component if the <see cref="T:Aspose.ThreeD.Utilities.Vector2"/> is used as a mapping coordinate.
            It's an alias of x component.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Vector2.V">
            <summary>
            Gets or sets the V component if the <see cref="T:Aspose.ThreeD.Utilities.Vector2"/> is used as a mapping coordinate.
            It's an alias of y component.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector2"/> struct.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.Dot(Aspose.ThreeD.Utilities.Vector2)">
             <summary>
             Gets the dot product of two vectors
             </summary>
             <param name="rhs">Right hand side value.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Vector2.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Vector2.Length2">
            <summary>
            Gets the length * length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.IsApproximately(Aspose.ThreeD.Utilities.Vector2,System.Double)">
            <summary>
            Check if two <see cref="T:Aspose.ThreeD.Utilities.Vector2"/> instances are approximately equals.
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Addition(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Addition operator for Vector2
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>The result of addition.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Subtraction(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Substraction operator for Vector2
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>The result of substraction.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Division(Aspose.ThreeD.Utilities.Vector2,System.Double)">
            <summary>
            Division operator for Vector2
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>The result of division.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Multiply(Aspose.ThreeD.Utilities.Vector2,System.Double)">
            <summary>
            Multiply operator for Vector2
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>The result of multiply.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Multiply(System.Double,Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Multiply operator for Vector2
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>The result of multiply.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Equality(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Equal operator for Vector2
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>True if all components are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.op_Inequality(Aspose.ThreeD.Utilities.Vector2,Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Not-equal operator for Vector2
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>True if two vectors are not equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.Equals(Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Check if two vector2 equals
            </summary>
            <param name="rhs">The right hand side value.</param>
            <returns>True if all components are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.GetHashCode">
            <summary>
            Gets the hash code of Vector2
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Utilities.Vector2"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.Equals(System.Object)">
            <summary>
            Check if two vector2 equals
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if all components are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector2"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector2"/>.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.Cross(Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Cross product of two vectors
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>Normalized vector.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector2.CompareTo(Aspose.ThreeD.Utilities.Vector2)">
            <summary>
            Compare current vector to another instance.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Vector3">
            <summary>
             A vector with three components.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector3.x">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector3.y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector3.z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector3"/> struct.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector3"/> struct.
            </summary>
            <param name="color">Color.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector3"/> struct.
            </summary>
            <param name="v">V.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.#ctor(Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector3"/> struct.
            </summary>
            <param name="vec4">Vec4.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.Equals(System.Object)">
            <summary>
            Check if two vector3 equals
            </summary>
            <param name="obj">The object to check equality.</param>
            <returns>True if all components are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.GetHashCode">
            <summary>
            Gets the hash code of Vector3
            </summary>
            <returns>The hash code of the <see cref="T:Aspose.ThreeD.Utilities.Vector3"/></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.Dot(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Gets the dot product of two vectors
            </summary>
            <param name="rhs">Right hand side value.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.Normalize">
            <summary>
            Normalizes this instance.
            </summary>
            <returns>Normalized vector.</returns>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Vector3.Length2">
            <summary>
            Gets the square of the length.
            </summary>
            <value>The length2.</value>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.IsApproximately(Aspose.ThreeD.Utilities.Vector3,System.Double)">
            <summary>
            Check if two <see cref="T:Aspose.ThreeD.Utilities.Vector3"/> instances are approximately equals.
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Utilities.Vector3.Length">
            <summary>
            Gets the length of this vector.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.Sin">
            <summary>
            Calculates sine on each component
            </summary>
            <returns>Calculated <see cref="T:Aspose.ThreeD.Utilities.Vector3"/>.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.Cos">
            <summary>
            Calculates cosine on each component
            </summary>
            <returns>Calculated <see cref="T:Aspose.ThreeD.Utilities.Vector3"/>.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.Cross(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Cross product of two vectors
            </summary>
            <param name="rhs">Right hand side value.</param>
            <returns>Cross product of two <see cref="T:Aspose.ThreeD.Utilities.Vector3"/>s.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.Cross(System.Double,System.Double,System.Double)">
            <summary>
            Cross product of two vectors
            </summary>
            <returns>Cross product of two <see cref="T:Aspose.ThreeD.Utilities.Vector3"/>s.</returns>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector3.Origin">
            <summary>
            Gets the origin position.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector3.UnitScale">
            <summary>
            Gets the unit scale vector.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector3.XAxis">
            <summary>
            Gets the X axis.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector3.YAxis">
            <summary>
            Gets the Y axis.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector3.ZAxis">
            <summary>
            Gets the Z axis.
            </summary>
            <value>The Z axis.</value>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.op_UnaryNegation(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Operator overloading for -
            </summary>
            <param name="v">The origin vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.GetRotationTo(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Gets the shortest arc quaternion to rotate this vector to the destination vector.
            </summary>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Subtraction(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
             Operator overloading for - (minus)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Addition(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Operator overloading for +
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Multiply(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Operator overloading for *
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Multiply(System.Double,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Operator overloading for *
            </summary>
            <param name="lhs">The left scalar</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Multiply(Aspose.ThreeD.Utilities.Vector3,System.Double)">
            <summary>
             Operator overloading for *
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right double value</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Division(Aspose.ThreeD.Utilities.Vector3,System.Double)">
            <summary>
             Operator overloading for /
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right double value</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Equality(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Equal operator for Vector3
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>True if all components are identically equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.op_Inequality(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Not-equal operator for Vector3
            </summary>
            <param name="lhs">Left hand side value.</param>
            <param name="rhs">Right hand side value.</param>
            <returns>True if two vectors are not equal.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.Set(System.Double,System.Double,System.Double)">
            <summary>
            Sets the x/y/z component in one call.
            </summary>
            <param name="newX">The x component.</param>
            <param name="newY">The y component.</param>
            <param name="newZ">The z component.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector3"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector3"/>.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.AngleBetween(Aspose.ThreeD.Utilities.Vector3,Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Calculate the inner angle between two direction
            Two direction can be non-normalized vectors
            </summary>
            <param name="dir">The direction vector to compare with</param>
            <param name="up">The up vector of the two direction's shared plane</param>
            <returns>inner angle in radian</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.AngleBetween(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Calculate the inner angle between two direction
            Two direction can be non-normalized vectors
            </summary>
            <param name="dir">The direction vector to compare with</param>
            <returns>inner angle in radian</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector3.CompareTo(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Compare current vector to another instance.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.Vector4">
            <summary>
             A vector with four components.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector4.x">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector4.y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector4.z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.Vector4.w">
            <summary>
            The w component.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4"/> struct.
            </summary>
            <param name="color">Color.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(Aspose.ThreeD.Utilities.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4"/> struct.
            </summary>
            <param name="vec">Vec.</param>
            <param name="w">The width.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(Aspose.ThreeD.Utilities.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4"/> struct.
            </summary>
            <param name="vec">Vec.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4"/> struct.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.Vector4"/> struct.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
            <param name="w">The width.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.op_Addition(Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Operator overloading for +
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.op_Subtraction(Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4)">
            <summary>
             Operator overloading for - (minus)
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.op_Multiply(Aspose.ThreeD.Utilities.Vector4,Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Operator overloading for *
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right vector</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.op_Multiply(Aspose.ThreeD.Utilities.Vector4,System.Double)">
            <summary>
             Operator overloading for *
            </summary>
            <param name="lhs">The left vector</param>
            <param name="rhs">The right double value</param>
            <returns>Result vector</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.Set(System.Double,System.Double,System.Double)">
            <summary>
            Sets vector's xyz components at a time, w will be set to 1
            </summary>
            <param name="newX">New X component.</param>
            <param name="newY">New Y component.</param>
            <param name="newZ">New Z component.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.Equals(System.Object)">
            <summary>
            Check if two vectors are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.GetHashCode">
            <summary>
            Gets the hash code of this vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets vector's all components at a time 
            </summary>
            <param name="newX">New X component.</param>
            <param name="newY">New Y component.</param>
            <param name="newZ">New Z component.</param>
            <param name="newW">New W component.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector4"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Aspose.ThreeD.Utilities.Vector4"/>.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.Vector4.CompareTo(Aspose.ThreeD.Utilities.Vector4)">
            <summary>
            Compare current vector to another instance.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.BoolVector3">
            <summary>
            A boolean vector3, usually used as a property switch for each dimension
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoolVector3.x">
            <summary>
            Condition for x axis
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoolVector3.y">
            <summary>
            Condition for y axis
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Utilities.BoolVector3.z">
            <summary>
            Condition for z axis
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoolVector3.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Utilities.BoolVector3"/> struct.
            </summary>
            <param name="val">If set to true value.</param>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.BoolVector3.op_Implicit(System.Boolean)~Aspose.ThreeD.Utilities.BoolVector3">
            <summary>>
            Implicitly convert boolean variable to boolean vector
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.EnumParser`1">
            <summary>
            Parse enum by its custom name defined by NameAttribute or get the name by field
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.RemoveThisInAttribute">
            <summary>
            Warn the message in specified version
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.XmlStreamReader.ReadContentAsString">
            <summary>
            Read element content as string and skip the rest end element(if has)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.ZipReader.IsZipArchive(System.Byte[])">
            <summary>
            A quick test to check if the header is a zip archive
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Utilities.ZipReader.Exists(System.String)">
            <summary>
            Check if specified file exists
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.ZipWriter">
            <summary>
            A simple zip writer implemented by lex.chou@aspose.com
            Zip64 is not finished yet, but it's fine to generate small zip files.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Utilities.ZlibStream">
            <summary>
            RFC1950 compatible implementation based-on .net's builtin DeflateStream
            Author: Lex Chou
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.Vulkan.RebuildablePipeline">
            <summary>
            This will create pipelien for different render target, and save the required information for rebuilding
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkRenderer.GetCommandList(Aspose.ThreeD.Render.RenderQueueGroupId)">
            <summary>
            Gets the command list for specified render queue
            </summary>
            <param name="queueGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkRenderer.RenderAll">
            <summary>
            Prepare render task from the scene
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkRenderer.Execute(Aspose.ThreeD.Render.PostProcessing,Aspose.ThreeD.Render.IRenderTarget)">
            <summary>
            Execute an post processing on specified render target 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkRenderer.UpdateMatrixForCubeMapping(System.Int32)">
            <summary>
            Calculate the view and projection matrix for rendering the cube map
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkRenderer.BakeShadowMap(Aspose.ThreeD.Entities.Light)">
            <summary>
            Render a shadow map from specified light
            </summary>
            <param name="light"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Render.Vulkan.ReusableAllocator">
            <summary>
            Reusable allocator to use minimum unmanaged memory,
            It will be recycled when it's no longer needed
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.Vulkan.SpvParser">
            <summary>
            This code reads the compiled SPR-V binary file and find out its execution mode, and uniform bindings 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.Vulkan.VkMemoryManager">
            <summary>
            This manages the device memory allocation and staging buffer
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkMemoryManager.Dispose">
            <summary>
            Release all device memories used by the manager
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.Vulkan.ByteBuffer">
            <summary>
            java.nio.ByteBuffer compatible implementation for vulkan porting.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.Vulkan.IntBuffer">
            <summary>
            java.nio.IntBuffer compatible implementation for vulkan porting.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.Vulkan.LongBuffer">
            <summary>
            java.nio.LongBuffer compatible implementation for vulkan porting.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.Vulkan.FloatBuffer">
            <summary>
            java.nio.FloatBuffer compatible implementation for vulkan porting.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.Vulkan.PointerBuffer">
            <summary>
            java.nio.FloatBuffer compatible implementation for vulkan porting.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkPostProcessing.Begin(Aspose.ThreeD.Render.DescriptorSetUpdater)">
            <summary>
            Called before apply the post processing, used for preparing resources
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkPostProcessing.End">
            <summary>
            Called after applied the post processing, used for disposing unused resources
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkPostProcessingManager.Execute(Aspose.ThreeD.Render.PostProcessing,Aspose.ThreeD.Render.IRenderTarget)">
            <summary>
            Execute an post processing on specified render target 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkRenderPipeline.TransitionLayouts">
            <summary>
            Layout transitions of all attachments of current surface
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.Vulkan.VkRenderTexture.renderPass">
            <summary>
            The render pass that used to create the frame buffer
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkTextureUnit.ToTextureData">
            <summary>
            Save the texture content to texture data for external access.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Vulkan.VkTextureUnit.ToRGBA(Aspose.ThreeD.Render.TextureData)">
            <summary>
            Convert from Format24bppRGB to Format32bppRGB
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Render.WindowHandle">
            <summary>
            Encapsulated window handle for different platforms.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.WindowHandle.FromGdk(System.IntPtr)">
            <summary>
            The GdkWindow* instance
            </summary>
            <param name="window"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.WindowHandle.FromXcb(System.IntPtr,System.IntPtr)">
            <summary>
            Create <see cref="T:Aspose.ThreeD.Render.WindowHandle"/> from an XCB surface.
            </summary>
            <param name="connection">The connection to the X server</param>
            <param name="surface">The handle of the surface</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.WindowHandle.FromWayland(System.IntPtr,System.IntPtr)">
            <summary>
            Create <see cref="T:Aspose.ThreeD.Render.WindowHandle"/> from a Wayland surface
            </summary>
            <param name="display">The display instance of Wayland server</param>
            <param name="surface">The handle of the surface</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.WindowHandle.FromXlib(System.IntPtr,System.IntPtr)">
            <summary>
            Create <see cref="T:Aspose.ThreeD.Render.WindowHandle"/> from an Xlib window
            </summary>
            <param name="display">The display instance of the X server</param>
            <param name="window">The handle of the window</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.WindowHandle.FromWin32(System.IntPtr)">
            <summary>
            The native HWND instance in Windows environment.
            </summary>
            <param name="hWnd">The handle of the natiev Win32 window</param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Render.IBuffer">
            <summary>
            The base interface of all managed buffers used in rendering
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.IBuffer.Size">
            <summary>
            Size of this buffer in bytes
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.IBuffer.LoadData(System.Byte[])">
            <summary>
            Load the data into current buffer
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Aspose.ThreeD.Render.IVertexBuffer">
            <summary>
            The vertex buffer holds the polygon vertex data that will be sent to rendering pipeline
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.IVertexBuffer.LoadData(Aspose.ThreeD.Entities.TriMesh)">
            <summary>
            Load vertex data from <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.IVertexBuffer.LoadData(System.IntPtr,System.Int32)">
            <summary>
            Load data from given position
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.IVertexBuffer.LoadData(System.Array)">
            <summary>
            Load data from array
            </summary>
            <param name="array"></param>
        </member>
        <member name="P:Aspose.ThreeD.Render.IVertexBuffer.VertexDeclaration">
            <summary>
            Gets the vertex declaration 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.IndexDataType">
            <summary>
            The data type of the elements in <see cref="T:Aspose.ThreeD.Render.IIndexBuffer"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.IndexDataType.Int32">
            <summary>
            The index buffer's elements are 32bit int
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.IndexDataType.Int16">
            <summary>
            The index buffer's elements are 16bit int
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.IIndexBuffer">
            <summary>
            The index buffer describes the geometry used in rendering pipeline. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.IIndexBuffer.IndexDataType">
            <summary>
            Gets the data type of each element.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.IIndexBuffer.Count">
            <summary>
            Gets the number of index in this buffer.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.IIndexBuffer.LoadData(Aspose.ThreeD.Entities.TriMesh)">
            <summary>
            Load indice data from <see cref="T:Aspose.ThreeD.Entities.TriMesh"/>
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.IIndexBuffer.LoadData(System.Int32[])">
            <summary>
            Load indice data
            </summary>
            <param name="indices"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.IIndexBuffer.LoadData(System.UInt32[])">
            <summary>
            Load indice data
            </summary>
            <param name="indices"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.IIndexBuffer.LoadData(System.Int16[])">
            <summary>
            Load indice data
            </summary>
            <param name="indices"></param>
        </member>
        <member name="T:Aspose.ThreeD.Render.DriverException">
            <summary>
            The exception raised by internal rendering drivers.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.DriverException.#ctor(System.UInt32,System.String)">
            <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.Render.DriverException"/> with specified native driver error code and message.
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="P:Aspose.ThreeD.Render.DriverException.ErrorCode">
            <summary>
            Gets the native error code.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.EntityRendererKey">
            <summary>
            The key of registered entity renderer
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRendererKey.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.EntityRendererKey"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRendererKey.ToString">
            <summary>
            Gets the string representation of the <see cref="T:Aspose.ThreeD.Render.EntityRendererKey"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Render.EntityRendererFeatures">
            <summary>
            The extra features that the entity renderer will provide
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.EntityRendererFeatures.Default">
            <summary>
            No extra features
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.EntityRendererFeatures.FrameBegin">
            <summary>
            The <see cref="T:Aspose.ThreeD.Render.EntityRenderer"/> will watch for FrameBegin callback before rendering each scene frame
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.EntityRendererFeatures.FrameEnd">
            <summary>
            The <see cref="T:Aspose.ThreeD.Render.EntityRenderer"/> will watch for FrameBegin callback after rendering each scene frame
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.EntityRendererFeatures.Shadowmap">
            <summary>
            This renderer can work in shadowmap mode
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.EntityRenderer">
            <summary>
            Subclass this to implement rendering for different kind of entities.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRenderer.#ctor(System.String,Aspose.ThreeD.Render.EntityRendererFeatures)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.EntityRenderer"/>
            </summary>
            <param name="key">The key of the entity renderer</param>
            <param name="features">The extra features of the entity renderer</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRenderer.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.EntityRenderer"/>
            </summary>
            <param name="key">The key of the entity renderer</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRenderer.Initialize(Aspose.ThreeD.Render.Renderer)">
            <summary>
            Initialize the entity renderer
            </summary>
            <param name="renderer"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRenderer.ResetSceneCache">
            <summary>
            The scene has changed or removed, need to dispose scene-level render resources in this
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRenderer.FrameBegin(Aspose.ThreeD.Render.Renderer)">
            <summary>
            Begin rendering a frame
            </summary>
            <param name="renderer">Current renderer</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRenderer.FrameEnd(Aspose.ThreeD.Render.Renderer)">
            <summary>
            Ends rendering a frame
            </summary>
            <param name="renderer">Current renderer</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRenderer.PrepareRenderQueue(Aspose.ThreeD.Render.Renderer,Aspose.ThreeD.Node,Aspose.ThreeD.Entity)">
            <summary>
            Prepare rendering commands for specified node/entity pair.
            </summary>
            <param name="renderer"></param>
            <param name="node"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.EntityRenderer.Dispose">
            <summary>
            The entity renderer is being disposed, release shared resources.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.IDescriptorSet">
            <summary>
            The descriptor sets describes different resources that can be used to bind to the render pipeline like buffers, textures
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.IDescriptorSet.BeginUpdate">
            <summary>
            Begin to update the descriptor set
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Render.ICommandList">
            <summary>
            Encodes a sequence of commands which will be sent to GPU to render.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.BindPipeline(Aspose.ThreeD.Render.IPipeline)">
            <summary>
            Bind the pipeline instance for rendering
            </summary>
            <param name="pipeline"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.BindVertexBuffer(Aspose.ThreeD.Render.IVertexBuffer)">
            <summary>
            Bind the vertex buffer for rendering
            </summary>
            <param name="vertexBuffer"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.BindIndexBuffer(Aspose.ThreeD.Render.IIndexBuffer)">
            <summary>
            Bind the index buffer for rendering
            </summary>
            <param name="indexBuffer"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.BindDescriptorSet(Aspose.ThreeD.Render.IDescriptorSet)">
            <summary>
            Bind the descriptor set to current pipeline
            </summary>
            <param name="descriptorSet"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.Draw(System.Int32,System.Int32)">
            <summary>
            Draw without index buffer
            </summary>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.Draw">
            <summary>
            Draw without index buffer
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.DrawIndex">
            <summary>
            Issue an indexed draw into a command list
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.DrawIndex(System.Int32,System.Int32)">
            <summary>
            Issue an indexed draw into a command list
            </summary>
            <param name="start">The first index to draw</param>
            <param name="count">The count of indices to draw</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.PushConstants(Aspose.ThreeD.Render.ShaderStage,System.Byte[])">
            <summary>
            Push the constant to the pipeline
            </summary>
            <param name="stage">Which shader stage will consume the constant data</param>
            <param name="data">The data that will be sent to the shader</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ICommandList.PushConstants(Aspose.ThreeD.Render.ShaderStage,System.Byte[],System.Int32)">
            <summary>
            Push the constant to the pipeline
            </summary>
            <param name="stage">Which shader stage will consume the constant data</param>
            <param name="data">The data that will be sent to the shader</param>
            <param name="size">Bytes to write to the pipeline</param>
        </member>
        <member name="T:Aspose.ThreeD.Render.CubeFace">
            <summary>
            Each face of the cube map texture 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CubeFace.PositiveX">
            <summary>
            The +X face
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CubeFace.NegativeX">
            <summary>
            The -X face
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CubeFace.PositiveY">
            <summary>
            The +Y face
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CubeFace.NegativeY">
            <summary>
            The -Y face
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CubeFace.PositiveZ">
            <summary>
            The +Z face
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CubeFace.NegativeZ">
            <summary>
            The -Z face
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.CubeFaceData`1">
            <summary>
            Data for each face of the cube map texture.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.PositiveX">
            <summary>
            Gets or sets the data for +X(Right) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Right">
            <summary>
            Gets or sets the data for +X(Right) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.NegativeX">
            <summary>
            Gets or sets the data for +X(Left) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Left">
            <summary>
            Gets or sets the data for +X(Left) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.PositiveY">
            <summary>
            Gets or sets the data for +Y(Top) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Top">
            <summary>
            Gets or sets the data for +Y(Top) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.NegativeY">
            <summary>
            Gets or sets the data for -Y(Bottom) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Bottom">
            <summary>
            Gets or sets the data for -Y(Bottom) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.PositiveZ">
            <summary>
            Gets or sets the data for +Z(Back) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Back">
            <summary>
            Gets or sets the data for +Z(Back) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.NegativeZ">
            <summary>
            Gets or sets the data for -Z(Front) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Front">
            <summary>
            Gets or sets the data for -Z(Front) face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.CubeFaceData`1.Item(Aspose.ThreeD.Render.CubeFace)">
            <summary>
            Gets or sets the data for specified face
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.ITextureCubemap">
            <summary>
            Cube map texture
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Load(Aspose.ThreeD.Render.CubeFaceData{Aspose.ThreeD.Render.TextureData})">
            <summary>
            Load texture content from specified <see cref="T:Aspose.ThreeD.Render.TextureData"/>
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Load(Aspose.ThreeD.Render.CubeFace,Aspose.ThreeD.Render.TextureData)">
            <summary>
            Load the data into specified face
            </summary>
            <param name="face"></param>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITextureCubemap.LoadFromFiles(Aspose.ThreeD.Render.CubeFaceData{System.String})">
            <summary>
            Load texture content from specified files
            </summary>
            <param name="fileNames"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Save(Aspose.ThreeD.Render.CubeFaceData{System.String},System.Drawing.Imaging.ImageFormat)">
            <summary>
            Save the cube's sides texture content to external files.
            </summary>
            <param name="path">File names to save.</param>
            <param name="format">Image format</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Save(Aspose.ThreeD.Render.CubeFaceData{System.Drawing.Bitmap})">
            <summary>
            Save the texture content to memory.
            </summary>
            <param name="bitmap">Result bitmap to save.</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITextureCubemap.Save(Aspose.ThreeD.Render.CubeFace,System.Drawing.Bitmap)">
            <summary>
            Save the specified side to memory
            </summary>
            <param name="side"></param>
            <param name="bitmap"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITextureCubemap.ToBitmap(Aspose.ThreeD.Render.CubeFace)">
            <summary>
            Convert the texture unit to <see cref="T:System.Drawing.Bitmap"/> instance
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.InitializationException">
            <summary>
            Exceptions in render pipeline initialization
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.InitializationException.#ctor">
            <summary>
            Initialize an <see cref="T:Aspose.ThreeD.Render.InitializationException"/> instance
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.InitializationException.#ctor(System.String)">
            <summary>
            Initialize an <see cref="T:Aspose.ThreeD.Render.InitializationException"/> instance with specifid exception message.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.IRenderTexture">
            <summary>
            The interface of render texture
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.IRenderTexture.Targets">
            <summary>
            Color output targets.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.IRenderTexture.DepthTexture">
            <summary>
            Depth buffer texture
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.RenderFactory">
            <summary>
            RenderFactory creates all resources that represented in rendering pipeline.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateRenderTexture(Aspose.ThreeD.Render.RenderParameters,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a render target that renders to the texture
            </summary>
            <param name="parameters">Render parameters to create the render texture</param>
            <param name="targets">How many color output targets</param>
            <param name="width">The width of the render texture</param>
            <param name="height">The height of the render texture</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateRenderTexture(Aspose.ThreeD.Render.RenderParameters,System.Int32,System.Int32)">
            <summary>
            Create a render target contains 1 targets that renders to the texture
            </summary>
            <param name="parameters">Render parameters to create the render texture</param>
            <param name="width">The width of the render texture</param>
            <param name="height">The height of the render texture</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateDescriptorSet(Aspose.ThreeD.Render.ShaderProgram)">
            <summary>
            Create the descriptor set for specified shader program.
            </summary>
            <param name="shader">The shader program</param>
            <returns>A new descriptor set instance</returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateCubeRenderTexture(Aspose.ThreeD.Render.RenderParameters,System.Int32,System.Int32)">
            <summary>
            Create a render target contains 1 cube texture
            </summary>
            <param name="parameters">Render parameters to create the render texture</param>
            <param name="width">The width of the render texture</param>
            <param name="height">The height of the render texture</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateRenderWindow(Aspose.ThreeD.Render.RenderParameters,System.IntPtr)">
            <summary>
            Create a render target that renders to the native window.
            </summary>
            <param name="parameters">Render parameters to create the render window</param>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateRenderWindow(Aspose.ThreeD.Render.RenderParameters,Aspose.ThreeD.Render.WindowHandle)">
            <summary>
            Create a render target that renders to the native window.
            </summary>
            <param name="parameters">Render parameters to create the render window</param>
            <param name="handle">The handle of the window to render</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateVertexBuffer(Aspose.ThreeD.Utilities.VertexDeclaration)">
            <summary>
            Create an <see cref="T:Aspose.ThreeD.Render.IVertexBuffer"/> instance to store polygon's vertex information.
            </summary>
            <param name="declaration"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateIndexBuffer">
            <summary>
            Create an <see cref="T:Aspose.ThreeD.Render.IIndexBuffer"/> instance to store polygon's face information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateTextureUnit(Aspose.ThreeD.Render.TextureType)">
            <summary>
            Create a texture unit that can be accessed by shader.
            </summary>
            <param name="textureType">Type of the texture</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateTextureUnit">
            <summary>
            Create a 2D texture unit that can be accessed by shader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateShaderProgram(Aspose.ThreeD.Render.ShaderSource)">
            <summary>
            Create a <see cref="T:Aspose.ThreeD.Render.ShaderProgram"/> object
            </summary>
            <param name="shaderSource">The source code of the shader</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreatePipeline(Aspose.ThreeD.Render.ShaderProgram,Aspose.ThreeD.Render.RenderState,Aspose.ThreeD.Utilities.VertexDeclaration,Aspose.ThreeD.Render.DrawOperation)">
            <summary>
            Create a preconfigured graphics pipeline with preconfigured shader/render state/vertex declaration and draw operations.
            </summary>
            <param name="shader">The shader used in the rendering</param>
            <param name="renderState">The render state used in the rendering</param>
            <param name="vertexDeclaration">The vertex declaration of input vertex data</param>
            <param name="drawOperation">Draw operation</param>
            <returns>A new pipeline instance</returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderFactory.CreateUniformBuffer(System.Int32)">
            <summary>
            Create a new uniform buffer in GPU side with preallocated size.
            </summary>
            <param name="size">The size of the uniform buffer</param>
            <returns>The uniform buffer instance</returns>
        </member>
        <member name="T:Aspose.ThreeD.Render.IRenderTarget">
            <summary>
            The base interface of render target
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.IRenderTarget.CreateViewport(Aspose.ThreeD.Entities.Camera,System.Drawing.Color,Aspose.ThreeD.Utilities.RelativeRectangle)">
            <summary>
            Create a viewport with specified background color and position/size in specified camera perspective.
            </summary>
            <param name="camera">The camera</param>
            <param name="backgroundColor">The background of the viewport</param>
            <param name="rect">Position and size of the viewport</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.IRenderTarget.CreateViewport(Aspose.ThreeD.Entities.Camera,Aspose.ThreeD.Utilities.RelativeRectangle)">
            <summary>
            Create a viewport with position/size in specified camera perspective.
            </summary>
            <param name="camera">The camera</param>
            <param name="rect">Position and size of the viewport</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.IRenderTarget.CreateViewport(Aspose.ThreeD.Entities.Camera)">
            <summary>
            Create a viewport in specified camera perspective.
            </summary>
            <param name="camera">The camera</param>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Render.IRenderTarget.Size">
            <summary>
            Gets or sets the size of the render target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.IRenderTarget.Viewports">
            <summary>
            Gets all viewports that associated with this render target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderTarget.Size">
            <summary>
            The size of this render target, measured in pixel.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderTarget.SwapBuffers">
            <summary>
            Finished rendering, swap buffer for displaying
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.IRenderWindow">
            <summary>
            IRenderWindow represents the native window created by operating system that supports rendering.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.TextureType">
            <summary>
            The type of the <see cref="T:Aspose.ThreeD.Render.ITextureUnit"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.TextureType.Texture1D">
            <summary>
            1-dimensional texture
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.TextureType.Texture2D">
            <summary>
            2-dimnsional textur
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.TextureType.Texture3D">
            <summary>
            3-dimensional texture
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.TextureType.CubeMap">
            <summary>
            Cube map texture contains 6 2d textures
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.TextureType.Array2D">
            <summary>
            Multiple set of 2d textures
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.ITextureUnit">
            <summary>
            <see cref="T:Aspose.ThreeD.Render.ITextureUnit"/> represents a texture in the memory that shared between GPU and CPU and can be sampled by the shader,
            where the <see cref="T:Aspose.ThreeD.Shading.Texture"/> only represents a reference to an external file.
            More details can be found https://en.wikipedia.org/wiki/Texture_mapping_unit
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.Type">
            <summary>
            Gets the type of this texture unit.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.Width">
            <summary>
            Gets the width of this texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.Height">
            <summary>
            Gets the height of this texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.Depth">
            <summary>
            Gets the height of this texture, for none-3D texture it's always 1.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.UWrap">
            <summary>
            Gets or sets the wrap mode for texture's U coordinate.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.VWrap">
            <summary>
            Gets or sets the wrap mode for texture's V coordinate.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.WWrap">
            <summary>
            Gets or sets the wrap mode for texture's W coordinate.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.Minification">
            <summary>
            Gets or sets the filter mode for minification.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.Magnification">
            <summary>
            Gets or sets the filter mode for magnification.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.Mipmap">
            <summary>
            Gets or sets the filter mode for mipmap.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.Scroll">
            <summary>
            Gets or sets the scroll of the UV coordinate.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ITextureUnit.Scale">
            <summary>
            Gets or sets the scale of the UV coordinate.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.ITexture1D">
            <summary>
            1D texture
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITexture1D.Load(Aspose.ThreeD.Render.TextureData)">
            <summary>
            Load texture content from specified Bitmap
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITexture1D.Save(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Save the texture content to external file.
            </summary>
            <param name="path">File name to save.</param>
            <param name="format">Image format</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITexture1D.Save(System.Drawing.Bitmap)">
            <summary>
            Save the texture content to external file.
            </summary>
            <param name="bitmap">Result bitmap to save.</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITexture1D.ToBitmap">
            <summary>
            Convert the texture unit to <see cref="T:System.Drawing.Bitmap"/> instance
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.ITexture2D">
            <summary>
            2D texture
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITexture2D.Load(Aspose.ThreeD.Render.TextureData)">
            <summary>
            Load texture content from specified Bitmap
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITexture2D.Save(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Save the texture content to external file.
            </summary>
            <param name="path">File name to save.</param>
            <param name="format">Image format</param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITexture2D.Save(System.Drawing.Bitmap)">
            <summary>
            Save the texture content to external file.
            </summary>
            <param name="bitmap">Result bitmap to save.</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ITexture2D.ToBitmap">
            <summary>
            Convert the texture unit to <see cref="T:System.Drawing.Bitmap"/> instance
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.LineRenderer">
            <summary>
            This renders the <see cref="T:Aspose.ThreeD.Entities.Line"/> and <see cref="T:Aspose.ThreeD.Entities.NurbsCurve"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.NamespaceDoc">
            <summary>
            All rendering related classes are defined in this namespace
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.IPipeline">
            <summary>
            The prebaked sequence of operations to draw in GPU side.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.PushConstant">
            <summary>
            A utility to provide data to shader through push constant.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.PushConstant.#ctor">
            <summary>
            Constructor of the <see cref="T:Aspose.ThreeD.Render.PushConstant"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.PushConstant.Write(Aspose.ThreeD.Utilities.FMatrix3)">
            <summary>
            Write the matrix to the constant
            </summary>
            <param name="mat">The matrix to write</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.PushConstant.Write(Aspose.ThreeD.Utilities.FMatrix4)">
            <summary>
            Write the matrix to the constant
            </summary>
            <param name="mat">The matrix to write</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.PushConstant.Write(System.Int32)">
            <summary>
            Write a int value to the constant
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.PushConstant.Write(System.Single)">
            <summary>
            Write a float value to the constant
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.PushConstant.Write(Aspose.ThreeD.Utilities.FVector4)">
            <summary>
            Write a 4-component vector to the constant
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.PushConstant.Write(Aspose.ThreeD.Utilities.FVector3)">
            <summary>
            Write a 3-component vector to the constant
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.PushConstant.Write(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Write a 4-component vector to the constant
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.PushConstant.Commit(Aspose.ThreeD.Render.ShaderStage,Aspose.ThreeD.Render.ICommandList)">
            <summary>
            Commit prepared data to graphics pipeline.
            </summary>
            <param name="stage"></param>
            <param name="commandList"></param>
        </member>
        <member name="T:Aspose.ThreeD.Render.Renderer">
            <summary>
            The context about renderer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.Renderer.entityRenderersByKey">
            <summary>
            Registered entity renderers
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.FallbackEntityRenderer">
            <summary>
            Gets or sets the fallback entity renderer when the entity has no special renderer defined.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.RegisterEntityRenderer(Aspose.ThreeD.Render.EntityRenderer)">
            <summary>
            Register the entity renderer for specified entity
            </summary>
            <param name="renderer"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.GetEntityRenderer(Aspose.ThreeD.Entity)">
            <summary>
            Get the entity renderer that used to render the specified entity, or return fallback renderer if no entity renderer was registered.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.GetCommandList(Aspose.ThreeD.Render.RenderQueueGroupId)">
            <summary>
            Gets the command list for specified render queue
            </summary>
            <param name="queueGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.Render(Aspose.ThreeD.Render.IRenderTarget)">
            <summary>
            Render the specified target
            </summary>
            <param name="renderTarget"></param>
        </member>
        <member name="F:Aspose.ThreeD.Render.Renderer.postProcessings">
            <summary>
            Active post processing effects
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.Renderer.allPostProcessings">
            <summary>
            All built-in post processing effects
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.ClearCache">
            <summary>
            Manually clear the cache.
            Aspose.3D will cache some objects like materials/geometries into internal types that compatible with the render pipeline.
            This should be manually called when scene has major changes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.ShaderSet">
            <summary>
            Gets or sets the shader set that used to render the scene
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.Variables">
            <summary>
            Access to the internal variables used for rendering
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.PresetShaders">
            <summary>
            Gets or sets the preset shader set
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.RenderFactory">
            <summary>
            Gets the factory to build render-related objects.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.AssetDirectories">
            <summary>
            Directories that stored external assets
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.PostProcessings">
            <summary>
            Active post-processing chain
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.GetPostProcessing(System.String)">
            <summary>
            Gets a built-in post-processor that supported by the renderer.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.Execute(Aspose.ThreeD.Render.PostProcessing,Aspose.ThreeD.Render.IRenderTarget)">
            <summary>
            Execute an post processing on specified render target 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.EnableShadows">
            <summary>
            Gets or sets wheather to enabel shadows.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.RenderTarget">
            <summary>
            Specify the render target that the following render operations will be performed on.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.Node">
            <summary>
            Gets or sets the <see cref="P:Aspose.ThreeD.Render.Renderer.Node"/> instance used to provide world transform matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.Frustum">
            <summary>
            Gets or sets the frustum that used to provide view matrix.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.RenderStage">
            <summary>
            Gets the current render stage.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.Material">
            <summary>
            Gets or sets the material that used to provide material information used by shaders.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Renderer.Shader">
            <summary>
            Gets or sets the shader instance used for rendering the geometry.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.BeginViewport(Aspose.ThreeD.Render.Viewport)">
             <summary>
            Begin rendering on specified viewport
             </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.BeginViewport(Aspose.ThreeD.Render.Viewport,Aspose.ThreeD.Entities.Frustum)">
             <summary>
            Begin rendering on specified viewport
             </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.EndViewport">
            <summary>
            Finished rendering on specified viewport
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.BeginTarget(Aspose.ThreeD.Render.IRenderTarget)">
            <summary>
            Begin render on specified render target 
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.EndTarget">
            <summary>
            End rendering on specified render target.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.CreateRenderer">
            <summary>
            Creates a new <see cref="T:Aspose.ThreeD.Render.Renderer"/> with default profile.
            </summary>
            <exception cref="T:Aspose.ThreeD.Render.RendererException"/>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.CreateRenderer(Aspose.ThreeD.Render.RendererProfile)">
            <summary>
            Creates a new <see cref="T:Aspose.ThreeD.Render.Renderer"/> with specified profile.
            </summary>
            <param name="profile">The profile that used to identify which renderer to use</param>
            <exception cref="T:Aspose.ThreeD.Render.RendererException"/>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.Dispose">
            <summary>
            Dispose the <see cref="T:Aspose.ThreeD.Render.Renderer"/> and all related resources
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.Dispose(System.Boolean)">
            <summary>
            Dispose the <see cref="T:Aspose.ThreeD.Render.Renderer"/> and all related resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.Renderer.Finalize">
            <summary>
            Finalizer of <see cref="T:Aspose.ThreeD.Render.Renderer"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.PixelFormat">
            <summary>
            The pixel's format used in texutre unit.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.Unknown">
            <summary>
            Unknown pixel format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.L8">
            <summary>
            8-bit pixel format, all bits luminance.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.L16">
            <summary>
            16-bit pixel format, all bits luminance.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.A8">
            <summary>
            8-bit pixel format, all bits alpha.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.A4L4">
            <summary>
            8-bit pixel format, 4 bits alpha, 4 bits luminance.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.BYTE_LA">
            <summary>
            2 byte pixel format, 1 byte luminance, 1 byte alpha
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.R5G6B5">
            <summary>16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.B5G6R5">
            <summary>16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.R3G3B2">
            <summary>8-bit pixel format, 2 bits blue, 3 bits green, 3 bits red.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.A4R4G4B4">
            <summary>16-bit pixel format, 4 bits for alpha, red, green and blue.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.A1R5G5B5">
            <summary>16-bit pixel format, 5 bits for blue, green, red and 1 for alpha.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.R8G8B8">
            <summary>24-bit pixel format, 8 bits for red, green and blue.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.B8G8R8">
            <summary>24-bit pixel format, 8 bits for blue, green and red.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.A8R8G8B8">
            <summary>32-bit pixel format, 8 bits for alpha, red, green and blue.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.A8B8G8R8">
            <summary>32-bit pixel format, 8 bits for blue, green, red and alpha.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.B8G8R8A8">
            <summary>32-bit pixel format, 8 bits for blue, green, red and alpha.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.R8G8B8A8">
            <summary>32-bit pixel format, 8 bits for red, green, blue and alpha.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.X8R8G8B8">
            <summary>32-bit pixel format, 8 bits for red, 8 bits for green, 8 bits for blue like A8R8G8B8, but alpha will get discarded</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.X8B8G8R8">
            <summary>32-bit pixel format, 8 bits for blue, 8 bits for green, 8 bits for red like A8B8G8R8, but alpha will get discarded</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.A2R10G10B10">
            <summary>32-bit pixel format, 2 bits for alpha, 10 bits for red, green and blue.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.A2B10G10R10">
            <summary>32-bit pixel format, 10 bits for blue, green and red, 2 bits for alpha.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT1">
            <summary>DDS (DirectDraw Surface) DXT1 format.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT2">
            <summary>DDS (DirectDraw Surface) DXT2 format.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT3">
            <summary>DDS (DirectDraw Surface) DXT3 format.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT4">
            <summary>DDS (DirectDraw Surface) DXT4 format.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.DXT5">
            <summary>DDS (DirectDraw Surface) DXT5 format.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT16_R">
            <summary>16-bit pixel format, 16 bits (float) for red</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT16_RGB">
            <summary>48-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT16_RGBA">
            <summary>64-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue, 16 bits (float) for alpha</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT32_R">
            <summary>32-bit pixel format, 32 bits (float) for red</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT32_RGB">
            <summary>96-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT32_RGBA">
            <summary>128-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue, 32 bits (float) for alpha</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT16_GR">
            <summary>32-bit, 2-channel s10e5 floating point pixel format, 16-bit green, 16-bit red</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.FLOAT32_GR">
            <summary>64-bit, 2-channel floating point pixel format, 32-bit green, 32-bit red</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.DEPTH">
            <summary>Depth texture format.</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.SHORT_RGBA">
            <summary>64-bit pixel format, 16 bits for red, green, blue and alpha</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.SHORT_GR">
            <summary>32-bit pixel format, 16-bit green, 16-bit red</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.SHORT_RGB">
            <summary>48-bit pixel format, 16 bits for red, green and blue</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.R32_UINT">
            <summary>32-bit pixel format, 32 bits red (unsigned int).</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.R32G32_UINT">
            <summary>64-bit pixel format, 32 bits red (unsigned int), 32 bits blue (unsigned int).</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.R32G32B32A32_UINT">
            <summary>128-bit pixel format, 32 bits red (unsigned int), 32 bits blue (unsigned int), 32 bits green (unsigned int), 32 bits alpha (unsigned int).</summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PixelFormat.R8">
            <summary>8-bit pixel format, all bits red.</summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.PostProcessingInput">
            <summary>
            The input types
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PostProcessingInput.Color">
            <summary>
            The input is color(after lighting stage)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PostProcessingInput.Diffuse">
            <summary>
            The input is diffuse texture
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PostProcessingInput.Normal">
            <summary>
            The input is normal texture
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PostProcessingInput.Position">
            <summary>
            The input is position texture
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PostProcessingInput.Depth">
            <summary>
            The input is depth texture
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.PostProcessing">
            <summary>
            The post-processing effects
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.PostProcessing.Input">
            <summary>
            Input of this post-processing
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.RendererVariableManager">
            <summary>
            This class manages variables used in rendering
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RendererVariableManager.renderer">
            <summary>
            The renderer creates this variable manager
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.WorldTime">
            <summary>
            Time in seconds
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.ShadowCaster">
            <summary>
            Position of shadow caster in world coordinate system
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.Shadowmap">
            <summary>
            The depth texture used for shadow mapping
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixLightSpace">
            <summary>
            Matrix for light space transformation
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixViewProjection">
            <summary>
            Matrix for view and projection transformation.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixWorldViewProjection">
            <summary>
            Matrix for world view and projection transformation
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixWorld">
            <summary>
            Matrix for world transformation
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixWorldNormal">
            <summary>
            Matrix for converting normal from object to world space.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixProjection">
            <summary>
            Matrix for projection transformation
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.MatrixView">
            <summary>
            Matrix for view transformation
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.CameraPosition">
            <summary>
            Camera's position in world coordinate system
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.DepthBias">
            <summary>
            Depth bias for shadow mapping, default value is 0.001
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.ViewportSize">
            <summary>
            Size of viewport, measured in pixel
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RendererVariableManager.WorldAmbient">
            <summary>
            Ambient color defined in viewport.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.RenderParameters">
            <summary>
            Describe the parameters of the render target
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderParameters.DoubleBuffering">
            <summary>
            Gets or sets whether double buffer is used.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderParameters.ColorBits">
            <summary>
            Gets or sets how many bits will be used by color buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderParameters.DepthBits">
            <summary>
            Gets or sets how many bits will be used by depth buffer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderParameters.StencilBits">
            <summary>
            Gets or sets how many bits will be used in stencil buffer.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderParameters.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.Render.PixelFormat"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.DrawOperation">
            <summary>
            The primitive types to render
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.DrawOperation.Points">
            <summary>
            Points
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.DrawOperation.Lines">
            <summary>
            Lines
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.DrawOperation.LineStrip">
            <summary>
            Line strips
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.DrawOperation.Triangles">
            <summary>
            Triangles
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.DrawOperation.TriangleStrip">
            <summary>
            Triangle strips
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.DrawOperation.TriangleFan">
            <summary>
            Triangle fan
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.ShaderStage">
            <summary>
            Shader stage
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.ShaderStage.VertexShader">
            <summary>
            Vertex shader
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.ShaderStage.FragmentShader">
            <summary>
            Fragment shader
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.ShaderStage.GeometryShader">
            <summary>
            Geometry shader
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.ShaderStage.ComputeShader">
            <summary>
            Compute shader
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RendererProfile.Vulkan">
            <summary>
            Hardware renderer that uses Vulkan.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RendererProfile.OpenGL">
            <summary>
            Hardware renderer that uses OpenGL.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.PresetShaders">
            <summary>
            This defines the preset internal shaders used by the renderer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PresetShaders.Default">
            <summary>
            Use the default shaders for phong/lambert/pbr materials
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PresetShaders.Customized">
            <summary>
            User's customized shader set
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.RenderQueueGroupId">
            <summary>
            The group id of render queue
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Background">
            <summary>
            Render queue for background
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Skies">
            <summary>
            Render queue for skies
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Geometries">
            <summary>
            Render queue for geometries
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Main">
            <summary>
            Render queue for main
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Opaque">
            <summary>
            Render queue for opaque objects
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderQueueGroupId.Overlay">
            <summary>
            Render queue for overlays
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.IRenderable">
            <summary>
            Minimum render task
            Implement this so custom render operations can be enqueued to the render queue.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.IRenderable.Render(Aspose.ThreeD.Node,Aspose.ThreeD.Render.Renderer)">
            <summary>
            Perform render
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.RenderResource">
            <summary>
            The abstract class of all render resources
            All render resources will be disposed when the renderer is released.
            Classes like <see cref="T:Aspose.ThreeD.Entities.Mesh"/>/<see cref="T:Aspose.ThreeD.Shading.Texture"/> will have a corresponding RenderResource
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderResource.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources used by <see cref="T:Aspose.ThreeD.Render.RenderResource"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderResource.Dispose">
            <summary>
            Dispose internal resources used by <see cref="T:Aspose.ThreeD.Render.RenderResource"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.MeshResource.CraftMesh(Aspose.ThreeD.Entities.TriMesh)">
            <summary>
            Build the required vertex attributes that the input mesh lacks.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Render.RenderStage">
            <summary>
            The render stage
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderStage.Idle">
            <summary>
            Renderer is idle
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderStage.ShadowMap">
            <summary>
            Renderer is rendering a shadow map
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderStage.Scene">
            <summary>
            Renderer is rendering the scene
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.RenderStage.PostProcessing">
            <summary>
            Renderer is rendering post processing effects.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.BlendFactor">
            <summary>
            Blend factor specify pixel arithmetic.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.Zero">
            <summary>
            The blend factor is vec4(0)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.One">
            <summary>
            The blend factor is vec4(1)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.SrcColor">
            <summary>
            The blend factor is src.rgba
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusSrcColor">
            <summary>
            The blend factor is vec4(1) - src.rgba
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.DstColor">
            <summary>
             The blend factor is dst.rgba
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusDstColor">
            <summary>
            The blend factor is vec4(1) - dst.rgba
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.SrcAlpha">
            <summary>
            The blend factor is vec4(src.a)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusSrcAlpha">
            <summary>
            The blend factor is vec4(1 - src.a)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.DstAlpha">
            <summary>
            The blend factor is vec4(dst.a)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusDstAlpha">
            <summary>
            The blend factor is vec4(1 - dst.a)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.ConstantColor">
            <summary>
            The blend factor is c where c is specified in <see cref="P:Aspose.ThreeD.Render.RenderState.BlendColor"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusConstantColor">
            <summary>
            The blend factor is vec4(1) - c where c is specified in <see cref="P:Aspose.ThreeD.Render.RenderState.BlendColor"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.ConstantAlpha">
            <summary>
            The blend factor is vec4(c.a) where c is specified in <see cref="P:Aspose.ThreeD.Render.RenderState.BlendColor"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.OneMinusConstantAlpha">
            <summary>
            The blend factor is vec4(1 - c.a) where c is specified in <see cref="P:Aspose.ThreeD.Render.RenderState.BlendColor"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.BlendFactor.SrcAlphaSaturate">
            <summary>
            The blend factor is min(src.a, 1 - dst.a)
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.CompareFunction">
            <summary>
            The compare function used in depth/stencil testing.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CompareFunction.Never">
            <summary>
            Never passes
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CompareFunction.Less">
            <summary>
            Pass if the incoming value is less than the stored value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CompareFunction.Equal">
            <summary>
            Pass if the incoming value is equal to the stored value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CompareFunction.LEqual">
            <summary>
            Pass if the incoming value is less than or equal to the stored value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CompareFunction.Greater">
            <summary>
            Pass if the incoming value is greater than the stored value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CompareFunction.NotEqual">
            <summary>
            Pass if the incoming value is not equal to the stored value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CompareFunction.GEqual">
            <summary>
            Pass if the incoming value is greater than or equal to the stored value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CompareFunction.Always">
            <summary>
            Always passes
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.FrontFace">
            <summary>
            Define front- and back-facing polygons
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.FrontFace.Clockwise">
            <summary>
            Clockwise order is front face
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.FrontFace.CounterClockwise">
            <summary>
            Counter-clockwise order is front face
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.CullFaceMode">
            <summary>
            What face to cull
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CullFaceMode.Back">
            <summary>
            Only back faces are culled
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CullFaceMode.Front">
            <summary>
            Only front faces are culled
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.CullFaceMode.Both">
            <summary>
            Both back/front faces are culled, doesn't affect line/point rendering.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.PolygonMode">
            <summary>
            The polygon rasterization mode
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PolygonMode.Point">
            <summary>
            Polygon control points are drawed as points.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PolygonMode.Line">
            <summary>
            Boundary edges of the polygon are drawn as line segments.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.PolygonMode.Fill">
            <summary>
            The interior of the polygon is filled.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.StencilAction">
            <summary>
            The stencil test actions
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.StencilAction.Keep">
            <summary>
            Keep the current value
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.StencilAction.Zero">
            <summary>
            Sets the stencil buffer value to 0
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.StencilAction.Replace">
            <summary>
            Sets the stencil buffer to ref where defined in <see cref="P:Aspose.ThreeD.Render.RenderState.StencilReference"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.StencilAction.Increment">
            <summary>
            Increments the current stencil buffer value, clamps to maximum value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.StencilAction.IncrementWrap">
            <summary>
            Increments the current stencil buffer value and wrap it to zero when it reaches maximum value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.StencilAction.Decrement">
            <summary>
            Increments the current stencil buffer value, clamps to 0.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.StencilAction.DecrementWrap">
            <summary>
            Decrements the current stencil buffer value and wrap it to maximum value when it reaches zero.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Render.StencilAction.Invert">
            <summary>
            Bitwise inverts the current stencil buffer value.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.StencilState">
            <summary>
            Stencil states per face.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.StencilState.Equals(System.Object)">
            <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.StencilState.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.StencilState.Compare">
            <summary>
            Gets or sets the compare function used in stencil test 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.StencilState.FailAction">
            <summary>
            Gets or sets the stencil action when stencil test fails.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.StencilState.DepthFailAction">
            <summary>
            Gets or sets the stencil action when stencil test pass but depth test fails.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.StencilState.PassAction">
            <summary>
            Gets or sets the stencil action when both stencil test and depth test passes.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.RenderState">
            <summary>
            Render state used by <see cref="T:Aspose.ThreeD.Render.IRenderable"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderState.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.RenderState"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderState.Equals(System.Object)">
            <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderState.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.Blend">
            <summary>
            Enable or disable the fragment blending.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.BlendColor">
            <summary>
            Gets or sets the blend color where used in <see cref="F:Aspose.ThreeD.Render.BlendFactor.ConstantColor"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.SourceBlendFactor">
            <summary>
            Gets or sets how the color is blended.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.DestinationBlendFactor">
            <summary>
            Gets or sets how the color is blended.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.CullFace">
            <summary>
            Enable or disable cull face
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.CullFaceMode">
            <summary>
            Gets or sets which face will be culled.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.FrontFace">
            <summary>
            Gets or sets which order is front face.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.DepthTest">
            <summary>
            Enable or disable the depth test.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.DepthMask">
            <summary>
            Enable or disable the depth writing.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.DepthFunction">
            <summary>
            Gets or sets the compare function used in depth test
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.StencilTest">
            <summary>
            Enable or disable the stencil test.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.StencilReference">
            <summary>
            Gets or sets the reference value for the stencil test.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.StencilMask">
            <summary>
            Gets or sets the mask that is ANDed with the both reference and stored stencil value when test is done.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.StencilFrontFace">
            <summary>
            Gets the stencil state for front face.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.StencilBackFace">
            <summary>
            Gets the stencil state for back face.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.ScissorTest">
            <summary>
            Enable or disable scissor test
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.ScissorBox">
            <summary>
            Gets or sets the scissor box
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.RenderState.PolygonMode">
            <summary>
            Gets or sets the polygon's render mode.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderState.Dispose">
            <summary>
            Dispose the <see cref="T:Aspose.ThreeD.Render.RenderState"/> and release all internal resources.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.RenderState.CompareTo(Aspose.ThreeD.Render.RenderState)">
            <summary>
            Compare the render state with another instance
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Render.ShaderException">
            <summary>
            Shader related exceptions
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ShaderException.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.ShaderException"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Aspose.ThreeD.Render.ShaderInput">
            <summary>
            Vertex data input for shader
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ShaderInput.#ctor(Aspose.ThreeD.Utilities.VertexFieldSemantic,System.Int32)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.ShaderInput"/>
            </summary>
            <param name="semantic"></param>
            <param name="index"></param>
        </member>
        <member name="T:Aspose.ThreeD.Render.ShaderVariable">
            <summary>
            Shader variable 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ShaderVariable.#ctor(System.String)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.ShaderVariable"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.ShaderVariable.#ctor(System.String,Aspose.ThreeD.Render.ShaderStage)">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.ShaderVariable"/>
            </summary>
            <param name="name"></param>
            <param name="shaderStage">Which shader stage will this variable be used</param>
        </member>
        <member name="P:Aspose.ThreeD.Render.ShaderVariable.Name">
            <summary>
            Gets the name of this variable
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.ShaderProgram">
            <summary>
            The shader program
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ShaderProgram.Dispose">
            <summary>
            Dispose the shader and release all internal resources.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.ShaderSet">
            <summary>
            Shader programs for each kind of materials
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ShaderSet.Lambert">
            <summary>
            Gets or sets the shader that used to render the lambert material
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ShaderSet.Phong">
            <summary>
            Gets or sets the shader that used to render the phong material
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ShaderSet.Pbr">
            <summary>
            Gets or sets the shader that used to render the PBR material
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.ShaderSet.Fallback">
            <summary>
            Gets or sets the fallback shader when required shader is unavailable
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ShaderSet.#ctor">
            <summary>
            Construct the instance of <see cref="T:Aspose.ThreeD.Render.ShaderSet"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.ShaderSet.Dispose">
            <summary>
            Dispose this instance and release all shader programs. 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.ShaderSource">
            <summary>
            The source code of shader
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.GLSLSource">
            <summary>
            The source code of shaders in GLSL
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.GLSLSource.ComputeShader">
            <summary>
            Gets or sets the source code of the compute shader.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.GLSLSource.GeometryShader">
            <summary>
            Gets or sets the source code of the geometry shader.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.GLSLSource.VertexShader">
            <summary>
            Gets or sets the source code of the vertex shader
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.GLSLSource.FragmentShader">
            <summary>
            Gets or sets the source code of the fragmnt shader.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.GLSLSource.DefineInclude(System.String,System.String)">
            <summary>
            Define virtual file for #include in GLSL source code
            </summary>
            <param name="fileName">File name of the virtual file</param>
            <param name="content"></param>
        </member>
        <member name="T:Aspose.ThreeD.Render.SPIRVSource">
            <summary>
            The compiled shader in SPIR-V format.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.SPIRVSource.MaximumDescriptorSets">
            <summary>
            Maximum descriptor sets, default value is 10
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.SPIRVSource.ComputeShader">
            <summary>
            Gets or sets the source code of the compute shader.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.SPIRVSource.GeometryShader">
            <summary>
            Gets or sets the source code of the geometry shader.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.SPIRVSource.VertexShader">
            <summary>
            Gets or sets the source code of the vertex shader
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.SPIRVSource.FragmentShader">
            <summary>
            Gets or sets the source code of the fragmnt shader.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.SPIRVSource.#ctor">
            <summary>
            Constructor of SPIR-V based shader sources.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.TargaDecoder.LoadTrueColor(Aspose.ThreeD.Render.TextureData,System.Int32,System.Int32,System.Int32,Aspose.ThreeD.Utilities.RawStreamReader,System.Boolean)">
            Used for all 32 and 24 bit loading of uncompressed images
        </member>
        <member name="T:Aspose.ThreeD.Render.TextureData">
            <summary>
            This class contains the raw data and format definition of a texture.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.TextureData.Data">
            <summary>
            Raw bytes of pixel data
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.TextureData.Width">
            <summary>
            Number of horizontal pixels
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.TextureData.Height">
            <summary>
            Number of vertical pixels
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.TextureData.Stride">
            <summary>
            Number of bytes of a scanline.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.TextureData.BytesPerPixel">
            <summary>
            Number of bytes of a pixel
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.TextureData.PixelFormat">
            <summary>
            The pixel's format
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat,System.Byte[])">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.TextureData"/>
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="bytesPerPixel"></param>
            <param name="pixelFormat"></param>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Aspose.ThreeD.Render.PixelFormat,System.Byte[])">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.TextureData"/>
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="stride"></param>
            <param name="bytesPerPixel"></param>
            <param name="pixelFormat"></param>
            <param name="data"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureData.#ctor">
            <summary>
            Constructor of <see cref="T:Aspose.ThreeD.Render.TextureData"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureData.FromBitmap(System.Drawing.Bitmap)">
            <summary>
            Convert a <see cref="T:System.Drawing.Bitmap"/> to <see cref="T:Aspose.ThreeD.Render.TextureData"/>
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureData.ToBitmap">
            <summary>
            Convert the TextureData to a <see cref="T:System.Drawing.Bitmap"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureData.LoadTexture(System.IntPtr,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Load texture's pixel data in reverse scanline order
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureData.FromStream(System.IO.Stream)">
            <summary>
            Load a texture from stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureData.FromFile(System.String)">
            <summary>
            Load a texture from file
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.Render.TextureUnit">
            <summary>
            <see cref="T:Aspose.ThreeD.Render.TextureUnit"/> represents a texture in the memory that shared between GPU and CPU and can be sampled by the shader,
            where the <see cref="T:Aspose.ThreeD.Shading.Texture"/> only represents a reference to an external file.
            More details can be found https://en.wikipedia.org/wiki/Texture_mapping_unit
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureUnit.Load(Aspose.ThreeD.Render.TextureData)">
            <summary>
            Load texture from <see cref="T:Aspose.ThreeD.Render.TextureData"/>
            </summary>
            <param name="texture"></param>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureUnit.Save(System.String,System.Drawing.Imaging.ImageFormat,System.Int32)">
            <summary>
            Save the texture content to external file.
            </summary>
            <param name="path">File name to save.</param>
            <param name="format">Image format</param>
            <param name="face">Face index of cube texture ranged from 0 to 5</param>
        </member>
        <member name="M:Aspose.ThreeD.Render.TextureUnit.LoadCubeMap(Aspose.ThreeD.Render.TextureData[])">
            <summary>
            Load texture as Cube map
            </summary>
            <param name="faces">6 bitmaps</param>
        </member>
        <member name="T:Aspose.ThreeD.Render.Viewport">
            <summary>
            A <see cref="T:Aspose.ThreeD.Render.IRenderTarget"/> contains at least one viewport for rendering the scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Viewport.Frustum">
            <summary>
            Gets or sets the camera of this <see cref="T:Aspose.ThreeD.Render.Viewport"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Viewport.Enabled">
            <summary>
            Enable or disable this viewport.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Viewport.RenderTarget">
            <summary>
            Gets the render target that created this viewport.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Viewport.Area">
            <summary>
            Gets or sets the area of the viewport in render target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Viewport.ZOrder">
            <summary>
            Gets or sets the Z-order of the viewport. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Viewport.BackgroundColor">
            <summary>
            Gets or sets the background color of the viewport.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Render.Viewport.DepthClear">
            <summary>
            Gets or sets the depth value used when clear the viewport with depth buffer bit set.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Render.DescriptorSetUpdater">
            <summary>
            This class allows to update the <see cref="T:Aspose.ThreeD.Render.IDescriptorSet"/> in a chain operation.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Dispose">
            <summary>
            Dispose the updater and commit the changes to hardware device.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(Aspose.ThreeD.Render.IBuffer,System.Int32,System.Int32)">
            <summary>
            Bind the buffer to current descriptor set
            </summary>
            <param name="buffer">Which buffer to bind</param>
            <param name="offset">Offset of the buffer to bind</param>
            <param name="size">Size of the buffer to bind</param>
            <returns>Return current instance for chaining operation</returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(Aspose.ThreeD.Render.IBuffer)">
            <summary>
            Bind the entire buffer to current descriptor
            </summary>
            <param name="buffer"></param>
            <returns>Return current instance for chaining operation</returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(System.Int32,Aspose.ThreeD.Render.IBuffer)">
            <summary>
            Bind the buffer to current descriptor set at specified binding location.
            </summary>
            <param name="binding">Binding location</param>
            <param name="buffer">The entire buffer to bind</param>
            <returns>Return current instance for chaining operation</returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(System.Int32,Aspose.ThreeD.Render.IBuffer,System.Int32,System.Int32)">
            <summary>
            Bind the buffer to current descriptor set at specified binding location.
            </summary>
            <param name="binding">Binding location</param>
            <param name="buffer">The buffer to bind</param>
            <param name="offset">Offset of the buffer to bind</param>
            <param name="size">Size of the buffer to bind</param>
            <returns>Return current instance for chaining operation</returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(Aspose.ThreeD.Render.ITextureUnit)">
            <summary>
            Bind the texture unit to current descriptor set
            </summary>
            <param name="texture">The texture unit to bind</param>
            <returns>Return current instance for chaining operation</returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.BindInputAttachment(Aspose.ThreeD.Render.ITextureUnit)">
            <summary>
            Bind the input attachment to current descriptor set
            </summary>
            <returns>Return current instance for chaining operation</returns>
        </member>
        <member name="M:Aspose.ThreeD.Render.DescriptorSetUpdater.Bind(System.Int32,Aspose.ThreeD.Render.ITextureUnit)">
            <summary>
            Bind the texture unit to current descriptor set
            </summary>
            <param name="binding">The binding location</param>
            <param name="texture">The texture unit to bind</param>
            <returns>Return current instance for chaining operation</returns>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.NamespaceDoc">
            <summary>
            All constraint classes are defined in this namespace
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.ConstraintPosition">
            <summary>
            This constraint class contains methods for accessing the properties of a position constraint.
            A position constraint lets you constrain the position of an object based on the position of one or more sources.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.ConstraintPosition.TypeName">
            <summary>
            The type name of the constraint.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintPosition.Affect">
            <summary>
            This property handles whether to affect x axis.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintPosition.Translation">
            <summary>
            This property handles translation offset.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintPosition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintPosition"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintPosition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintPosition"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.Constraint">
            <summary>
            Base class for weighted animation constraints.
            Constraints are primarily used to impose limits on properties of objects (e.g. position, orientation, scale) and to automate animation processes.
            A constrained object is an object with properties constrained by one or more weighted constraint sources. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.Constraint.Weight">
            <summary>
            This property represents the degree of influence of a constraint from 0.0 (no influence) to 100.0 (full influence).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.Constraint.Active">
            <summary>
            This property controls whether the constraint is applied or not.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.Constraint.Lock">
            <summary>
            This property handles the lock state of the constraint.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.Constraint.Sources">
            <summary>
            This property handles constraint source objects.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.Constraint.Target">
            <summary>
            This property handles constraint target objects.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.Constraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.Constraint"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.Constraint.AddConstraintSource(Aspose.ThreeD.A3DObject)">
            <summary>
            Add a source to the constraint. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.Constraint.SetSourceWeight(Aspose.ThreeD.A3DObject,System.Double)">
            <summary>
            Add a source to the constraint. 
            </summary>
            <param name="obj">The source object</param>
            <param name="w">The weight of the source object</param>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.Constraint.GetSourceWeight(Aspose.ThreeD.A3DObject)">
            <summary>
            Return the weight for given source object, or -1 if object is not defined in this constraint
            </summary>
            <param name="obj"></param>
            <returns>Source weight</returns>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.ConstraintRotation">
            <summary>
            This constraint class contains methods for accessing the properties of a rotation constraint.
            A rotation constraint lets you constrain the rotation of an object based on the rotation of one or more sources. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.ConstraintRotation.TypeName">
            <summary>
            The type name of the constraint.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintRotation.Affect">
            <summary>
            This property handles whether to affect x axis.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintRotation.Rotation">
            <summary>
            This property handles rotation offset.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintRotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintRotation"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintRotation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintRotation"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.ConstraintScale">
            <summary>
            This constraint class contains methods for accessing the properties of a scale constraint.
            A scale constraint lets you constrain the scale of an object based on the scale of one or more sources. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintScale.Affect">
            <summary>
            This property handles whether to affect x axis.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintScale.Scaling">
            <summary>
            This property handles scaling offset.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintScale.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintScale"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintScale.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintScale"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.ConstraintParent">
            <summary>
            The parent constraint creates a parent-to-child relationship between any two objects, from any two hierarchies.
            It creates the same relationship as the parent-to-child relationships found in hierarchies. You can use this constraint to connect objects without changing hierarchies. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintParent.AffectTranslation">
            <summary>
            This property handles whether to affect the translation of the constrained object
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintParent.AffectRotation">
            <summary>
            This property handles whether to affect the rotation of the constrained object around X axis.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintParent.AffectScaling">
            <summary>
            This property handles whether to affect the scaling of the constrained object along X axis.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintParent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintParent"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintParent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintParent"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.SolverMode">
            <summary>
            Solver pole vector mode. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.SolverMode.RotatePlane">
            <summary>
            Rotate plane solver.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.SolverMode.SingleChain">
            <summary>
            Single chain solver.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.PoleVectorMode">
            <summary>
            Pole vector mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PoleVectorMode.Vector">
            <summary>
            Pole vector type is vector.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PoleVectorMode.Object">
            <summary>
            Pole vector type is object.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.EvaluationMode">
            <summary>
            Evaluation mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.EvaluationMode.NeverTS">
            <summary>
            The constraints never read its animation on translation and scale for the nodes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.EvaluationMode.AutoDetect">
            <summary>
            The constraints read its animation on translation and scale for the nodes according to automatic detection.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.EvaluationMode.AlwaysTS">
            <summary>
            The constraints always read its animation on translation and scale for the nodes.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.ConstraintSingleChainIK">
            <summary>
             This constraint class contains methods for accessing the properties of a single chain IK constraint. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.TypeName">
            <summary>
            The type name of the constraint.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.PoleVectorType">
            <summary>
            This property handles pole vector type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.SolverType">
            <summary>
            This property handles solver type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.EvaluateTSAnim">
            <summary>
            This property handles evaluate TS animation.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.PoleVectorObjects">
            <summary>
            This property handles pole vector objects.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.PoleVector">
            <summary>
            This property handles pole vector.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.Twist">
            <summary>
            This property handles twist value.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.FirstJointObject">
            <summary>
            This property handles first joint object.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.EndJointObject">
            <summary>
            This property handles end joint object.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.EffectorObject">
            <summary>
            This property handles effector object.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintSingleChainIK"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintSingleChainIK.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintSingleChainIK"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.CharacterConstraint">
            <summary>
            A Character is a person or animal with pre-defined skeleton system.
            The skeleton system is composed of multiple named node (skeleton). This class contains all methods to setup an exported character or query information on an imported character. This class also contains some methods for manipulating the CharacterLink, ControlSet.
            The most important part of a Character is the CharacterLink. There is one CharacterLink for each characterized node. For more information see CharacterLink class documentation.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.CharacterConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.CharacterConstraint.GetCharacterGroupElements(Aspose.ThreeD.Constraints.GroupId)">
            <summary>
            Get elements in a given character group. 
            </summary>
            <returns>The character group elements.</returns>
            <param name="groupId">Group identifier.</param>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.CharacterConstraint.GetCharacterNodeNameFromNodeId(Aspose.ThreeD.Constraints.NodeId)">
            <summary>
            Get character node name associated with a given character node ID 
            </summary>
            <returns>The character node name from node identifier.</returns>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.CharacterConstraint.GetCharacterNodeIdFromNodeName(System.String)">
            <summary>
            Get the character node ID associated with a given character node name. 
            </summary>
            <returns>The character node identifier from node name.</returns>
            <param name="nodeName">Node name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.CharacterConstraint.GetCharacterLink(Aspose.ThreeD.Constraints.NodeId)">
            <summary>
            Get a character link associated with a given character node ID 
            </summary>
            <returns>The character link.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.CharacterConstraint.SetCharacterLink(Aspose.ThreeD.Constraints.NodeId,Aspose.ThreeD.Constraints.CharacterLink)">
            <summary>
            Associate a character link to a given character node ID. 
            </summary>
            <param name="node">Node.</param>
            <param name="link">Link.</param>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.PullIterationCount">
            <summary>
            Gets or sets the pull iteration count.
            </summary>
            <value>The pull iteration count.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.Posture">
            <summary>
            Gets or sets the posture.
            </summary>
            <value>The posture.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ForceActorSpace">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> force actor space.
            </summary>
            <value>true if force actor space; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ScaleCompensation">
            <summary>
            Gets or sets the scale compensation.
            </summary>
            <value>The scale compensation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ScaleCompensationMode">
            <summary>
            Gets or sets the scale compensation mode.
            </summary>
            <value>The scale compensation mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HipsHeightCompensation">
            <summary>
            Gets or sets the hips height compensation.
            </summary>
            <value>The hips height compensation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HipsHeightCompensationMode">
            <summary>
            Gets or sets the hips height compensation mode.
            </summary>
            <value>The hips height compensation mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleHeightCompensation">
            <summary>
            Gets or sets the ankle height compensation.
            </summary>
            <value>The ankle height compensation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleHeightCompensationMode">
            <summary>
            Gets or sets the ankle height compensation mode.
            </summary>
            <value>The ankle height compensation mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleProximityCompensation">
            <summary>
            Gets or sets the ankle proximity compensation.
            </summary>
            <value>The ankle proximity compensation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleProximityCompensationMode">
            <summary>
            Gets or sets the ankle proximity compensation mode.
            </summary>
            <value>The ankle proximity compensation mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.MassCenterCompensation">
            <summary>
            Gets or sets the mass center compensation.
            </summary>
            <value>The mass center compensation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ApplyLimits">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> apply limits.
            </summary>
            <value>true if apply limits; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ChestReduction">
            <summary>
            Gets or sets the chest reduction.
            </summary>
            <value>The chest reduction.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CollarReduction">
            <summary>
            Gets or sets the collar reduction.
            </summary>
            <value>The collar reduction.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.NeckReduction">
            <summary>
            Gets or sets the neck reduction.
            </summary>
            <value>The neck reduction.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HeadReduction">
            <summary>
            Gets or sets the head reduction.
            </summary>
            <value>The head reduction.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftAnkle">
            <summary>
            Gets or sets the reach actor left ankle.
            </summary>
            <value>The reach actor left ankle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightAnkle">
            <summary>
            Gets or sets the reach actor right ankle.
            </summary>
            <value>The reach actor right ankle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftKnee">
            <summary>
            Gets or sets the reach actor left knee.
            </summary>
            <value>The reach actor left knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightKnee">
            <summary>
            Gets or sets the reach actor right knee.
            </summary>
            <value>The reach actor right knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorChest">
            <summary>
            Gets or sets the reach actor chest.
            </summary>
            <value>The reach actor chest.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorHead">
            <summary>
            Gets or sets the reach actor head.
            </summary>
            <value>The reach actor head.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftWrist">
            <summary>
            Gets or sets the reach actor left wrist.
            </summary>
            <value>The reach actor left wrist.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightWrist">
            <summary>
            Gets or sets the reach actor right wrist.
            </summary>
            <value>The reach actor right wrist.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftElbow">
            <summary>
            Gets or sets the reach actor left elbow.
            </summary>
            <value>The reach actor left elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightElbow">
            <summary>
            Gets or sets the reach actor right elbow.
            </summary>
            <value>The reach actor right elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftFingerBase">
            <summary>
            Gets or sets the reach actor left finger base.
            </summary>
            <value>The reach actor left finger base.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightFingerBase">
            <summary>
            Gets or sets the reach actor right finger base.
            </summary>
            <value>The reach actor right finger base.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftToesBase">
            <summary>
            Gets or sets the reach actor left toes base.
            </summary>
            <value>The reach actor left toes base.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightToesBase">
            <summary>
            Gets or sets the reach actor right toes base.
            </summary>
            <value>The reach actor right toes base.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftFingerBaseRotation">
            <summary>
            Gets or sets the reach actor left finger base rotation.
            </summary>
            <value>The reach actor left finger base rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightFingerBaseRotation">
            <summary>
            Gets or sets the reach actor right finger base rotation.
            </summary>
            <value>The reach actor right finger base rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftToesBaseRotation">
            <summary>
            Gets or sets the reach actor left toes base rotation.
            </summary>
            <value>The reach actor left toes base rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightToesBaseRotation">
            <summary>
            Gets or sets the reach actor right toes base rotation.
            </summary>
            <value>The reach actor right toes base rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftAnkleRotation">
            <summary>
            Gets or sets the reach actor left ankle rotation.
            </summary>
            <value>The reach actor left ankle rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightAnkleRotation">
            <summary>
            Gets or sets the reach actor right ankle rotation.
            </summary>
            <value>The reach actor right ankle rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorHeadRotation">
            <summary>
            Gets or sets the reach actor head rotation.
            </summary>
            <value>The reach actor head rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLeftWristRotation">
            <summary>
            Gets or sets the reach actor left wrist rotation.
            </summary>
            <value>The reach actor left wrist rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorRightWristRotation">
            <summary>
            Gets or sets the reach actor right wrist rotation.
            </summary>
            <value>The reach actor right wrist rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorChestRotation">
            <summary>
            Gets or sets the reach actor chest rotation.
            </summary>
            <value>The reach actor chest rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ReachActorLowerChestRotation">
            <summary>
            Gets or sets the reach actor lower chest rotation.
            </summary>
            <value>The reach actor lower chest rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HipsTOffset">
            <summary>
            Gets or sets the hips T offset.
            </summary>
            <value>The hips T offset.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ChestTOffset">
            <summary>
            Gets and sets the chest T offset
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RollExtractionMode">
            <summary>
            Gets or sets the roll extraction mode.
            </summary>
            <value>The roll extraction mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftUpLegRoll">
            <summary>
            Gets or sets the left up leg roll.
            </summary>
            <value>The left up leg roll.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftUpLegRollMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left up leg roll mode.
            </summary>
            <value>true if left up leg roll mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftLegRoll">
            <summary>
            Gets or sets the left leg roll.
            </summary>
            <value>The left leg roll.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftLegRollMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left leg roll mode.
            </summary>
            <value>true if left leg roll mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightUpLegRoll">
            <summary>
            Gets or sets the right up leg roll.
            </summary>
            <value>The right up leg roll.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightUpLegRollMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right up leg roll mode.
            </summary>
            <value>true if right up leg roll mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightLegRoll">
            <summary>
            Gets or sets the right leg roll.
            </summary>
            <value>The right leg roll.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightLegRollMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right leg roll mode.
            </summary>
            <value>true if right leg roll mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftArmRoll">
            <summary>
            Gets or sets the left arm roll.
            </summary>
            <value>The left arm roll.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftArmRollMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left arm roll mode.
            </summary>
            <value>true if left arm roll mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftForeArmRoll">
            <summary>
            Gets or sets the left fore arm roll.
            </summary>
            <value>The left fore arm roll.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftForeArmRollMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left fore arm roll mode.
            </summary>
            <value>true if left fore arm roll mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightArmRoll">
            <summary>
            Gets or sets the right arm roll.
            </summary>
            <value>The right arm roll.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightArmRollMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right arm roll mode.
            </summary>
            <value>true if right arm roll mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightForeArmRoll">
            <summary>
            Gets or sets the right fore arm roll.
            </summary>
            <value>The right fore arm roll.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightForeArmRollMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right fore arm
            roll mode.
            </summary>
            <value>true if right fore arm roll mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftUpLegRollEx">
            <summary>
            Gets or sets the left up leg roll ex.
            </summary>
            <value>The left up leg roll ex.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftUpLegRollExMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left up leg roll
            ex mode.
            </summary>
            <value>true if left up leg roll ex mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftLegRollEx">
            <summary>
            Gets or sets the left leg roll ex.
            </summary>
            <value>The left leg roll ex.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftLegRollExMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left leg roll ex mode.
            </summary>
            <value>true if left leg roll ex mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightUpLegRollEx">
            <summary>
            Gets or sets the right up leg roll ex.
            </summary>
            <value>The right up leg roll ex.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightUpLegRollExMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right up leg roll
            ex mode.
            </summary>
            <value>true if right up leg roll ex mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightLegRollEx">
            <summary>
            Gets or sets the right leg roll ex.
            </summary>
            <value>The right leg roll ex.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightLegRollExMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right leg roll ex mode.
            </summary>
            <value>true if right leg roll ex mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftArmRollEx">
            <summary>
            Gets or sets the left arm roll ex.
            </summary>
            <value>The left arm roll ex.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftArmRollExMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left arm roll ex mode.
            </summary>
            <value>true if left arm roll ex mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftForeArmRollEx">
            <summary>
            Gets or sets the left fore arm roll ex.
            </summary>
            <value>The left fore arm roll ex.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftForeArmRollExMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left fore arm roll
            ex mode.
            </summary>
            <value>true if left fore arm roll ex mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightArmRollEx">
            <summary>
            Gets or sets the right arm roll ex.
            </summary>
            <value>The right arm roll ex.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightArmRollExMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right arm roll ex mode.
            </summary>
            <value>true if right arm roll ex mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightForeArmExRoll">
            <summary>
            Gets or sets the right fore arm ex roll.
            </summary>
            <value>The right fore arm ex roll.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightForeArmRollExMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right fore arm
            roll ex mode.
            </summary>
            <value>true if right fore arm roll ex mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ContactBehaviour">
            <summary>
            Gets or sets the contact behaviour.
            </summary>
            <value>The contact behaviour.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootFloorContact">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> foot floor contact.
            </summary>
            <value>true if foot floor contact; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootAutomaticToes">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> foot automatic toes.
            </summary>
            <value>true if foot automatic toes; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootFloorPivot">
            <summary>
            Gets or sets the foot floor pivot.
            </summary>
            <value>The foot floor pivot.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootBottomToAnkle">
            <summary>
            Gets or sets the foot bottom to ankle.
            </summary>
            <value>The foot bottom to ankle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootBackToAnkle">
            <summary>
            Gets or sets the foot back to ankle.
            </summary>
            <value>The foot back to ankle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootMiddleToAnkle">
            <summary>
            Gets or sets the foot middle to ankle.
            </summary>
            <value>The foot middle to ankle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootFrontToMiddle">
            <summary>
            Gets or sets the foot front to middle.
            </summary>
            <value>The foot front to middle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootInToAnkle">
            <summary>
            Gets or sets the foot in to ankle.
            </summary>
            <value>The foot in to ankle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootOutToAnkle">
            <summary>
            Gets or sets the foot out to ankle.
            </summary>
            <value>The foot out to ankle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootContactSize">
            <summary>
            Gets or sets the size of the foot contact.
            </summary>
            <value>The size of the foot contact.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootFingerContact">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> foot finger contact.
            </summary>
            <value>true if foot finger contact; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootContactType">
            <summary>
            Gets or sets the type of the foot contact.
            </summary>
            <value>The type of the foot contact.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootFingerContactMode">
            <summary>
            Gets or sets the foot finger contact mode.
            </summary>
            <value>The foot finger contact mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootContactStiffness">
            <summary>
            Gets or sets the foot contact stiffness.
            </summary>
            <value>The foot contact stiffness.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FootFingerContactRollStiffness">
            <summary>
            Gets or sets the foot finger contact roll stiffness.
            </summary>
            <value>The foot finger contact roll stiffness.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandFloorContact">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> hand floor contact.
            </summary>
            <value>true if hand floor contact; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandAutomaticFingers">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> hand automatic fingers.
            </summary>
            <value>true if hand automatic fingers; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandFloorPivot">
            <summary>
            Gets or sets the hand floor pivot.
            </summary>
            <value>The hand floor pivot.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandBottomToWrist">
            <summary>
            Gets or sets the hand bottom to wrist.
            </summary>
            <value>The hand bottom to wrist.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandBackToWrist">
            <summary>
            Gets or sets the hand back to wrist.
            </summary>
            <value>The hand back to wrist.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandMiddleToWrist">
            <summary>
            Gets or sets the hand middle to wrist.
            </summary>
            <value>The hand middle to wrist.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandFrontToMiddle">
            <summary>
            Gets or sets the hand front to middle.
            </summary>
            <value>The hand front to middle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandInToWrist">
            <summary>
            Gets or sets the hand in to wrist.
            </summary>
            <value>The hand in to wrist.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandOutToWrist">
            <summary>
            Gets or sets the hand out to wrist.
            </summary>
            <value>The hand out to wrist.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandContactSize">
            <summary>
            Gets or sets the size of the hand contact.
            </summary>
            <value>The size of the hand contact.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandFingerContact">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> hand finger contact.
            </summary>
            <value>true if hand finger contact; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandContactType">
            <summary>
            Gets or sets the type of the hand contact.
            </summary>
            <value>The type of the hand contact.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandFingerContactMode">
            <summary>
            Gets or sets the hand finger contact mode.
            </summary>
            <value>The hand finger contact mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandContactStiffness">
            <summary>
            Gets or sets the hand contact stiffness.
            </summary>
            <value>The hand contact stiffness.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HandFingerContactRollStiffness">
            <summary>
            Gets or sets the hand finger contact roll stiffness.
            </summary>
            <value>The hand finger contact roll stiffness.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftHandThumbTip">
            <summary>
            Gets or sets the left hand thumb tip.
            </summary>
            <value>The left hand thumb tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftHandIndexTip">
            <summary>
            Gets or sets the left hand index tip.
            </summary>
            <value>The left hand index tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftHandMiddleTip">
            <summary>
            Gets or sets the left hand middle tip.
            </summary>
            <value>The left hand middle tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftHandRingTip">
            <summary>
            Gets or sets the left hand ring tip.
            </summary>
            <value>The left hand ring tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftHandPinkyTip">
            <summary>
            Gets or sets the left hand pinky tip.
            </summary>
            <value>The left hand pinky tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftHandExtraFingerTip">
            <summary>
            Gets or sets the left hand extra finger tip.
            </summary>
            <value>The left hand extra finger tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightHandThumbTip">
            <summary>
            Gets or sets the right hand thumb tip.
            </summary>
            <value>The right hand thumb tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightHandIndexTip">
            <summary>
            Gets or sets the right hand index tip.
            </summary>
            <value>The right hand index tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightHandMiddleTip">
            <summary>
            Gets or sets the right hand middle tip.
            </summary>
            <value>The right hand middle tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightHandRingTip">
            <summary>
            Gets or sets the right hand ring tip.
            </summary>
            <value>The right hand ring tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightHandPinkyTip">
            <summary>
            Gets or sets the right hand pinky tip.
            </summary>
            <value>The right hand pinky tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightHandExtraFingerTip">
            <summary>
            Gets or sets the right hand extra finger tip.
            </summary>
            <value>The right hand extra finger tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftFootThumbTip">
            <summary>
            Gets or sets the left foot thumb tip.
            </summary>
            <value>The left foot thumb tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftFootIndexTip">
            <summary>
            Gets or sets the left foot index tip.
            </summary>
            <value>The left foot index tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftFootMiddleTip">
            <summary>
            Gets or sets the left foot middle tip.
            </summary>
            <value>The left foot middle tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftFootRingTip">
            <summary>
            Gets or sets the left foot ring tip.
            </summary>
            <value>The left foot ring tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftFootPinkyTip">
            <summary>
            Gets or sets the left foot pinky tip.
            </summary>
            <value>The left foot pinky tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftFootExtraFingerTip">
            <summary>
            Gets or sets the left foot extra finger tip.
            </summary>
            <value>The left foot extra finger tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightFootThumbTip">
            <summary>
            Gets or sets the right foot thumb tip.
            </summary>
            <value>The right foot thumb tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightFootIndexTip">
            <summary>
            Gets or sets the right foot index tip.
            </summary>
            <value>The right foot index tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightFootMiddleTip">
            <summary>
            Gets or sets the right foot middle tip.
            </summary>
            <value>The right foot middle tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightFootRingTip">
            <summary>
            Gets or sets the right foot ring tip.
            </summary>
            <value>The right foot ring tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightFootPinkyTip">
            <summary>
            Gets or sets the right foot pinky tip.
            </summary>
            <value>The right foot pinky tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightFootExtraFingerTip">
            <summary>
            Gets or sets the right foot extra finger tip.
            </summary>
            <value>The right foot extra finger tip.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.FingerSolving">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> finger solving.
            </summary>
            <value>true if finger solving; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullLeftToeBase">
            <summary>
            Gets or sets the ctrl pull left toe base.
            </summary>
            <value>The ctrl pull left toe base.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullLeftFoot">
            <summary>
            Gets or sets the ctrl pull left foot.
            </summary>
            <value>The ctrl pull left foot.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullLeftKnee">
            <summary>
            Gets or sets the ctrl pull left knee.
            </summary>
            <value>The ctrl pull left knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullRightToeBase">
            <summary>
            Gets or sets the ctrl pull right toe base.
            </summary>
            <value>The ctrl pull right toe base.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullRightFoot">
            <summary>
            Gets or sets the ctrl pull right foot.
            </summary>
            <value>The ctrl pull right foot.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullRightKnee">
            <summary>
            Gets or sets the ctrl pull right knee.
            </summary>
            <value>The ctrl pull right knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullLeftFingerBase">
            <summary>
            Gets or sets the ctrl pull left finger base.
            </summary>
            <value>The ctrl pull left finger base.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullLeftHand">
            <summary>
            Gets or sets the ctrl pull left hand.
            </summary>
            <value>The ctrl pull left hand.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullLeftElbow">
            <summary>
            Gets or sets the ctrl pull left elbow.
            </summary>
            <value>The ctrl pull left elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullRightFingerBase">
            <summary>
            Gets or sets the ctrl pull right finger base.
            </summary>
            <value>The ctrl pull right finger base.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullRightHand">
            <summary>
            Gets or sets the ctrl pull right hand.
            </summary>
            <value>The ctrl pull right hand.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullRightElbow">
            <summary>
            Gets or sets the ctrl pull right elbow.
            </summary>
            <value>The ctrl pull right elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlChestPullLeftHand">
            <summary>
            Gets or sets the ctrl chest pull left hand.
            </summary>
            <value>The ctrl chest pull left hand.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlChestPullRightHand">
            <summary>
            Gets or sets the ctrl chest pull right hand.
            </summary>
            <value>The ctrl chest pull right hand.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlPullHead">
            <summary>
            Gets or sets the ctrl pull head.
            </summary>
            <value>The ctrl pull head.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistHipsPosition">
            <summary>
            Gets or sets the ctrl resist hips position.
            </summary>
            <value>The ctrl resist hips position.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlEnforceGravity">
            <summary>
            Gets or sets the ctrl enforce gravity.
            </summary>
            <value>The ctrl enforce gravity.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistHipsOrientation">
            <summary>
            Gets or sets the ctrl resist hips orientation.
            </summary>
            <value>The ctrl resist hips orientation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistChestPosition">
            <summary>
            Gets or sets the ctrl resist chest position.
            </summary>
            <value>The ctrl resist chest position.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistChestOrientation">
            <summary>
            Gets or sets the ctrl resist chest orientation.
            </summary>
            <value>The ctrl resist chest orientation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistLeftCollar">
            <summary>
            Gets or sets the ctrl resist left collar.
            </summary>
            <value>The ctrl resist left collar.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistRightCollar">
            <summary>
            Gets or sets the ctrl resist right collar.
            </summary>
            <value>The ctrl resist right collar.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistLeftKnee">
            <summary>
            Gets or sets the ctrl resist left knee.
            </summary>
            <value>The ctrl resist left knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistMaximumExtensionLeftKnee">
            <summary>
            Gets or sets the ctrl resist maximum extension left knee.
            </summary>
            <value>The ctrl resist maximum extension left knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistCompressionFactorLeftKnee">
            <summary>
            Gets or sets the ctrl resist compression factor left knee.
            </summary>
            <value>The ctrl resist compression factor left knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistRightKnee">
            <summary>
            Gets or sets the ctrl resist right knee.
            </summary>
            <value>The ctrl resist right knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistMaximumExtensionRightKnee">
            <summary>
            Gets or sets the ctrl resist maximum extension right knee.
            </summary>
            <value>The ctrl resist maximum extension right knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistCompressionFactorRightKnee">
            <summary>
            Gets or sets the ctrl resist compression factor right knee.
            </summary>
            <value>The ctrl resist compression factor right knee.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistLeftElbow">
            <summary>
            Gets or sets the ctrl resist left elbow.
            </summary>
            <value>The ctrl resist left elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistMaximumExtensionLeftElbow">
            <summary>
            Gets or sets the ctrl resist maximum extension left elbow.
            </summary>
            <value>The ctrl resist maximum extension left elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistCompressionFactorLeftElbow">
            <summary>
            Gets or sets the ctrl resist compression factor left elbow.
            </summary>
            <value>The ctrl resist compression factor left elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistRightElbow">
            <summary>
            Gets or sets the ctrl resist right elbow.
            </summary>
            <value>The ctrl resist right elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistMaximumExtensionRightElbow">
            <summary>
            Gets or sets the ctrl resist maximum extension right elbow.
            </summary>
            <value>The ctrl resist maximum extension right elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlResistCompressionFactorRightElbow">
            <summary>
            Gets or sets the ctrl resist compression factor right elbow.
            </summary>
            <value>The ctrl resist compression factor right elbow.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlSpineStiffness">
            <summary>
            Gets or sets the ctrl spine stiffness.
            </summary>
            <value>The ctrl spine stiffness.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CtrlNeckStiffness">
            <summary>
            Gets or sets the ctrl neck stiffness.
            </summary>
            <value>The ctrl neck stiffness.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.MirrorMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> mirror mode.
            </summary>
            <value>true if mirror mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ShoulderCorrection">
            <summary>
            Gets or sets the shoulder correction.
            </summary>
            <value>The shoulder correction.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftKneeKillPitch">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left knee kill pitch.
            </summary>
            <value>true if left knee kill pitch; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightKneeKillPitch">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right knee kill pitch.
            </summary>
            <value>true if right knee kill pitch; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftElbowKillPitch">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> left elbow kill pitch.
            </summary>
            <value>true if left elbow kill pitch; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightElbowKillPitch">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> right elbow kill pitch.
            </summary>
            <value>true if right elbow kill pitch; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HipsTranslationMode">
            <summary>
            Gets or sets the hips translation mode.
            </summary>
            <value>The hips translation mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.WriteReference">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> write reference.
            </summary>
            <value>true if write reference; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SyncMode">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> sync mode.
            </summary>
            <value>true if sync mode; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.Damping">
            <summary>
            Gets or sets the damping.
            </summary>
            <value>The damping.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.OrientationDamping">
            <summary>
            Gets or sets the orientation damping.
            </summary>
            <value>The orientation damping.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.OrientationDampingMode">
            <summary>
            Gets or sets the orientation damping mode.
            </summary>
            <value>The orientation damping mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.DisplacementDamping">
            <summary>
            Gets or sets the displacement damping.
            </summary>
            <value>The displacement damping.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.DisplacementDampingMode">
            <summary>
            Gets or sets the displacement damping mode.
            </summary>
            <value>The displacement damping mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.DisplacementMemory">
            <summary>
            Gets or sets the displacement memory.
            </summary>
            <value>The displacement memory.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.DisplacementMemoryMode">
            <summary>
            Gets or sets the displacement memory mode.
            </summary>
            <value>The displacement memory mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HipsDisplacementDamping">
            <summary>
            Gets or sets the hips displacement damping.
            </summary>
            <value>The hips displacement damping.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HipsDisplacementDampingMode">
            <summary>
            Gets or sets the hips displacement damping mode.
            </summary>
            <value>The hips displacement damping mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleDisplacementDamping">
            <summary>
            Gets or sets the ankle displacement damping.
            </summary>
            <value>The ankle displacement damping.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleDisplacementDampingMode">
            <summary>
            Gets or sets the ankle displacement damping mode.
            </summary>
            <value>The ankle displacement damping mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.WristDisplacementDamping">
            <summary>
            Gets or sets the wrist displacement damping.
            </summary>
            <value>The wrist displacement damping.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.WristDisplacementDampingMode">
            <summary>
            Gets or sets the wrist displacement damping mode.
            </summary>
            <value>The wrist displacement damping mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.Stabilization">
            <summary>
            Gets or sets the stabilization.
            </summary>
            <value>The stabilization.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationTime">
            <summary>
            Gets or sets the ankle stabilization time.
            </summary>
            <value>The ankle stabilization time.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationTimeMode">
            <summary>
            Gets or sets the ankle stabilization time mode.
            </summary>
            <value>The ankle stabilization time mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationPerimeter">
            <summary>
            Gets or sets the ankle stabilization perimeter.
            </summary>
            <value>The ankle stabilization perimeter.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationPerimeterMode">
            <summary>
            Gets or sets the ankle stabilization perimeter mode.
            </summary>
            <value>The ankle stabilization perimeter mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationAngularPerimeter">
            <summary>
            Gets or sets the ankle stabilization angular perimeter.
            </summary>
            <value>The ankle stabilization angular perimeter.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationAngularPerimeterMode">
            <summary>
            Gets or sets the ankle stabilization angular perimeter mode.
            </summary>
            <value>The ankle stabilization angular perimeter mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationFloorProximity">
            <summary>
            Gets or sets the ankle stabilization floor proximity.
            </summary>
            <value>The ankle stabilization floor proximity.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationFloorProximityMode">
            <summary>
            Gets or sets the ankle stabilization floor proximity mode.
            </summary>
            <value>The ankle stabilization floor proximity mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationDamping">
            <summary>
            Gets or sets the ankle stabilization damping.
            </summary>
            <value>The ankle stabilization damping.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationDampingMode">
            <summary>
            Gets or sets the ankle stabilization damping mode.
            </summary>
            <value>The ankle stabilization damping mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationRecoveryTime">
            <summary>
            Gets or sets the ankle stabilization recovery time.
            </summary>
            <value>The ankle stabilization recovery time.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.AnkleStabilizationRecoveryTimeMode">
            <summary>
            Gets or sets the ankle stabilization recovery time mode.
            </summary>
            <value>The ankle stabilization recovery time mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SourceObject">
            <summary>
            Gets or sets the source object.
            </summary>
            <value>The source object.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.DestinationObject">
            <summary>
            Gets or sets the destination object.
            </summary>
            <value>The destination object.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.Actor">
            <summary>
            Gets or sets the actor.
            </summary>
            <value>The actor.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.Character">
            <summary>
            Gets or sets the character.
            </summary>
            <value>The character.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ControlSet">
            <summary>
            Gets or sets the control set.
            </summary>
            <value>The control set.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.HikVersion">
            <summary>
            Gets or sets the hik version.
            </summary>
            <value>The hik version.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.Characterize">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> is characterize.
            </summary>
            <value>true if characterize; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LockXForm">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> lock X form.
            </summary>
            <value>true if lock X form; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LockPick">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Aspose.ThreeD.Constraints.CharacterConstraint"/> lock pick.
            </summary>
            <value>true if lock pick; otherwise, false.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RealisticShoulder">
            <summary>
            Gets or sets the realistic shoulder.
            </summary>
            <value>The realistic shoulder.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.CollarStiffness">
            <summary>
            Gets or sets the collar stiffness.
            </summary>
            <value>The collar stiffness.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.ExtraCollarRatio">
            <summary>
            Gets or sets the extra collar ratio.
            </summary>
            <value>The extra collar ratio.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftLegMaxExtensionAngle">
            <summary>
            Gets or sets the left leg max extension angle.
            </summary>
            <value>The left leg max extension angle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightLegMaxExtensionAngle">
            <summary>
            Gets or sets the right leg max extension angle.
            </summary>
            <value>The right leg max extension angle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.LeftArmMaxExtensionAngle">
            <summary>
            Gets or sets the left arm max extension angle.
            </summary>
            <value>The left arm max extension angle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.RightArmMaxExtensionAngle">
            <summary>
            Gets or sets the right arm max extension angle.
            </summary>
            <value>The right arm max extension angle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.StretchStartArmsAndLegs">
            <summary>
            Gets or sets the stretch start arms and legs.
            </summary>
            <value>The stretch start arms and legs.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.StretchStopArmsAndLegs">
            <summary>
            Gets or sets the stretch stop arms and legs.
            </summary>
            <value>The stretch stop arms and legs.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSScaleArmsAndLegs">
            <summary>
            Gets or sets the sn S scale arms and legs.
            </summary>
            <value>The sn S scale arms and legs.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSReachLeftWrist">
            <summary>
            Gets or sets the sn S reach left wrist.
            </summary>
            <value>The sn S reach left wrist.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSReachRightWrist">
            <summary>
            Gets or sets the sn S reach right wrist.
            </summary>
            <value>The sn S reach right wrist.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSReachLeftAnkle">
            <summary>
            Gets or sets the sn S reach left ankle.
            </summary>
            <value>The sn S reach left ankle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSReachRightAnkle">
            <summary>
            Gets or sets the sn S reach right ankle.
            </summary>
            <value>The sn S reach right ankle.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSScaleSpine">
            <summary>
            Gets or sets the sn S scale spine.
            </summary>
            <value>The sn S scale spine.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSScaleSpineChildren">
            <summary>
            Gets or sets the sn S scale spine children.
            </summary>
            <value>The sn S scale spine children.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSSpineFreedom">
            <summary>
            Gets or sets the sn S spine freedom.
            </summary>
            <value>The sn S spine freedom.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSReachChestEnd">
            <summary>
            Gets or sets the sn S reach chest end.
            </summary>
            <value>The sn S reach chest end.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSScaleNeck">
            <summary>
            Gets or sets the sn S scale neck.
            </summary>
            <value>The sn S scale neck.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSNeckFreedom">
            <summary>
            Gets or sets the sn S neck freedom.
            </summary>
            <value>The sn S neck freedom.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterConstraint.SnSReachHead">
            <summary>
            Gets or sets the sn S reach head.
            </summary>
            <value>The sn S reach head.</value>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.InputType">
            <summary>
            Character input type. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.InputType.InputActor">
            <summary>
            Not supported. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.InputType.InputCharacter">
            <summary>
            The character's input is another character. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.InputType.InputMarkerSet">
            <summary>
            The character's input is a control rig. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.InputType.OutputMarkerSet">
            <summary>
            Not supported. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.InputType.InputStancePose">
            <summary>
            The character's input is the stance pose. 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.GroupId">
            <summary>
            Define ID for character groups that contains multiple character nodes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.Base">
            <summary>
            The base.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.Auxiliary">
            <summary>
            The auxiliary.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.Spine">
            <summary>
            The spine.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.Roll">
            <summary>
            The roll.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.Special">
            <summary>
            The special.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.LeftHand">
            <summary>
            The left hand.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.RightHand">
            <summary>
            The right hand.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.Props">
            <summary>
            The properties.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.GameModeParent">
            <summary>
            The game mode parent.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.Neck">
            <summary>
            The neck.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.LeftFoot">
            <summary>
            The left foot.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.RightFoot">
            <summary>
            The right foot.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.GroupId.FloorContact">
            <summary>
            The floor contact.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.NodeId">
            <summary>
            Define ID for each character node.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Hips">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftHip">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftKnee">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftAnkle">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFoot">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightHip">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightKnee">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightAnkle">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFoot">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Waist">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Chest">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftCollar">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftShoulder">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftElbow">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftWrist">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightCollar">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightShoulder">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightElbow">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightWrist">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Head">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftHipRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftKneeRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightHipRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightKneeRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftShoulderRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftElbowRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightShoulderRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightElbowRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Spine2">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Spine3">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Spine4">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Spine5">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Spine6">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Spine7">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Spine8">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Spine9">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftThumbA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftThumbB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftThumbC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftIndexA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftIndexB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftIndexC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftMiddleA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftMiddleB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftMiddleC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftRingA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftRingB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftRingC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftPinkyA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftPinkyB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftPinkyC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightThumbA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightThumbB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightThumbC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightIndexA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightIndexB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightIndexC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightMiddleA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightMiddleB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightMiddleC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightRingA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightRingB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightRingC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightPinkyA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightPinkyB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightPinkyC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Reference">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFloor">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFloor">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.HipsTranslation">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Props0">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Props1">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Props2">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Props3">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Props4">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentLeftHipRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentLeftKnee">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentLeftKneeRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentRightHipRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentRightKnee">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentRightKneeRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentLeftShoulderRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentLeftElbow">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentLeftElbowRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentRightShoulderRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentRightElbow">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.GameModeParentRightElbowRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftUpLegRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftLegRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightUpLegRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightLegRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftArmRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftForeArmRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightArmRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightForeArmRoll">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftHandFloor">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightHandFloor">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftHand">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightHand">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck1">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck2">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck3">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck4">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck5">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck6">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck7">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck8">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.Neck9">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInHandThumb">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftThumbD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInHandIndex">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftIndexD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInHandMiddle">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftMiddleD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInHandRing">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftRingD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInHandPinky">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftPinkyD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInHandExtraFinger">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftExtraFingerA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftExtraFingerB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftExtraFingerC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftExtraFingerD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInHandThumb">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightThumbD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInHandIndex">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightIndexD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInHandMiddle">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightMiddleD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInHandRing">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightRingD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInHandPinky">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightPinkyD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInHandExtraFinger">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightExtraFingerA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightExtraFingerB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightExtraFingerC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightExtraFingerD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInFootThumb">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootThumbA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootThumbB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootThumbC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootThumbD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInFootIndex">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootIndexA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootIndexB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootIndexC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootIndexD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInFootMiddle">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootMiddleA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootMiddleB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootMiddleC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootMiddleD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInFootRing">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootRingA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootRingB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootRingC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootRingD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInFootPinky">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootPinkyA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootPinkyB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootPinkyC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootPinkyD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftInFootExtraFinger">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootExtraFingerA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootExtraFingerB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootExtraFingerC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftFootExtraFingerD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInFootThumb">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootThumbA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootThumbB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootThumbC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootThumbD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInFootIndex">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootIndexA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootIndexB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootIndexC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootIndexD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInFootMiddle">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootMiddleA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootMiddleB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootMiddleC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootMiddleD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInFootRing">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootRingA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootRingB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootRingC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootRingD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInFootPinky">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootPinkyA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootPinkyB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootPinkyC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootPinkyD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightInFootExtraFinger">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootExtraFingerA">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootExtraFingerB">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootExtraFingerC">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightFootExtraFingerD">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.LeftCollarExtra">
            <summary>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.NodeId.RightCollarExtra">
            <summary>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.OffAutoUser">
            <summary>
            Off auto user.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.OffAutoUser.ParamModeOff">
            <summary>
            The parameter mode off.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.OffAutoUser.ParamModeAuto">
            <summary>
            The parameter mode auto.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.OffAutoUser.ParamModeUser">
            <summary>
            The parameter mode user.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.AutoUser">
            <summary>
            Auto user.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.AutoUser.ParamModeAuto2">
            <summary>
            The parameter mode auto2.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.AutoUser.ParamModeUser2">
            <summary>
            The parameter mode user2.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.PostureMode">
            <summary>
            Posture mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PostureMode.Biped">
            <summary>
            The biped.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PostureMode.Quadriped">
            <summary>
            The quadriped.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.FloorPivot">
            <summary>
            Floor pivot.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FloorPivot.Auto">
            <summary>
            The auto.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FloorPivot.Ankle">
            <summary>
            The ankle.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FloorPivot.Toes">
            <summary>
            The toes.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.RollExtractionMode">
            <summary>
            Roll extraction mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.RollExtractionMode.Relative">
            <summary>
            The relative.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.RollExtractionMode.Absolute">
            <summary>
            The absolute.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.HipsTranslationMode">
            <summary>
            Hips translation mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.HipsTranslationMode.WorldRigid">
            <summary>
            The world rigid.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.HipsTranslationMode.BodyRigid">
            <summary>
            The body rigid.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.FootContactType">
            <summary>
            Foot contact type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FootContactType.Normal">
            <summary>
            The normal.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FootContactType.Ankle">
            <summary>
            The ankle.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FootContactType.ToeBase">
            <summary>
            The toe base.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FootContactType.Hoof">
            <summary>
            The hoof.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.HandContactType">
            <summary>
            Hand contact type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.HandContactType.Normal">
            <summary>
            The normal.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.HandContactType.Wrist">
            <summary>
            The wrist.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.HandContactType.FingerBase">
            <summary>
            The finger base.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.HandContactType.Hoof">
            <summary>
            The hoof.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.FingerContactMode">
            <summary>
            Finger contact mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FingerContactMode.Sticky">
            <summary>
            The sticky.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FingerContactMode.Spread">
            <summary>
            The spread.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.FingerContactMode.StickySpread">
            <summary>
            The sticky spread.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.ContactBehaviour">
            <summary>
            Contact behaviour.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.ContactBehaviour.NeverSync">
            <summary>
            The never sync.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.ContactBehaviour.SyncOnKey">
            <summary>
            The sync on key.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.ContactBehaviour.AlwaysSync">
            <summary>
            The always sync.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.PropertyUnit">
            <summary>
            Property unit.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PropertyUnit.NoUnit">
            <summary>
            The no unit.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PropertyUnit.Percent">
            <summary>
            The percent.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PropertyUnit.Second">
            <summary>
            The second.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PropertyUnit.Centimeter">
            <summary>
            The centimeter.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PropertyUnit.Degree">
            <summary>
            The degree.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PropertyUnit.Enum">
            <summary>
            The enum.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.PropertyUnit.Real">
            <summary>
            The real.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.ErrorCode">
            <summary>
            Error code.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.ErrorCode.InternalError">
            <summary>
            The internal error.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.CharacterLinkMode">
            <summary>
            Character link type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.CharacterLinkMode.CharacterLink">
            <summary>
            The character link.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.CharacterLinkMode.ControlSetLink">
            <summary>
            The control set link.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.CharacterLinkMode.ControlSetEffector">
            <summary>
            The control set effector.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.CharacterLinkMode.ControlSetEffectorAux">
            <summary>
            The control set effector aux.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.CharacterLink">
            <summary>
            This class represents a link between a given node and the associated node in the character hierarchy.
            It also contains the transform matrix (offset) for the linked character's node. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.CharacterLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.CharacterLink"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.Node">
            <summary>
            The character's node in hierarchy linked to this character link. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.TemplateName">
            <summary>
            A template name is a naming convention that is used to automatically map the nodes of other skeletons that use the same naming convention. 
            </summary>
            <value>The name of the template.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.OffsetT">
            <summary>
            Get offset position of this character link. 
            </summary>
            <value>The offset t.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.OffsetR">
            <summary>
            Get offset rotation of this character link. 
            </summary>
            <value>The offset r.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.OffsetS">
            <summary>
            Get offset scale of this character link. 
            </summary>
            <value>The offset s.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.HasRotationSpace">
            <summary>
            true if this character link has a defined rotation space  
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.RLimits">
            <summary>
            Get the rotation limits of this character link. 
            </summary>
            <value>The R limits.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.PreRotation">
            <summary>
            Get the PreRotation of this character link. 
            </summary>
            <value>The pre rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.PostRotation">
            <summary>
            Get the PostRotation of this character link. 
            </summary>
            <value>The post rotation.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.RotationOrder">
            <summary>
            Get the rotation order of this character link. 
            </summary>
            <value>The rotation order.</value>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.CharacterLink.AxisLen">
            <summary>
            Gets or sets the length of the axis.
            </summary>
            <value>The length of the axis.</value>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.WorldUp">
            <summary>
            Constraint world up type, which has the same meaning with Maya. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.WorldUp.AimAtSceneUp">
            <summary>
            Constraint scene up type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.WorldUp.AimAtObjectUp">
            <summary>
            Constraint object up type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.WorldUp.AimAtObjectRotationUp">
            <summary>
            Constraint object rotation up type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.WorldUp.AimAtVector">
            <summary>
            Constraint vector type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Constraints.WorldUp.AimAtNone">
            <summary>
            None constraint type.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Constraints.ConstraintAim">
            <summary>
            An aim constraint governs an object's orientation so that the object points to other objects.
            For example, you can use the aim constraint to point a light at an object or group of objects. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintAim.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintAim"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Constraints.ConstraintAim.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Constraints.ConstraintAim"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintAim.RotationOffset">
            <summary>
            This property handles the rotation offset value.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintAim.Targets">
            <summary>
            This property provides access to the object or objects which are the targets.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintAim.WorldUpType">
            <summary>
            This property handles world up type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintAim.WorldUpObject">
            <summary>
            This property handles world up object.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintAim.WorldUpVector">
            <summary>
            This property handles world up vector.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintAim.UpVector">
            <summary>
            This property handles up vector.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintAim.AimVector">
            <summary>
            This property enables you set a specific axis for the constrained object to orient towards.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Constraints.ConstraintAim.Affect">
            <summary>
            This property handles whether to affect the rotation around X axis.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.PropertyCollection">
            <summary>
            The collection of properties
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.PropertyCollection.Count">
            <summary>
            Gets the count of declared properties.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.PropertyCollection.Item(System.Int32)">
            <summary>
            Gets the property by index.
            </summary>
            <param name="idx">The 0-based index of the property</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.PropertyCollection.TryFind(System.String)">
            <summary>
            Try find the property by its name, or null returned
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.PropertyCollection.FindProperty(System.String)">
            <summary>
            Finds the property.
            It can be a dynamic property (Created by CreateDynamicProperty/SetProperty) 
            or native property(Identified by its name)
            </summary>
            <returns>The property.</returns>
            <param name="property">Property name.</param>
        </member>
        <member name="P:Aspose.ThreeD.PropertyCollection.Item(System.String)">
            <summary>
            Gets or sets the value of the property by property name.
            </summary>
            <param name="property">The name of the property</param>
            <returns>The property's value</returns>
        </member>
        <member name="M:Aspose.ThreeD.PropertyCollection.RemoveProperty(Aspose.ThreeD.Property)">
            <summary>
            Removes a dynamic property.
            </summary>
            <param name="property">Which property to remove</param>
            <returns>true if the property is successfully removed</returns>
        </member>
        <member name="M:Aspose.ThreeD.PropertyCollection.RemoveProperty(System.String)">
            <summary>
            Removes a dynamic property.
            </summary>
            <param name="property">Which property to remove</param>
            <returns>true if the property is successfully removed</returns>
        </member>
        <member name="M:Aspose.ThreeD.PropertyCollection.GetEnumerator">
            <summary>
             Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.PropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
             Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.DefaultComponentFactory">
            <summary>
            This was a factory class implementation mainly used by FBX. now it's obsoleted but still keep in place for anti-cracking use, so the class name reserved.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Deformers.NamespaceDoc">
            <summary>
            All deformer classes are defined in this namespace
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Deformers.Bone">
            <summary>
            A bone defines the subset of the geometry's control point, and defined blend weight for each control point.
            The <see cref="T:Aspose.ThreeD.Deformers.Bone"/> object cannot be used directly, a <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer"/> instance is used to deform the geometry, and <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer"/> comes with a set of bones, each bone linked to a node.
            NOTE: A control point of a geometry can be bounded to more than one Bones.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.Bone.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.Bone"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.Bone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.Bone"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.Bone.Item(System.Int32)">
            <summary>
            Gets or sets the blend weight of specified control point
            </summary>
            <param name="index"></param>
            <returns>The weight</returns>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.Bone.GetWeight(System.Int32)">
            <summary>
            Gets the weight for control point specified by index
            </summary>
            <param name="index">Control point's index</param>
            <returns>the weight at specified index, or 0 if the index is invalid</returns>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.Bone.SetWeight(System.Int32,System.Double)">
            <summary>
            Sets the weight for control point specified by index
            </summary>
            <param name="index">Control point's index</param>
            <param name="weight">New weight</param>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.Bone.WeightCount">
            <summary>
            Gets the count of weight, this is automatically extended by <see cref="M:Aspose.ThreeD.Deformers.Bone.SetWeight(System.Int32,System.Double)"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.Bone.Transform">
            <summary>
            Gets or sets the transform matrix of the node containing the bone.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.Bone.BoneTransform">
            <summary>
            Gets or sets the transform matrix of the bone.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.Bone.Node">
            <summary>
            Gets or sets the node. The bone node is the bone which skin attached to, the <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer"/> will use bone node to influence the displacement of the control points.
            Bone node usually has a <see cref="T:Aspose.ThreeD.Entities.Skeleton"/> attached, but it's not required.
            Attached <see cref="T:Aspose.ThreeD.Entities.Skeleton"/> is usually used by DCC software to show skeleton to user.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Deformers.SkinDeformer">
            <summary>
            A skin deformer contains multiple bones to work, each bone blends a part of the geometry by control point's weights.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.SkinDeformer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.SkinDeformer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.SkinDeformer.Bones">
            <summary>
            Gets all bones that the skin deformer contains
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Deformers.Deformer">
            <summary>
            Base class for <see cref="T:Aspose.ThreeD.Deformers.SkinDeformer"/> and <see cref="T:Aspose.ThreeD.Deformers.MorphTargetDeformer"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.Deformer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.Deformer"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.Deformer.Owner">
            <summary>
            Gets the geometry which owns this deformer
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Deformers.CacheChannelType">
            <summary>
            Vertex cache deformer data type. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Deformers.CacheChannelType.Positions">
            <summary>
            This vertex cache deformer handles positions.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Deformers.CacheChannelType.Normals">
            <summary>
            This vertex cache deformer handles normals.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Deformers.CacheChannelType.UVs">
            <summary>
            This vertex cache deformer handles uvs.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Deformers.CacheChannelType.Tangents">
            <summary>
            This vertex cache deformer handles tangents.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Deformers.CacheChannelType.Binormals">
            <summary>
            This vertex cache deformer handles binormals.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Deformers.CacheChannelType.UserDefined">
            <summary>
            This vertex cache deformer handles user specified data (the cache channel string can provide a hint)
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Deformers.VertexCacheDeformer">
            <summary>
            This class deforms control points of a geometry using control point positions stored in the associated cache object. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.VertexCacheDeformer.Active">
            <summary>
            Gets or sets whether the deformer is active or not.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.VertexCacheDeformer.Channel">
            <summary>
            Gets or sets the channel name used in the cache file.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.VertexCacheDeformer.CacheSet">
            <summary>
            Gets or sets the cache set used by this vertex cache deformer.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.VertexCacheDeformer.Type">
            <summary>
            Gets or sets the vertex cache deformer type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.VertexCacheDeformer.Cache">
            <summary>
            Gets or sets the cache used by this deformer.
            </summary>
            <value>The cache.</value>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.VertexCacheDeformer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.VertexCacheDeformer"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Deformers.MorphTargetDeformer">
            <summary>
            MorphTargetDeformer provides per-vertex animation.
            MorphTargetDeformer organize all targets via <see cref="T:Aspose.ThreeD.Deformers.MorphTargetChannel"/>, each channel can organize multiple targets.
            A common use of morph target deformer is to apply facial expression to a character.
            More details can be found at https://en.wikipedia.org/wiki/Morph_target_animation
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.MorphTargetDeformer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.MorphTargetDeformer"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.MorphTargetDeformer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.MorphTargetDeformer"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.MorphTargetDeformer.Item(Aspose.ThreeD.Entities.Shape)">
            <summary>
            Gets or sets the weight for given geometry, this is a short-handed way to modify weight for target without accessing channel.
            </summary>
            <param name="target">Target geometry</param>
            <returns>Weight</returns>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.MorphTargetDeformer.Channels">
            <summary>
            Gets all channels contained in this deformer
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Deformers.MorphTargetChannel">
            <summary>
            A MorphTargetChannel is used by <see cref="T:Aspose.ThreeD.Deformers.MorphTargetDeformer"/> to organize the target geometries.
            Some file formats like FBX support multiple channels in parallel.
            </summary>
            <remarks>
            Weight is between 0 and 1.0, and default weight for target is 0.0; 
            </remarks>
        </member>
        <member name="F:Aspose.ThreeD.Deformers.MorphTargetChannel.DefaultWeight">
            <summary>
            Default weight for morph target.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.MorphTargetChannel.Weights">
            <summary>
            Gets the full weight values of target geometries. 
            </summary>
            <value>The full weights.</value>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.MorphTargetChannel.ChannelWeight">
            <summary>
            Gets or sets the deformer weight of this channel. 
            The weight is between 0.0 and 1.0
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.MorphTargetChannel.Targets">
            <summary>
            Gets all targets associated with the channel.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.MorphTargetChannel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.MorphTargetChannel"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.MorphTargetChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Deformers.MorphTargetChannel"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Deformers.MorphTargetChannel.Item(Aspose.ThreeD.Entities.Shape)">
            <summary>
            Gets or sets the weight for specified geometry
            </summary>
            <param name="target">Target geometry.</param>
            <returns>Weight</returns>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.MorphTargetChannel.GetWeight(Aspose.ThreeD.Entities.Shape)">
            <summary>
            Gets the weight for the specified target, if the target is not belongs to this channel, default value 0 is returned. 
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Deformers.MorphTargetChannel.SetWeight(Aspose.ThreeD.Entities.Shape,System.Double)">
            <summary>
            Sets the weight for the specified target, default value is 1, range should between 0~1
            </summary>
            <param name="target"></param>
            <param name="weight"></param>
        </member>
        <member name="T:Aspose.ThreeD.ErrorMessages">
            <summary>
            The messages are defined in Resources/ErrorMessages.txt
            The build will automatically convert it to Resource/ErrorMessages.bin
            
            lex.chou@aspose.com designed this simple encryption algorithm, and it's encryption can be found in ReleaseTools/MessageEncryptor.cs
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.FileNotFound">
            <summary>Cannot find the file</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.StreamNotReadable">
            <summary>The stream is not readable</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.UnsupportedFileFormat">
            <summary>Can't handle this file format</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.StreamNotWritable">
            <summary>The stream is not writable</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.OpenFileLimit">
            <summary>You are using an evaluation copy and have opened files exceeding limitation.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.SaveFileLimit">
            <summary>You are using an evaluation copy and have saved files exceeding limitation.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.CannotOpenFile">
            <summary>Cannot open this file</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.InvalidEditionType">
            <summary>Invalid edition type.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.OptionHasNoFormatSpecified">
            <summary>The option has no file format specified.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.LicenseIsDisabled">
            <summary>This license is disabled, please contact Aspose to obtain a new license.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.LicenseIsNotForThisProduct">
            <summary>The license is not valid for this product.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.LicenseExpired">
            <summary>The license has expired.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.CannotFindLicense">
            <summary>Cannot find license '{0}'.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.CannotFindBlacklist">
            <summary>Cannot find black listed licenses resource. Please report this error to Aspose.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.InvalidPropertyName">
            <summary>Invalid property name</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.CannotDetectFileFormat">
            <summary>Cannot detect file format from unreadable stream</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.InvalidAnimationName">
            <summary>Animation clip's name cannot be empty</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.InvalidPolygonIndice">
            <summary>Polygon's indices must be greater or equals to 3</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.PositionFieldIsRequired">
            <summary>Position field is required in the vertex</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.DuplicatedPositionEntry">
            <summary>The declaration contains more than one position entry</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.OversizedSemanticField">
            <summary>{0} can only have 3 or 4 components</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.FloatTypeFieldRequired">
            <summary>{0} must be made of double/float types</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.IntFieldRequired">
            <summary>{0} must be an integer type</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.IncorrectVertexEndOrder">
            <summary>EndVertex must be called before BeginVertex.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.IncorrectVertexBeginOrder">
            <summary>BeginVertex must be called before EndVertex</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.InvalidZipArchive">
            <summary>Invalid zip archive</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.CannotReadZipDirectory">
            <summary>Cannot read content of directory</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.UnsupportedZipCompression">
            <summary>Unsupported compression algorithm for this file</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.InvalidZlibData">
            <summary>Invalid Zlib data to decompress</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.InvalidNurbsDelta">
            <summary>Invalid delta for evaluating the NURBS curve</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.MeshHasNoNormals">
            <summary>Mesh has no normals</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.MeshHasNoUV">
            <summary>Mesh has no uv</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.BoxInvalidLengthSegments">
            <summary>Length segments must be greater than 0.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.BoxInvalidWidthSegments">
            <summary>Width segments must be greater than 0.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.BoxInvalidHeightSegments">
            <summary>Height segments must be greater than 0.</summary>
        </member>
        <member name="P:Aspose.ThreeD.ErrorMessages.IncompleteFileContent">
            <summary>The input file is incomplete.</summary>
        </member>
        <member name="T:Aspose.ThreeD.EditionType">
            <summary>
            Specifies the edition type of the license.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.License">
            <summary>
            Provides methods to license the component.
            </summary>
            <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            <ms>
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code>
            </ms>
            
            <java>
            the component jar file:
            <code>
            License license = new License();
            license.setLicense("MyLicense.lic");
            </code>
            </java>
            
            </example>
        </member>
        <member name="M:Aspose.ThreeD.License.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
            <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            <ms>
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code>
            </ms>
            
            <java>
            the component jar file:
            <code>
            License license = new License();
            license.setLicense("MyLicense.lic");
            </code>
            </java>
            
            </example>
        </member>
        <member name="M:Aspose.ThreeD.License.SetLicense(System.String)">
            <summary>
            Licenses the component.
            </summary>
            <remarks>
            <p>Tries to find the license in the following locations:</p>
            <p>1. Explicit path.</p>
            
            <ms>
            <p>2. The folder that contains the Aspose component assembly.</p>
            <p>3. The folder that contains the client's calling assembly.</p>
            <p>4. The folder that contains the entry (startup) assembly.</p>
            <p>5. An embedded resource in the client's calling assembly.</p>
            
            <p><b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
            <p>1. Explicit path.</p>
            <p>2. An embedded resource in the client's calling assembly.</p>
            </ms>
            
            <java>
            <p>2. The folder that contains the Aspose component JAR file.</p>
            <p>3. The folder that contains the client's calling JAR file.</p>
            </java>
            </remarks>
            <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            <ms>
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code>
            </ms>
            
            <java>
            the component jar file:
            <code>
            License license = new License();
            license.setLicense("MyLicense.lic");
            </code>
            </java>
            
            <param name="licenseName">Can be a full or short file name<ms> or name of an embedded resource</ms>.
            Use an empty string to switch to evaluation mode.</param>
            </example>
        </member>
        <member name="P:Aspose.ThreeD.License.IsLicensed">
            <summary>
            Gets a value indicating whether product is licensed.
            </summary>
            <value>
            <c>true</c> if product is licensed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Aspose.ThreeD.License.SetLicense(System.IO.Stream)">
            <summary>
            Licenses the component.
            </summary>
            <param name="stream">A stream that contains the license.</param>
            <remarks>
            <p>Use this method to load a license from a stream.</p>
            </remarks>
            <example>
            <code>
            <ms>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </ms>
            <java>
            License license = new License();
            license.setLicense(myStream);
            </java>
            </code>
            </example>
            <javaName>void setLicense(java.io.InputStream stream)</javaName>
        </member>
        <member name="M:Aspose.ThreeD.License.DummyLicenseMethod">
            <summary>
            Some dummy license method check. Always returns true.
            </summary>
            <returns>Pretends the product is licensed.</returns>
        </member>
        <member name="M:Aspose.ThreeD.License.DummyLicenseMethod2(System.IO.Stream)">
            <summary>
            Some dummy license method check. Always returns true.
            </summary>
            <returns>Pretends the product is licensed.</returns>
        </member>
        <member name="T:Aspose.ThreeD.License.LicenseErrorChecker">
            <summary>
            The license error checker. Moved here the license checking condition so that hackers would not find the error code easily.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.License.LicenseErrorChecker.LicenseCheckAndThrow(System.Int32)">
            <summary>
            Checks the license was properly set or not.
            </summary>
            <param name="errorCode">The error code.</param>
            <exception cref="T:System.InvalidOperationException">
            Invalid edition type.
            or
            Invalid edition type.
            </exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Aspose.ThreeD.LicenseCore">
            <summary>
            The actual code of the license class is put into an internal class and made into long functions to 
            make it harder for the crackers to find anything meaningful after the dlls were cracked in November 2005.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.LicenseCore"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.SetLicenseCore(System.IO.Stream)">
            <summary>
            Note, this function was manually tuned (made complex) so it does not decompile in Reflector.
            </summary>
            <param name="stream">The stream to load license from.</param>
            <returns>Error code when license setting failed. 0 on success.</returns>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.GetLicenseState">
            <summary>
            Call this from your component code to check if running evaluation version or not.
            </summary>
            <returns>The license state.</returns>
            <example>
            <code>
            if (Aspose.Words.LicenseCore.GetLicenseState() == LicenseState.Evaluation)
            	InjectWatermark();
            </code>
            </example>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.CheckEdition(Aspose.ThreeD.EditionType,System.String)">
            <summary>
            Note, this function was manually tuned (made complex) so it does not decompile in Reflector.
            
            Call this when the user attempts to use a feature that is limited by edition type.
            Throws a message explaining the license limitation to the user.
            </summary>
            <remarks>
            Most of Aspose products are supposed to have just one edition type.
            Only complex products might have two edition types.
            When using two edition types, make sure it is easy for the client to select edition type they need.
            </remarks>
            <param name="wantEditionType">Specify edition type that is required to access your feature.</param>
            <param name="message">Message that explains what feature the user is trying to access.</param>
            <example>
            For example, adding an image to the document requires Enterprise edition.
            <code>
            Licensing2004.CheckEdition(EditionType.Enterprise, "You tried to add an image to the document.");
            //Proceed inserting the image.
            </code>
            </example>
        </member>
        <member name="P:Aspose.ThreeD.LicenseCore.Products">
            <summary>
            Gets Aspose product names this license is for. 
            You need to specify value that matches the value specified in AssemblyProduct attribute.
            This is used to check that the license is suitable for this product.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.LicenseCore.EditionType">
            <summary>
            Gets edition type.
            You can use this to enable/disable some features depending on the edition type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.LicenseCore.SerialNumber">
            <summary>
            Unique license number. Used to black list stolen licenses.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.LicenseCore.SubscriptionExpiry">
            <summary>
            Gets the last date of the subscription.
            This is to be checked against custom attribute on the assembly that contains the relase date.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.LicenseCore.LicenseExpiry">
            <summary>
            This is for temporary licenses.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.LoadLicense(System.Xml.XmlDocument)">
            <summary>
            Verifies the signature on the XML file and loads it into the license files, but does not check them.
            Made internal only for unit testing, do not call directly otherwise.
            
            Note, this function was manually tuned (made complex) so it does not decompile in Reflector.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.CreateRsa4Product(System.String[])">
            <summary>
            Creates Rsa from product name
            </summary>
            <param name="mProducts">The licensed products</param>
            <returns>
            Type of <see cref="T:Aspose.License.Hackers.RsaSignatureVerifier" />
            </returns>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.LoadBlackList4Product(System.String)">
            <summary>
            Loads blacklist for product name
            </summary>
            <param name="mProduct">The licensed products</param>
            <returns>
            Type of <see cref="T:Aspose.License.Hackers.RsaSignatureVerifier" />
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Unexpected corporate entity
            or
            Unknown corporate entity
            </exception>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.MapOldProductName(System.String)">
            <summary>
            In January 2006 product names such as Aspose Word, Aspose Excel etc had to be changed. 
            This function maps these product names so old licenses can be used in new products.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.ProductVenture(System.String)">
            <summary>
            Gets the product venture.
            </summary>
            <param name="productName">Name of the product.</param>
            <returns>The product venture</returns>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.LoadLicense(System.String)">
            <summary>
            See above. Use for unit testing only.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.VerifySignature(System.Xml.XmlNode,System.Xml.XmlNode,Aspose.License.Hackers.RsaSignatureVerifier)">
            <summary>
            Verifies that content of the data element has not been tampered with. Safe to pass nulls.
            
            Note there is no direct action taken inside this method if the signature is invalid.
            If the signature is invalid, the VerificationSupervisor.SignatureInvalidFlag is set to greater 
            than zero and you need to examine it somewhere later in your code. This is to confuse hackers.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.ProbeLicense(System.String,System.Reflection.Assembly)">
            <summary>
            Tries to find the license in several locations:
            1. Explicit path.
            2. The folder of this assembly.
            3. The folder of the client's calling assembly.
            4. The folder of the entry assembly (does not apply for the .NET Compact Framework).
            5. An embedded resource in the client's calling assembly.
            </summary>
            <param name="licenseName">This can be full or short file name or name of an embedded resource.</param>
            <param name="callingAssembly">Client's calling assembly. Used to find license in embedded resource.</param>
            <returns>Returns a stream that contains the license or throws.</returns>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Returns assembly path correctly even if the assembly is shadow-copied.
            Uses CodeBase instead of Location for that.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.GetResourceByPartialName(System.Reflection.Assembly,System.String)">
            <summary>
            The resource names can get prefixed with customer's namespace, so I do a partial name search.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.GetStringValue(System.Xml.XmlElement,System.String)">
            <summary>
            Returns text from the child element of a specified parent element or empty string if the element was not found.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.GetDateValue(System.Xml.XmlElement,System.String)">
            <summary>
            Gets date value from the specified XML element. Returns DateTime.MaxValue if the element is missing.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.GetElementByName(System.Xml.XmlElement,System.String)">
            <summary>
            Xml helper function. Gets the first child element with the given name or null.
            I'm using this instead of XPath because XPath is not available on the .NET Compact Framework.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.LicenseCore.LoadBlackList(System.String[])">
            <summary>
            Loads and verifies black list from resource called Aspose.License.BlackList.xml which must be present.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.LicenseCore.gBlackListCache">
            <summary>
            The key is a string blacklisted license serial number. The value is null.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.LicenseCore.ProductNameMapping">
            <summary>
            Maps old product name into new.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.LicenseCore.AsposeDot">
            <summary>
            Used in the product mapping to build full product name.
            This is to avoid other developers accidentally damaging this code when doing global rename.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.LicenseCore.ConholdateDot">
            <summary>
            Used in the product mapping to build full product name.
            This is to avoid other developers accidentally damaging this code when doing global rename.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.LicenseCore.gProductNameMap">
            <summary>
            Maps old product names into new.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.VentureLicense">
            <summary>
            The class is intended to specify that venture is actually using this product.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.VentureLicense.LicenseState">
            <summary>
            The licensed state is VentureLicenseState type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.VentureLicense.Watermark">
            <summary>
            The Venture watermark to draw, this is a byte array of an encrypted string.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.VentureLicense.HashValue">
            <summary>
            The hash value to check that actually this instance was initialized correctly (using VentureLicenser class).
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.VentureLicenser">
            <summary>
            This class is invoked by the GroupDocs.Product to license/watermak an Aspose.Product document instance.
            
            The calling must be done in a "secure" way so it is harder for hackers to find how GroupDocs uses Aspose without a license.
            To make the calling "secure" the class is internal so its name will be obfuscated, but it has a unique combination of default
            parameter values in its special constructor so GroupDocs can find it.
            
            This type has to be a struct, not a class. There is a situation where AppDomain sometimes cannot
            invoke internal members via reflection. We overcome this by creating default structure instances,
            it is somewhat a security hole in .NET.
            Related info https://msdn.microsoft.com/en-us/library/stfy7tfc(v=vs.110).aspx
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.VentureLicenseState">
            <summary>
            Indicates the venture licensing status applied to this Aspose document.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.VentureLicenseState.NoVenture">
            <summary>
            The venture has not called us. So we are working in normal standalone mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.VentureLicenseState.Evaluation">
            <summary>
            The venture product is in the evaluation mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.VentureLicenseState.Licensed">
            <summary>
            The venture product is in the licensed mode.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.MeteredState">
            <summary>
            Represents possible metered states.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.MeteredState.Evaluation">
            <summary>
            The metered is evaluation
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.MeteredState.Paid">
            <summary>
            The metered is a paid customer.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Metered">
            <summary>
            Provides methods to set metered key.
            </summary>
            <example>
            In this example, an attempt will be made to set metered public and private key
            
            <ms>
            <code>
            [C#]
            
            Metered matered = new Metered();
            matered.SetMeteredKey("PublicKey", "PrivateKey");
            
            
            [Visual Basic]
            
            Dim matered As Metered = New Metered
            matered.SetMeteredKey("PublicKey", "PrivateKey")
            </code>
            </ms>
            
            <java>
            the component jar file:
            <code>
            Metered matered = new Metered();
            matered.setMeteredKey("PublicKey", "PrivateKey");
            </code>
            </java>
            
            </example>
        </member>
        <member name="M:Aspose.ThreeD.Metered.#ctor">
            <summary>
            Initializes a new instance of this class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Metered.SetMeteredKey(System.String,System.String)">
            <summary>
            Sets metered public and private key
            </summary>
            <param name="publicKey">public key</param>
            <param name="privateKey">private key</param>
        </member>
        <member name="M:Aspose.ThreeD.Metered.GetConsumptionQuantity">
            <summary>
            Gets consumption file size
            </summary>
            <returns>consumption quantity</returns>
        </member>
        <member name="M:Aspose.ThreeD.Metered.GetConsumptionCredit">
            <summary>
            Gets consumption credit
            </summary>
            <returns>consumption quantity</returns>
        </member>
        <member name="T:Aspose.ThreeD.MeteredCountService">
            <summary>
            This internal class is used to handle customer's consumption data, the unit is MB.
            </summary>
            <example>
            In this example, an attempt will be made to increase of 9MB on customer consumption data.
            
            <ms>
            <code>
            [C#]
            
            MeteredCountService.Instance.IncreaseCount(9);
            
            </code>
            </ms>
            </example>
        </member>
        <member name="M:Aspose.ThreeD.MeteredCountService.IncreaseCount(System.Double)">
            <summary>
            Increase customer consumption file size, and try to upload data
            </summary>
            <param name="count">increased quantities, in unit of MB</param>
        </member>
        <member name="M:Aspose.ThreeD.MeteredCountService.IncreaseCredit(System.Int64)">
            <summary>
            Increase customer consumption credit, and try to upload
            </summary>
            <param name="credit">increased credit</param>
        </member>
        <member name="M:Aspose.ThreeD.MeteredCountService.IncreaseCredit(System.Int64,System.Boolean)">
            <summary>
            Increase customer consumption credit
            </summary>
            <param name="credit">increased credit</param>
            <param name="isSend">whether upload data</param>
        </member>
        <member name="M:Aspose.ThreeD.MeteredCountService.IncreaseCount(System.Decimal,System.Boolean)">
            <summary>
            Increase customer consumption file size
            </summary>
            <param name="count">increased file quantities, in unit of MB</param>
            <param name="isSend">whether upload data</param>
        </member>
        <member name="M:Aspose.ThreeD.MeteredCountService.GetAndResetCount">
            <summary>
            Gets and Resets customer consumption file size
            </summary>
            <returns>quantities of customer consumption data</returns>
        </member>
        <member name="M:Aspose.ThreeD.MeteredCountService.GetAndResetCredit">
            <summary>
            Get and Reset customer consumption credit
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.MeteredBillingService">
            <summary>
            This internal class is used to handle customer's matered state
            </summary>
            <example>
            In this example, an attempt will be check customer's matered state.
            
            <ms>
            <code>
            [C#]
            
            MeteredState materedState = MeteredBillingService.GetMeteredState();
            
            </code>
            </ms>
            </example>
        </member>
        <member name="M:Aspose.ThreeD.MeteredBillingService.Setkey(System.String,System.String)">
            <summary>
            Sets the subscription public and private key
            </summary>
            <param name="subscriptionPublicKey">subscription public key</param>
            <param name="subscriptionPrivateKey">subscription private key</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.MeteredBillingService.GetMeteredState">
            <summary>
            Gets metered state
            </summary>
            <returns>matered state</returns>
        </member>
        <member name="M:Aspose.ThreeD.MeteredBillingService.UploadCustomerData">
            <summary>
            Uploads customer consumption data
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.NamespaceDoc">
            <summary>
            The base namespace of Aspose.3D
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.SceneObject">
            <summary>
            The root class of objects that will be stored inside a scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.SceneObject.Scene">
            <summary>
            Gets the scene that this object belongs to
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.SceneObject.#ctor(System.String)">
            <summary>
            Initialize an SceneObject with a default name
            </summary>
            <param name="name">The name of this instance</param>
        </member>
        <member name="M:Aspose.ThreeD.SceneObject.#ctor">
            <summary>
            Initialize an SceneObject.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Medias.glTF_FS">
            <summary>
            precision highp float;
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Medias.glTF_VS">
            <summary>
            precision highp float;
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Medias.ErrorMessages">
            <summary>
            Binary data from ErrorMessages.bin
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Medias.PRCDouble">
            <summary>
            Binary data from prcdouble.bin
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Medias.LicenseBlackList">
            <summary>
            Binary data from Aspose.License.BlackList.xml
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Medias.TexNotFound">
            <summary>
            Binary data from Rendering/TexNotFound.png
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Medias.WebRenderer">
            <summary>
            Binary data from WebRenderer.js
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PbrFrag">
            <summary>
            Binary data from vk/bin/pbrFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PhongFrag">
            <summary>
            Binary data from vk/bin/phongFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PhongVert">
            <summary>
            Binary data from vk/bin/phongVertex.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PhongSimplifiedFrag">
            <summary>
            Binary data from vk/bin/PhongSimplifiedFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PhongSimplifiedVert">
            <summary>
            Binary data from vk/bin/PhongSimplifiedVertex.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.ShadowmapVert">
            <summary>
            Binary data from vk/bin/shadowmapVertex.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PPQuad">
            <summary>
            Binary data from vk/bin/pp_quadVertex.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PointCloudFrag">
            <summary>
            Binary data from vk/bin/pointcloudFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PointCloudVert">
            <summary>
            Binary data from vk/bin/pointcloudVertex.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PPOverlayComposition">
            <summary>
            Binary data from vk/bin/pp_overlay_compositionFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PPBlur">
            <summary>
            Binary data from vk/bin/pp_blurFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PPEdgeDetection">
            <summary>
            Binary data from vk/bin/pp_edge_detectionFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PPGray">
            <summary>
            Binary data from vk/bin/pp_grayFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PPFisheye">
            <summary>
            Binary data from vk/bin/pp_fisheyeFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PPEquirectangular">
            <summary>
            Binary data from vk/bin/pp_equirectangularFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.PPPixelation">
            <summary>
            Binary data from vk/bin/pp_pixelationFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.LinesFragment">
            <summary>
            Binary data from vk/bin/linesFragment.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.Rendering.VkShaders.LinesVertex">
            <summary>
            Binary data from vk/bin/linesVertex.spv
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.ConholdateModulus">
            <summary>
            qKFqqhFovZvEYCHeD3N8Oy+AuxrOA8cVvIl4u4qIBMQlzejGyX...
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.AsposeModulus">
            <summary>
            0nRuwNEddXwLfXB7pw66G71MS93gW8mNzJ7vuh3Sf4VAEOBfpx...
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.GroupDocModulus">
            <summary>
            nznezAVF+7ill9X2VPlH6eOPjG15OuVNohmtG0mmqpS5iyj6si...
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.KeyExponent">
            <summary>
            AQAB
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.Dot">
            <summary>
            .
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.DotTotal">
            <summary>
            .Total
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.DotTotalFor">
            <summary>
            .Total for
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.DotTotalProductFamily">
            <summary>
            .Total Product Family
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.DotNET">
            <summary>
            .NET
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.ProductFamily">
            <summary>
            Product Family
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.UnexpectedCorporateEntity">
            <summary>
            Unexpected corporate entity
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.UnknownCorporateEntity">
            <summary>
            Unknown corporate entity
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.InvalidEditionType">
            <summary>
            Invalid edition type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.CannotFindLicense0">
            <summary>
            Cannot find license '{0}'.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.yyyyMMdd">
            <summary>
            yyyyMMdd
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.SubscriptionDate">
            <summary>
            ddMMyyyy
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.ReleaseDateFormat">
            <summary>
            yyyy.MM.dd
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.DateDisplayFormat">
            <summary>
            dd MMM yyyy
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.AsposeDot">
            <summary>
            Aspose.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.ConholdateDot">
            <summary>
            Conholdate.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.Professional">
            <summary>
            Professional
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.Enterprise">
            <summary>
            Enterprise
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.FailedToSetLicense">
            <summary>
            Failed to set license. Details:
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.DeveloperException">
            <summary>
            DEVELOPER EXCEPTION. Please note you may call IsLi...
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.ThisLicenseIsDisabled">
            <summary>
            This license is disabled, please contact Aspose to...
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.TheLicenseSignatureIsInvalid">
            <summary>
            The license signature is invalid.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.TheLicenseIsNotValidForThisProduct">
            <summary>
            The license is not valid for this product.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.TheLicenseHasExpired">
            <summary>
            The license has expired.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.LicenseRenewRequired">
            <summary>
            The subscription included in this license allows f...
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.LicenseUpgradeRequired">
            <summary>
            {0} Unfortunately, this feature is only available ...
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.Signature">
            <summary>
            Signature
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.Products">
            <summary>
            Products
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.Product">
            <summary>
            Product
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.EditionType">
            <summary>
            EditionType
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.SerialNumber">
            <summary>
            SerialNumber
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.SubscriptionExpiry">
            <summary>
            SubscriptionExpiry
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.LicenseExpiry">
            <summary>
            LicenseExpiry
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.SN">
            <summary>
            SN
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Resources.LicenseStrings.Aspose3D">
            <summary>
            Aspose.3D
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Axis">
            <summary>
            The coordinate axis. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Axis.XAxis">
            <summary>
            The X axis.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Axis.YAxis">
            <summary>
            The Y axis.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Axis.ZAxis">
            <summary>
            The Z axis.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.CoordinatedSystem">
            <summary>
            The left handed or right handed coordinate system.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.CoordinatedSystem.RightHanded">
            <summary>
            The right handed.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.CoordinatedSystem.LeftHanded">
            <summary>
            The left handed.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.ShadingMode">
            <summary>
            Shading modes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ShadingMode.HardShading">
            <summary>
            Solid geometries rendered with smooth surfaces - using the system light.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ShadingMode.WireFrame">
            <summary>
            Geometries displayed in wire frame.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ShadingMode.FlatShading">
            <summary>
            Solid geometries rendered faceted - using the system light.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ShadingMode.LightShading">
            <summary>
            Solid geometries rendered with the scene lights.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ShadingMode.TextureShading">
            <summary>
            Solid geometries rendered with smooth textured surfaces - using system light.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ShadingMode.FullShading">
            <summary>
            Solid geometries rendered with smooth textured surfaces and scene lights.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.NodeVisitor">
            <summary>
            A callback to travel through the whole node hierarchy.
            </summary>
            <param name="node">Node being visited</param>
            <returns>Return false to stop travelling</returns>
        </member>
        <member name="T:Aspose.ThreeD.Node">
            <summary>
            Represents an element in the scene graph.
            A scene graph is a tree of Node objects. The tree management services are self contained in this class.
            Note the Aspose.3D SDK does not test the validity of the constructed scene graph. It is the responsibility of the caller to make sure that it does not generate cyclic graphs in a node hierarchy.
            Besides the tree management, this class defines all the properties required to describe the position of the object in the scene. This information include the basic Translation, Rotation and Scaling properties and the more advanced options for pivots, limits, and IK joints attributes such the stiffness and dampening.
            When it is first created, the Node object is "empty" (i.e: it is an object without any graphical representation that only contains the position information). In this state, it can be used to represent parents in the node tree structure but not much more. The normal use of this type of objects is to add them an entity that will specialize the node (see the "Entity").
            The entity is an object in itself and is connected to the the Node. This also means that the same entity can be shared among multiple nodes. Camera, Light, Mesh, etc... are all entities and they all derived from the base class Entity.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Node.AssetInfo">
            <summary>
            Per-node asset info
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Node"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Node.#ctor(System.String,Aspose.ThreeD.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Node"/> class.
            </summary>
            <param name="name">Name.</param>
            <param name="entity">Default entity.</param>
        </member>
        <member name="M:Aspose.ThreeD.Node.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Node"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:Aspose.ThreeD.Node.Visible">
            <summary>
            Gets or sets to show the node
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Node.ChildNodes">
            <summary>
            Gets the children nodes.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="M:Aspose.ThreeD.Node.CreateChildNode">
            <summary>
            Creates a child node
            </summary>
            <returns>The new child node.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Node.CreateChildNode(System.String)">
            <summary>
            Create a new child node with given node name
            </summary>
            <param name="nodeName">The new child node's name</param>
            <returns>The new child node.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Node.CreateChildNode(Aspose.ThreeD.Entity)">
            <summary>
            Create a new child node with given entity attached
            </summary>
            <param name="entity">Default entity attached to the node</param>
            <returns>The new child node.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Node.CreateChildNode(System.String,Aspose.ThreeD.Entity)">
            <summary>
            Create a new child node with given node name
            </summary>
            <param name="nodeName">The new child node's name</param>
            <param name="entity">Default entity attached to the node</param>
            <returns>The new child node.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Node.CreateChildNode(System.String,Aspose.ThreeD.Entity,Aspose.ThreeD.Shading.Material)">
            <summary>
            Create a new child node with given node name, and attach specified entity and a material
            </summary>
            <param name="nodeName">The new child node's name</param>
            <param name="entity">Default entity attached to the node</param>
            <param name="material">The material attached to the node</param>
            <returns>The new child node.</returns>
        </member>
        <member name="P:Aspose.ThreeD.Node.Entity">
            <summary>
            Gets or sets the first entity attached to this node, if sets, will clear other entities.
            </summary>
            <value>The node entity.</value>
        </member>
        <member name="P:Aspose.ThreeD.Node.Excluded">
            <summary>
            Gets or sets wheather to exclude this node and all child nodes/entities during exporting.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Node.Entities">
            <summary>
            Gets all node entities.
            </summary>
            <value>The node entities.</value>
        </member>
        <member name="P:Aspose.ThreeD.Node.MetaDatas">
            <summary>
            Gets the meta data defined in this node.
            </summary>
            <value>The meta datas.</value>
        </member>
        <member name="P:Aspose.ThreeD.Node.Materials">
            <summary>
            Gets the materials associated with this node.
            </summary>
            <value>The materials.</value>
        </member>
        <member name="P:Aspose.ThreeD.Node.Material">
            <summary>
            Gets or sets the first material associated with this node, if sets, will clear other materials
            </summary>
            <value>The material.</value>
        </member>
        <member name="P:Aspose.ThreeD.Node.ParentNode">
            <summary>
            Gets or sets the parent node.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="P:Aspose.ThreeD.Node.Transform">
            <summary>
            Gets the local transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="M:Aspose.ThreeD.Node.EvaluateGlobalTransform(System.Boolean)">
            <summary>
            Evaluate the global transform, include the geometric transform or not.
            </summary>
            <param name="withGeometricTransform">Whether the geometric transform is needed.</param>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Node.GlobalTransform">
            <summary>
            Gets the global transform.
            </summary>
            <value>The global transform.</value>
        </member>
        <member name="M:Aspose.ThreeD.Node.GetChild(System.Int32)">
            <summary>
            Gets the child node at specified index.
            </summary>
            <returns>The child.</returns>
            <param name="index">Index.</param>
        </member>
        <member name="M:Aspose.ThreeD.Node.GetChild(System.String)">
            <summary>
            Gets the child node with the specified name
            </summary>
            <param name="nodeName">The child name to find.</param>
            <returns>The child.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Node.GetEntity``1">
            <summary>
            Gets the first entity with type T.
            </summary>
            <returns>The first node enetity with type T.</returns>
            <typeparam name="T">The first type parameter.</typeparam>
        </member>
        <member name="M:Aspose.ThreeD.Node.Accept(Aspose.ThreeD.NodeVisitor)">
            <summary>
            Walks through all descendant nodes(including the current node) and call the visitor with the node.
            Visitor can break the walkthrough by returning false
            </summary>
            <param name="visitor">Visitor callback to visit the node</param>
            <returns>true means visitor has broke the walk through.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Node.ToString">
            <summary>
            Gets the string reprensentation of this node.
            </summary>
            <returns>The string representation of this node for debugging.</returns>
        </member>
        <member name="M:Aspose.ThreeD.Node.GetBoundingBox">
            <summary>
            Calculate the bounding box of the node
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Node.AddEntity(Aspose.ThreeD.Entity)">
            <summary>
            Add an entity to the node.
            </summary>
            <param name="entity">The entity to be attached to the node</param>
        </member>
        <member name="M:Aspose.ThreeD.Node.AddChildNode(Aspose.ThreeD.Node)">
            <summary>
            Add a child node to this node
            </summary>
            <param name="node">The child node to be attached</param>
        </member>
        <member name="M:Aspose.ThreeD.Node.SelectSingleObject(System.String)">
            <summary>
            Select single object under current node using XPath-like query syntax.
            </summary>
            <param name="path"></param>
            <exception cref="T:Aspose.ThreeD.Utilities.ParseException">ParseException will be thrown if the path contains malformed query.</exception>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Node.SelectObjects(System.String)">
            <summary>
            Select multiple objects under current node using XPath-like query syntax.
            </summary>
            <param name="path"></param>
            <exception cref="T:Aspose.ThreeD.Utilities.ParseException">ParseException will be thrown if the path contains malformed query.</exception>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.AssemblyConstants">
            <summary>
            Defines the constants that participate in the license check for the component.
            These used to be defined directly as assembly attributes, but I moved them into 
            separate class because in .NET Compact Framework I cannot access assembly attributes.
            Now the licensing code when compiled for the .NET Compact Framework uses these constants
            instead of the assembly attributes.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.AssemblyConstants.ReleaseDate">
            <summary>
            This is used by Aspose licensing code to check for subscription expiry.
            You need to set this to the date you publish a release or a hotfix.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.ImportException">
            <summary>
            Exception when Aspose.3D failed to open the specified source
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.ImportException.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="msg">Error message</param>
        </member>
        <member name="M:Aspose.ThreeD.ImportException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="msg">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Aspose.ThreeD.ImportException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:Aspose.ThreeD.ExportException">
            <summary>
            Exceptions when Aspose.3D failed to export the scene to file
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.ExportException.#ctor(System.String)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="msg">Error message</param>
        </member>
        <member name="M:Aspose.ThreeD.ExportException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance
            </summary>
            <param name="msg">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="T:Aspose.ThreeD.Scene">
            <summary>
            A scene is a top-level object that contains the nodes, geometries, materials, textures, animation, poses, sub-scenes and etcs.
            Scene can have sub-scenes, acts as multiple-document support in files like collada/blender/fbx
            Node hierarchy can be accessed through <see cref="P:Aspose.ThreeD.Scene.RootNode"/>
            <see cref="P:Aspose.ThreeD.Scene.Library"/> is used to keep a reference of unattached objects during serialization(like meta data or custom objects) so it can be used as a library. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Scene.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Scene"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Scene.#ctor(Aspose.ThreeD.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Scene"/> class with an entity attached to a new node.
            </summary>
            <param name="entity">The initial entity that attached to the scene</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.#ctor(Aspose.ThreeD.Scene,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Scene"/> class as a sub-scene.
            </summary>
            <param name="parentScene">The parent scene.</param>
            <param name="name">Scene's name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Scene"/> class and open the file immediately.
            </summary>
            <param name="fileName">File's name to open.</param>
        </member>
        <member name="P:Aspose.ThreeD.Scene.SubScenes">
            <summary>
            Gets all sub-scenes
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Scene.Library">
            <summary>
            Objects that not directly used in scene hierarchy can be defined in Library.
            This is useful when you're using sub-scenes and put reusable components under sub-scenes.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Scene.AnimationClips">
            <summary>
            Gets all <see cref="T:Aspose.ThreeD.Animation.AnimationClip"/> defined in the scene.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Scene.CurrentAnimationClip">
            <summary>
            Gets or sets the active <see cref="T:Aspose.ThreeD.Animation.AnimationClip"/>
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Scene.GetAnimationClip(System.String)">
            <summary>
            Gets a named <see cref="T:Aspose.ThreeD.Animation.AnimationClip"/>
            </summary>
            <param name="name">The <see cref="T:Aspose.ThreeD.Animation.AnimationClip"/>'s name to look up</param>
            <returns>Returned AnimationClip</returns>
        </member>
        <member name="P:Aspose.ThreeD.Scene.AssetInfo">
            <summary>
            Gets or sets the top-level asset information
            </summary>
            <value>The document info.</value>
        </member>
        <member name="P:Aspose.ThreeD.Scene.Constraints">
            <summary>
            Gets the constraints defined in this scene.
            </summary>
            <value>The constraints.</value>
        </member>
        <member name="P:Aspose.ThreeD.Scene.Poses">
            <summary>
            Gets all <see cref="T:Aspose.ThreeD.Pose"/> used in this scene.
            </summary>
            <value>The poses.</value>
        </member>
        <member name="P:Aspose.ThreeD.Scene.RootNode">
            <summary>
            Gets the root node of the scene.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Clear">
            <summary>
            Clears the scene content and restores the default settings.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Scene.CreateAnimationClip(System.String)">
            <summary>
            A shorthand function to create and register the <see cref="T:Aspose.ThreeD.Animation.AnimationClip"/>
            The first <see cref="T:Aspose.ThreeD.Animation.AnimationClip"/> will be assigned to the <see cref="P:Aspose.ThreeD.Scene.CurrentAnimationClip"/>
            </summary>
            <param name="name">Animation clip's name</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.String,System.Drawing.Size,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Render the scene into external file from given camera's perspective.
            </summary>
            <param name="camera">From which camera's perspective to render the scene</param>
            <param name="fileName">The file name of output file</param>
            <param name="size">The size of final rendered image</param>
            <param name="format">The image format of the output file</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.String,System.Drawing.Size,System.Drawing.Imaging.ImageFormat,Aspose.ThreeD.ImageRenderOptions)">
            <summary>
            Render the scene into external file from given camera's perspective.
            </summary>
            <param name="camera">From which camera's perspective to render the scene</param>
            <param name="fileName">The file name of output file</param>
            <param name="size">The size of final rendered image</param>
            <param name="format">The image format of the output file</param>
            <param name="options">The option to customize some internal settings.</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.Drawing.Bitmap)">
            <summary>
            Render the scene into bitmap from given camera's perspective.
            </summary>
            <param name="camera">From which camera's perspective to render the scene</param>
            <param name="bitmap">Target of the rendered result</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.Drawing.Bitmap,Aspose.ThreeD.ImageRenderOptions)">
            <summary>
            Render the scene into bitmap from given camera's perspective.
            </summary>
            <param name="camera">From which camera's perspective to render the scene</param>
            <param name="bitmap">Target of the rendered result</param>
            <param name="options">The option to customize some internal settings.</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.ReloadSceneAs(Aspose.ThreeD.FileFormat)">
            <summary>
            Reload the scene in specified format
            </summary>
            <param name="fmt"></param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Open(System.IO.Stream,Aspose.ThreeD.FileFormat,System.Threading.CancellationToken)">
            <summary>
            Opens the scene from given stream using specified file format.
            </summary>
            <param name="stream">Input stream, user is responsible for closing the stream.</param>
            <param name="format">File format.</param>
            <param name="cancellationToken">Cancellation token to the load task</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Open(System.IO.Stream,Aspose.ThreeD.Formats.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Opens the scene from given stream using specified IO config.
            </summary>
            <param name="stream">Input stream, user is responsible for closing the stream.</param>
            <param name="options">More detailed configuration to open the stream.</param>
            <param name="cancellationToken">Cancellation token to the load task</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Open(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
             Opens the scene from given stream
            </summary>
            <param name="stream">Input stream, user is responsible for closing the stream.</param>
            <param name="cancellationToken">Cancellation token to the load task</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Open(System.String,Aspose.ThreeD.FileFormat,System.Threading.CancellationToken)">
            <summary>
            Opens the scene from given path using specified file format.
            </summary>
            <param name="fileName">File name.</param>
            <param name="format">File format.</param>
            <param name="cancellationToken">Cancellation token to the load task</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Open(System.String,Aspose.ThreeD.Formats.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Opens the scene from given path using specified file format.
            </summary>
            <param name="fileName">File name.</param>
            <param name="options">More detailed configuration to open the stream.</param>
            <param name="cancellationToken">Cancellation token to the load task</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Open(System.String,System.Threading.CancellationToken)">
            <summary>
            Opens the scene from given path
            </summary>
            <param name="fileName">File name.</param>
            <param name="cancellationToken">Cancellation token to the load task</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Save(System.IO.Stream,Aspose.ThreeD.FileFormat,System.Threading.CancellationToken)">
            <summary>
            Saves the scene to stream using specified file format.
            </summary>
            <param name="stream">Input stream, user is responsible for closing the stream.</param>
            <param name="format">Format.</param>
            <param name="cancellationToken">Cancellation token to the save task</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Save(System.IO.Stream,Aspose.ThreeD.Formats.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Saves the scene to stream using specified file format.
            </summary>
            <param name="stream">Input stream, user is responsible for closing the stream.</param>
            <param name="options">More detailed configuration to save the stream.</param>
            <param name="cancellationToken">Cancellation token to the save task</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Save(System.String,Aspose.ThreeD.FileFormat,System.Threading.CancellationToken)">
            <summary>
            Saves the scene to specified path using specified file format.
            </summary>
            <param name="fileName">File name.</param>
            <param name="format">Format.</param>
            <param name="cancellationToken">Cancellation token to the save task</param>
        </member>
        <member name="M:Aspose.ThreeD.Scene.Save(System.String,Aspose.ThreeD.Formats.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Saves the scene to specified path using specified file format.
            </summary>
            <param name="fileName">File name.</param>
            <param name="options">More detailed configuration to save the stream.</param>
            <param name="cancellationToken">Cancellation token to the save task</param>
        </member>
        <member name="T:Aspose.ThreeD.ImageRenderOptions">
            <summary>
            Options for <see cref="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.String,System.Drawing.Size,System.Drawing.Imaging.ImageFormat,Aspose.ThreeD.ImageRenderOptions)"/> and  <see cref="M:Aspose.ThreeD.Scene.Render(Aspose.ThreeD.Entities.Camera,System.Drawing.Bitmap,Aspose.ThreeD.ImageRenderOptions)"/> 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.ImageRenderOptions.BackgroundColor">
            <summary>
            The background color of the render result.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.ImageRenderOptions.AssetDirectories">
            <summary>
            Directories that stored external assets(like textures)
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.ImageRenderOptions.EnableShadows">
            <summary>
            Gets or sets wheather to render shadows.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.ImageRenderOptions.#ctor">
            <summary>
            Initialize an instance of <see cref="T:Aspose.ThreeD.ImageRenderOptions"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Transform">
            <summary>
            A transform contains information that allow access to object's translate/scale/rotation or transform matrix at minimum cost
            This is used by local transform.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Transform.#ctor(Aspose.ThreeD.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Transform"/> class.
            </summary>
            <param name="owner">Owner.</param>
        </member>
        <member name="M:Aspose.ThreeD.Transform.Reset">
            <summary>
            Reset the transform to identity transformation.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Transform.GeometricTranslation">
            <summary>
            Gets or sets the geometric translation. 
            Geometric transformation only affects the entities attached and leave the child nodes unaffected.
            It will be merged as local transformation when you export the geometric transformation to file types that does not support it.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Transform.GeometricScaling">
            <summary>
            Gets or sets the geometric scaling. 
            Geometric transformation only affects the entities attached and leave the child nodes unaffected.
            It will be merged as local transformation when you export the geometric transformation to file types that does not support it.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Transform.GeometricRotation">
            <summary>
            Gets or sets the geometric euler rotation(measured in degree). 
            Geometric transformation only affects the entities attached and leave the child nodes unaffected.
            It will be merged as local transformation when you export the geometric transformation to file types that does not support it.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Transform.Translation">
            <summary>
            Gets or sets the translation
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Transform.Scale">
            <summary>
            Gets or sets the scale
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Transform.PreRotation">
            <summary>
            Gets or sets the pre-rotation represented in degree
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Transform.PostRotation">
            <summary>
            Gets or sets the post-rotation represented in degree
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Transform.EulerAngles">
            <summary>
            Gets or sets the rotation represented in euler angles, measured in degree
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Transform.Rotation">
            <summary>
            Gets or sets the rotation represented in quaternion.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Transform.GetFullRotation">
            <summary>
            Details can be found at http://download.autodesk.com/us/fbx/20112/FBX_SDK_HELP/index.html?url=WS1a9193826455f5ff1f92379812724681e696651.htm,topicNumber=d0e7429
            </summary>
            <returns></returns>
        </member>
        <member name="P:Aspose.ThreeD.Transform.TransformMatrix">
            <summary>
            Gets or sets the transform matrix.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.GlobalTransform">
            <summary>
            Global transform is similar to <see cref="T:Aspose.ThreeD.Transform"/> but it's immutable while it represents the final evaluated transformation.
            Right-hand coordinate system is used while evaluating global transform
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.GlobalTransform.Translation">
            <summary>
            Gets the translation
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.GlobalTransform.Scale">
            <summary>
            Gets the scale
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.GlobalTransform.EulerAngles">
            <summary>
            Gets the rotation represented in euler angles, measured in degree
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.GlobalTransform.Rotation">
            <summary>
            Gets the rotation represented in quaternion.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.GlobalTransform.TransformMatrix">
            <summary>
            Gets the transform matrix.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.TransformBase">
            <summary>
            The interface of all kinds of transform
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.TransformBase.EulerAngles">
            <summary>
            Euler angles in degree
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.EulerTransform">
            <summary>
            Euler-angle based transform
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.EulerTransform.EulerAngles">
            <summary>
            Euler angles in degree
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.QuaternionTransform">
            <summary>
            Quaternion-based transform
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.QuaternionTransform.EulerAngles">
            <summary>
            Euler angles in degree
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.MatrixTransform">
            <summary>
            Matrix-based transform
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.MatrixTransform.EulerAngles">
            <summary>
            Euler angles in degree
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.NamespaceDoc">
            <summary>
            All shading related classes are defined in this namespace.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.PbrMaterial">
            <summary>
            Material for physically based rendering based on albedo color/metallic/roughness
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.Transparency">
            <summary>
             Gets or sets the transparency factor.
            The factor should be ranged between 0(0%, fully opaque) and 1(100%, fully transparent)
            Any invalid factor value will be clampped.
            </summary>
            <value>The transparency factor.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.NormalTexture">
            <summary>
            Gets or sets the texture of normal mapping
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.SpecularTexture">
            <summary>
            Gets or sets the texture for specular color
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.AlbedoTexture">
            <summary>
            Gets or sets the texture for albedo
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.Albedo">
            <summary>
            Gets or sets the base color of the material 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.OcclusionTexture">
            <summary>
            Gets or sets the texture for ambient occlusion
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.OcclusionFactor">
            <summary>
            Gets or sets the factor of ambient occlusion
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.MetallicFactor">
            <summary>
            Gets or sets the metalness of the material, value of 1 means the material is a metal and value of 0 means the material is a dielectric.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.RoughnessFactor">
            <summary>
            Gets or sets the roughness of the material, value of 1 means the material is completely rough and value of 0 means the material is completely smooth
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.MetallicRoughness">
            <summary>
            Gets or sets the texture for metallic(in R channel) and roughness(in G channel)
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.EmissiveTexture">
            <summary>
            Gets or sets the texture for emissive
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrMaterial.EmissiveColor">
            <summary>
            Gets or sets the emissive color
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.PbrMaterial.#ctor">
            <summary>
            Construct a default PBR material instance
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.PbrMaterial.#ctor(System.Drawing.Color)">
            <summary>
            Construct a default PBR material with specified albedo color value.
            </summary>
            <param name="albedo">The default albedo color value</param>
        </member>
        <member name="T:Aspose.ThreeD.Shading.PbrSpecularMaterial">
            <summary>
            Material for physically based rendering based on diffuse color/specular/glossiness
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrSpecularMaterial.Transparency">
            <summary>
             Gets or sets the transparency factor.
            The factor should be ranged between 0(0%, fully opaque) and 1(100%, fully transparent)
            Any invalid factor value will be clampped.
            </summary>
            <value>The transparency factor.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrSpecularMaterial.NormalTexture">
            <summary>
            Gets or sets the texture of normal mapping
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrSpecularMaterial.SpecularGlossinessTexture">
            <summary>
            Gets or sets the texture for specular color, channel RGB stores the specular color and channel A stores the glossiness.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrSpecularMaterial.GlossinessFactor">
            <summary>
            Gets or sets the glossiness(smoothness) of the material, 1 means perfectly smooth and 0 means perfectly rough, default value is 1, range is [0, 1] 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrSpecularMaterial.Specular">
            <summary>
            Gets or sets the specular color of the material, default value is (1, 1, 1).
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrSpecularMaterial.DiffuseTexture">
            <summary>
            Gets or sets the texture for diffuse
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrSpecularMaterial.Diffuse">
            <summary>
            Gets or sets the diffuse color of the material, default value is (1, 1, 1)
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrSpecularMaterial.EmissiveTexture">
            <summary>
            Gets or sets the texture for emissive
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PbrSpecularMaterial.EmissiveColor">
            <summary>
            Gets or sets the emissive color, default value is (0, 0, 0)
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.PbrSpecularMaterial.#ctor">
            <summary>
            Constructor of the <see cref="T:Aspose.ThreeD.Shading.PbrSpecularMaterial"/>
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.Texture">
            <summary>
             This class defines the texture from an external file.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.Texture.EnableMipMap">
            <summary>
            Gets or sets if the mipmap is enabled for this texture
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.Texture.Content">
            <summary>
            Gets or sets the binary content of the texture.
            The embedded texture content is optional, user should load texture from external file if this is missing.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.Texture.FileName">
            <summary>
            Gets or sets the associated texture file. 
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.Texture.RelativeFileName">
            <summary>
            Gets or sets the associated texture file 
            </summary>
            <value>The name of the relative file.</value>
        </member>
        <member name="M:Aspose.ThreeD.Shading.Texture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.Texture"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.Texture.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.Texture"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="T:Aspose.ThreeD.Shading.LayeredBlendMode">
            <summary>
            Layered blend mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Translucent">
            <summary>
            The new texture layer is transparent (depending on the Alpha value).
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Additive">
            <summary>
            Add the color of the new texture to the previous texture.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Modulate">
            <summary>
            Multiples the color value of the new texture by the color values of all previous layers of texture.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Modulate2">
            <summary>
            Multiples the color value of the new texture by two and then by the color values of all previous layers of texture.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Over">
            <summary>
            Equivalent to Translucent. Blends the new texture over top of the old texture, according to the new texture's alpha channel.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Normal">
            <summary>
            The colors of the two layers will not interact in any way, and it will display the full value of the colors in layer 1.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Dissolve">
            <summary>
            Dissolve makes the lower layer take on the colors of the top layer, and how much depends on the opacity of the upper layer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Darken">
            <summary>
            Darken compares each pixel value of the upper layer to its counterpart's pixel value of the lower layer and chooses the darker of the two to display.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.ColorBurn">
            <summary>
            Color Burn burns in the color of the upper layer with the lower layer. No part of the image will get lighter.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.LinearBurn">
            <summary>
            Linear Burn works like multiply but the results are more intense.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.DarkerColor">
            <summary>
            This blend mode simply divides pixel values of one layer with the other.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Lighten">
            <summary>
            Lighten compares the two layers pixel for pixel and uses the lightest pixel value. No part of the image gets darker.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Screen">
            <summary>
            Screen brightens by lightning the lower layer based on the lightness of the upper layer
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.ColorDodge">
            <summary>
            Color Dodge dodges the lower layer with the upper layer, resulting in a lighter image. No part of the image will be darkened.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.LinearDodge">
            <summary>
            Linear Dodge works like screen but with more intense results.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.LighterColor">
            <summary>
            This blend mode has the opposite effect of the Darker Color mode. It compares all the values in both layers, then displays the lightest values.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.SoftLight">
            <summary>
            Soft Light will multiply the dark tones and screen the light tones.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.HardLight">
            <summary>
            Hard Light multiplies the dark colors and screens the light colors.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.VividLight">
            <summary>
            Vivid Light will dodges or burn the lower layer pixels depending on whether the upper layer pixels are brighter or darker than neutral gray. It works on the contrast of the lower layer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.LinearLight">
            <summary>
            Linear Light is the same as Vivid light but it works on the brightness of the lower layer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.PinLight">
            <summary>
            Pin Light changes the lower layer pixels depending on how bright the pixels are in the upper layer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.HardMix">
            <summary>
            Produces either white or black, depending on similarities between A and B.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Difference">
            <summary>
            Difference reacts to the differences between the upper and lower layer pixels.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Exclusion">
            <summary>
            Exclusion uses the darkness of the lower layer to mask the difference between upper and lower layers.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Subtract">
            <summary>
            The result color is the foreground color subtracted from the background color. The result color is then applied over the background color using the foreground alpha to define the opacity of the result.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Divide">
            <summary>
            This blend mode simply divides pixel values of one layer with the other.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Hue">
            <summary>
            Hue changes the hue of the lower layer to the hue of the upper layer but leaves brightness and saturation alone.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Saturation">
            <summary>
            Saturation changes the saturation of the lower layer to the hue of the upper layer but leaves brightness and hue alone.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Color">
            <summary>
            Color changes the hue and saturation of the lower layer to the hue and saturation of the upper layer but leaves luminosity alone.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Luminosity">
            <summary>
            Luminosity changes the luminosity of the lower layer to the luminosity of the upper layer while leaving hue and saturation the same.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.LayeredBlendMode.Overlay">
            <summary>
            Multiplies (darkens) when the layer on which the mode is set is dark and screens (brightens) when the layer on which the mode is applied is lighter.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.LayeredTexture">
            <summary>
             LayeredTexture is a combination of multiple textures(Texture) blended sequentially. 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.LayeredTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.LayeredTexture"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.LayeredTexture.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.LayeredTexture"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:Aspose.ThreeD.Shading.LayeredTexture.Textures">
            <summary>
            Gets the textures attached to this layered textures.
            </summary>
            <value>The textures.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.LayeredTexture.AlphaBlends">
            <summary>
            Gets all the texture's alpha blend configuration.
            </summary>
            <value>The alpha blends.</value>
        </member>
        <member name="M:Aspose.ThreeD.Shading.LayeredTexture.GetAlphaBlend(System.Int32)">
            <summary>
            Gets the alpha blend configuration for given texture.
            </summary>
            <returns>The alpha blend.</returns>
            <param name="texture">Texture.</param>
        </member>
        <member name="M:Aspose.ThreeD.Shading.ProceduralTexture.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.ProceduralTexture"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.Shading.WrapMode">
            <summary>
            Texture's wrap mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.WrapMode.Wrap">
            <summary>
            Tiles the texture on the model's surface, creating a repeating pattern. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.WrapMode.Clamp">
            <summary>
            Clamps the texture to the last pixel at the border.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.WrapMode.Mirror">
            <summary>
             The texture will be repeated, but it will be mirrored when the integer part of the coordinate is odd.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.WrapMode.MirrorOnce">
            <summary>
            The texture will be mirrored once, and then clamps to the maximum value.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.WrapMode.Border">
            <summary>
            The coordinates that outside of the range [0.0, 1.0] are set to a specified border color.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.AlphaSource">
            <summary>
            Defines whether the texture contains the alpha channel.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.AlphaSource.None">
            <summary>
            No alpha is defined in the texture
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.AlphaSource.PixelAlpha">
            <summary>
            The alpha is defined by pixel's alpha channel
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.AlphaSource.FixedValue">
            <summary>
            The Alpha is a fixed value which is defined by <see cref="P:Aspose.ThreeD.Shading.TextureBase.Alpha"/> 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.TextureFilter">
            <summary>
            Filter options during texture sampling.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.TextureFilter.None">
            <summary>
            No minification, this is only used by minification filter.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.TextureFilter.Point">
            <summary>
            Use point sampling
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.TextureFilter.Linear">
            <summary>
            Use linear interpolation for sampling
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.TextureFilter.Anisotropic">
            <summary>
            Use anisotropic interpolation for sampling, this is only used by minification filter.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.TextureBase">
            <summary>
            Base class for all concrete textures.
            Texture defines the look and feel of a geometry surface.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.Alpha">
            <summary>
            Gets or sets the default alpha value of the texture
            This is valid when the <see cref="P:Aspose.ThreeD.Shading.TextureBase.AlphaSource"/> is <see cref="F:Aspose.ThreeD.Shading.AlphaSource.PixelAlpha"/>
            Default value is 1.0, valid value range is between 0 and 1
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.AlphaSource">
            <summary>
            Gets or sets whether the texture defines the alpha channel.
            Default value is <see cref="F:Aspose.ThreeD.Shading.AlphaSource.None"/>
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.WrapModeU">
            <summary>
            Gets or sets the texture wrap modes in U.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.WrapModeV">
            <summary>
            Gets or sets the texture wrap modes in V.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.WrapModeW">
            <summary>
            Gets or sets the texture wrap modes in W.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.MinFilter">
            <summary>
            Gets or sets the filter for minification.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.MagFilter">
            <summary>
            Gets or sets the filter for magnification.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.MipFilter">
            <summary>
            Gets or sets the filter for mip-level sampling.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.UVRotation">
            <summary>
            Gets or sets the rotation of the texture
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.UVScale">
            <summary>
            Gets or sets the UV scale.
            </summary>
            <value>The UV scale.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureBase.UVTranslation">
            <summary>
            Gets or sets the UV translation.
            </summary>
            <value>The UV translation.</value>
        </member>
        <member name="M:Aspose.ThreeD.Shading.TextureBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.TextureBase"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Shading.TextureBase.SetTranslation(System.Double,System.Double)">
            <summary>
            Sets the UV translation.
            </summary>
            <param name="u">U.</param>
            <param name="v">V.</param>
        </member>
        <member name="M:Aspose.ThreeD.Shading.TextureBase.SetScale(System.Double,System.Double)">
            <summary>
            Sets the UV scale.
            </summary>
            <param name="u">U.</param>
            <param name="v">V.</param>
        </member>
        <member name="M:Aspose.ThreeD.Shading.TextureBase.SetRotation(System.Double,System.Double)">
            <summary>
            Sets the UV rotation.
            </summary>
            <param name="u">U.</param>
            <param name="v">V.</param>
        </member>
        <member name="T:Aspose.ThreeD.Shading.ShadingLanguage">
            <summary>
            Commonly used shading languages
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.RenderMan">
            <summary>
            RenderMan shading language.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.HoudiniVEX">
            <summary>
            Houdini VEX Shading language
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.Gelato">
            <summary>
            The gelato shading language
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.OpenShadingLanguage">
            <summary>
            Open shading language is developed by Sony Pictures Imageworks used in its Arnold renderer.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.ARBAssembly">
            <summary>
            ARB assembly language is a low-level shading language created by OpenGL Architecture Review Board to standardize GPU instructions.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.DirectXShaderAssembly">
            <summary>
            The DirectX shader assembly language
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.HLSL">
            <summary>
            DirectX High-Level Shader language
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.GLSL">
            <summary>
            The GLSL
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.AGAL">
            <summary>
            Adobe Graphics Assembly Language
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.PSSL">
            <summary>
            PlayStation Shader Language
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.Metal">
            <summary>
            iOS Metal Shading language
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.CGFX">
            <summary>
            NVIDIA Cg 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.SFX">
            <summary>
            SFX
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.ShadingLanguage.MentalRay">
            <summary>
            Mental Ray Shader language
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.RenderingAPI">
            <summary>
            Commonly used rendering APIs
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.None">
            <summary>
            No rendering API
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Preview">
            <summary>
            PreviewColorAPI, compatible with FBX
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.DirectX">
            <summary>
            DirectX
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.OpenGL">
            <summary>
            OpenGL
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.OpenGLES">
            <summary>
            OpenGL ES
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Mantle">
            <summary>
            AMD Mantle
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Metal">
            <summary>
            Metal developed by Apple
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Vulkan">
            <summary>
            Vulkan
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.RenderMan">
            <summary>
            RenderMan
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.RenderWare">
            <summary>
            RenderWare
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Stage3D">
            <summary>
            Stage3D used in Adobe Flash
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.MentalRay">
            <summary>
            MentalRay
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Arnold">
            <summary>
            Arnold renderer
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.ShaderFX">
            <summary>
            ShaderFX renderer
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.RenderingAPI.Custom">
            <summary>
            Custom rendering APi
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.TextureAlphaBlend">
            <summary>
            Texture alpha blend configuration.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureAlphaBlend.BlendMode">
            <summary>
            Gets or sets the blend mode of the texture.
            </summary>
            <value>The blend mode.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.TextureAlphaBlend.Alpha">
            <summary>
            Gets or sets the alpha value of the texture.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="M:Aspose.ThreeD.Shading.TextureAlphaBlend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.TextureAlphaBlend"/> class.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.ShaderTechnique">
            <summary>
            A shader technique represents a concrete rendering implementation.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.ShaderTechnique.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.ShaderTechnique"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.Description">
            <summary>
            Gets or sets the description of this technique
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderLanguage">
            <summary>
            Gets or sets the shader language used by this technique.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderVersion">
            <summary>
            Gets or sets the shader version used by this technique.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderFile">
            <summary>
            Gets or sets the file name of the external shader file.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderContent">
            <summary>
            Gets or sets the content of a embedded shader script.
            It could be HLSL/GLSL shader source file.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderEntry">
            <summary>
            Gets or sets the entry point of the shader, some shader like HLSL can have customized shader entries.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.RenderAPI">
            <summary>
            Gets or sets the rendering API used by this technique
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.RenderAPIVersion">
            <summary>
            Gets or sets the version of the rendering API.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderTechnique.ShaderParameters">
            <summary>
            Gets the shader parameter definition.
            The key is the name of the dynamic property, and value is the shader parameter name that the property connected to.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.ShaderTechnique.AddBinding(System.String,System.String)">
            <summary>
            Binds the dynamic property to shader parameter
            </summary>
            <param name="property">The name of the dynamic property.</param>
            <param name="shaderParameter">The name of the shader parameter.</param>
        </member>
        <member name="T:Aspose.ThreeD.Shading.ShaderMaterial">
            <summary>
            A shader material allows to describe the material by external rendering engine or shader language.
            <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial"/> uses <see cref="T:Aspose.ThreeD.Shading.ShaderTechnique"/> to describe the concrete rendering details, 
            and the most suitable one will be used according to the final rendering platform.
            For example, your <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial"/> instance can have two technique, one is defined by HLSL, and another is defined by GLSL
            Under non-window platform the GLSL should be used instead of HLSL 
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.ShaderMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.ShaderMaterial.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:Aspose.ThreeD.Shading.ShaderMaterial.Techniques">
            <summary>
            Gets all available techniques defined in this material.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Shading.Material">
            <summary>
            Material defines the parameters necessary for visual appearance of geometry.
            Aspose.3D provides shading model for <see cref="T:Aspose.ThreeD.Shading.LambertMaterial"/>, <see cref="T:Aspose.ThreeD.Shading.PhongMaterial"/> and <see cref="T:Aspose.ThreeD.Shading.ShaderMaterial"/>
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.Material.transparencyFactor">
            <summary>
            The factor should be ranged between 0(0%, fully opaque) and 1(100%, fully transparent)
            Any invalid factor value will be clampped.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.Material.MapSpecular">
            <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)"/> to assign a specular texture mapping.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.Material.MapDiffuse">
            <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)"/> to assign a diffuse texture mapping.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.Material.MapEmissive">
            <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)"/> to assign a emissive texture mapping.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.Material.MapAmbient">
            <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)"/> to assign a ambient texture mapping.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Shading.Material.MapNormal">
            <summary>
            Used in <see cref="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)"/> to assign a normal texture mapping.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.Material.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.Material"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Shading.Material.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.Material"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.Material.Culling">
            <summary>
            Gets or sets whether to enable face culling, default value is true
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.Material.GetTexture(System.String)">
            <summary>
            Gets the texture from the specified slot, it can be material's property name or shader's parameter name
            </summary>
            <returns>The texture.</returns>
            <param name="slotName">Slot name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Shading.Material.SetTexture(System.String,Aspose.ThreeD.Shading.TextureBase)">
            <summary>
            Sets the texture to specified slot
            </summary>
            <param name="slotName">Slot name.</param>
            <param name="texture">Texture.</param>
        </member>
        <member name="M:Aspose.ThreeD.Shading.Material.ToString">
            <summary>
            Formats object to string
            </summary>
            <returns>Object string</returns>
        </member>
        <member name="T:Aspose.ThreeD.Shading.LambertMaterial">
            <summary>
             Material for lambert shading model
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.LambertMaterial.EmissiveColor">
            <summary>
            Gets or sets the emissive color
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.LambertMaterial.AmbientColor">
            <summary>
             Gets or sets the ambient color
            </summary>
            <value>The ambient.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.LambertMaterial.DiffuseColor">
            <summary>
            Gets or sets the diffuse color
            </summary>
            <value>The diffuse.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.LambertMaterial.TransparentColor">
            <summary>
            Gets or sets the transparent color. 
            </summary>
            <value>The color of the transparent.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.LambertMaterial.Transparency">
            <summary>
             Gets or sets the transparency factor.
            The factor should be ranged between 0(0%, fully opaque) and 1(100%, fully transparent)
            Any invalid factor value will be clampped.
            </summary>
            <value>The transparency factor.</value>
        </member>
        <member name="M:Aspose.ThreeD.Shading.LambertMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.LambertMaterial"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.LambertMaterial.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.LambertMaterial"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="T:Aspose.ThreeD.Shading.PhongMaterial">
            <summary>
            Material for blinn-phong shading model.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PhongMaterial.SpecularColor">
            <summary>
            Gets or sets the specular color. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PhongMaterial.SpecularFactor">
             <summary>
             Gets or sets the specular factor. 
            The formula of specular:
             SpecularColor * SpecularFactor * (N dot H) ^ Shininess
             </summary>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PhongMaterial.Shininess">
             <summary>
              Gets or sets the shininess, this controls the specular highlight's size.
            The formula of specular:
             SpecularColor * SpecularFactor * (N dot H) ^ Shininess
             </summary>
             <value>The shininess.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PhongMaterial.ReflectionColor">
            <summary>
            Gets or sets the reflection color.
            </summary>
            <value>The reflection.</value>
        </member>
        <member name="P:Aspose.ThreeD.Shading.PhongMaterial.ReflectionFactor">
            <summary>
            Gets or sets the attenuation of the reflection color. 
            </summary>
            <value>The reflection factor.</value>
        </member>
        <member name="M:Aspose.ThreeD.Shading.PhongMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.PhongMaterial"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Shading.PhongMaterial.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Shading.PhongMaterial"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.Unused``1(``0)">
            <summary>
            Make SonarQube happy
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.ParseDouble(System.String)">
            <summary>
            Culture-invariable parse
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.Compare(System.Byte[],System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Compare byte array, equivalent to memcmp in C
            </summary>
            <param name="arrayA"></param>
            <param name="offsetA"></param>
            <param name="arrayB"></param>
            <param name="offsetB"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.Compare(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compare byte array, equivalent to memcmp in C
            </summary>
            <param name="arrayA"></param>
            <param name="offsetA"></param>
            <param name="arrayB"></param>
            <param name="offsetB"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.GetAllNodes(Aspose.ThreeD.Node)">
            <summary>
            Gets all descendant nodes include current node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.ArraySet``1(``0[],System.Int32,System.Int32,``0)">
            <summary>
            Equivalent to memset
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.ArraySet``1(``0[],``0)">
            <summary>
            Equivalent to memset
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.WriteLine(System.String,System.Object[])">
            <summary>
            Debug utility, only print debug information to console during debug version
            </summary>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.DumpSceneStructure(Aspose.ThreeD.Scene)">
            <summary>
            Dump scene structure for debugging
            </summary>
            <param name="scene"></param>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.Enumerate(Aspose.ThreeD.Node)">
            <summary>
            Enumerate all child node and entities in a flat sequencing order.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.Max(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Gets the maximum value from the array
            </summary>
            <param name="data"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.PopLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove last element and return it
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Add all elements from src to dst
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dest"></param>
            <param name="src"></param>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.AlignBuffer(System.IO.MemoryStream,System.Int32)">
            <summary>
            Align the buffer by 4 bytes
            </summary>
            <param name="ms"></param>
            <param name="bytesAlign"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.AlignedBytes(System.Byte[],System.Int32)">
            <summary>
            Align the data by specified bytes
            </summary>
            <param name="data"></param>
            <param name="bytesAlign"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.StringEquals(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Check if substring of strA starts at cursor equals to strB
            </summary>
            <param name="strA"></param>
            <param name="cursor"></param>
            <param name="strB"></param>
            <param name="ignoreCases"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linear interpolation between two values based on a weight
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.NewellNormal(Aspose.ThreeD.Utilities.Vector4List)">
            <summary>
            Calculate the normal of polygon using newell algorithm
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.IsTrue(System.Object)">
            <summary>
            Check if variable is a boxed boolean constant true
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.FormatDouble(System.Text.StringBuilder,System.Double)">
            <summary>
            Fast convert double to string that satisfy FBX's ASCII standard
            It's 10~1000 time faster than .net implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DUtils.GetIntProperty(Aspose.ThreeD.A3DObject,System.String,System.Int32)">
            <summary>
            Get the value of an integer property
            </summary>
            <param name="obj"></param>
            <param name="propName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.DisplayLayer">
            <summary>
            Display layers are overlapping views of your scene that contain a list of members. 
            The members are exclusive. Members cannot be part of multiple display layers. 
            Display layers enables user to organize elements of scene and affect visibility and manipulation attributes of multiple objects at once.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.DisplayLayer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.DisplayLayer"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:Aspose.ThreeD.DisplayLayer.Members">
            <summary>
            Gets the members that belongs to this display layer.
            </summary>
            <value>The members.</value>
        </member>
        <member name="P:Aspose.ThreeD.DisplayLayer.Color">
            <summary>
            Gets or sets the color of this display layer. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.DisplayLayer.Show">
            <summary>
            Gets or sets the visibility of this display layer.  
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.DisplayLayer.Freeze">
            <summary>
            Gets or sets the manipulation state of this display layer.  
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.DisplayLayer.LODBox">
            <summary>
            Gets or sets the level of detail mode of this display layer. 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.ImageSize">
            <summary>
            Predefined thumbnail image size.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ImageSize.NotSet">
            <summary>
            Size is not set
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ImageSize.x64">
            <summary>
            64x64
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ImageSize.x128">
            <summary>
            128x128
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ImageSize.CustomSize">
            <summary>
            Custom size
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.ImageDataFormat">
            <summary>
            Thumbnail's pixel format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ImageDataFormat.RGB24">
            <summary>
            3 components
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.ImageDataFormat.RGB32">
            <summary>
            4 components
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Thumbnail">
            <summary>
             Simple class to hold RGBA values of a thumbnail image. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Thumbnail.CustomHeight">
            <summary>
            Gets or sets pixel height of the thumbnail image.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Thumbnail.CustomWidth">
            <summary>
            Gets or sets pixel width of the thumbnail image.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Thumbnail.ImageSize">
            <summary>
            Gets or sets the size of the image.
            </summary>
            <value>The size of the image.</value>
        </member>
        <member name="P:Aspose.ThreeD.Thumbnail.DataFormat">
            <summary>
            Gets or sets the data format.
            </summary>
            <value>The data format.</value>
        </member>
        <member name="P:Aspose.ThreeD.Thumbnail.ImageData">
            <summary>
            Gets or sets the image data.
            </summary>
            <value>The image data.</value>
        </member>
        <member name="M:Aspose.ThreeD.Thumbnail.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Thumbnail"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="T:Aspose.ThreeD.PoseType">
            <summary>
            Pose type.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.PoseType.BindPose">
            <summary>
            The bind pose.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.PoseType.Snapshot">
            <summary>
            The rest pose, means it's a snapshot of the bind pose.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Pose">
            <summary>
            The pose is used to store transformation matrix when the geometry is skinned.
            The pose is a set of <see cref="T:Aspose.ThreeD.BonePose"/>, each <see cref="T:Aspose.ThreeD.BonePose"/> saves the concrete transformation information of the bone node.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Pose.PoseType">
            <summary>
            Gets or sets the type of the pose.
            </summary>
            <value>The type of the pose.</value>
        </member>
        <member name="P:Aspose.ThreeD.Pose.BonePoses">
            <summary>
            Gets all <see cref="T:Aspose.ThreeD.BonePose"/>.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="M:Aspose.ThreeD.Pose.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Pose"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.Pose.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Pose"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Pose.AddBonePose(Aspose.ThreeD.Node,Aspose.ThreeD.Utilities.Matrix4,System.Boolean)">
            <summary>
            Saves pose transformation matrix for the given bone node. 
            </summary>
            <param name="node">Bone Node.</param>
            <param name="matrix">Transformation matrix.</param>
            <param name="localMatrix">If set to <c>true</c> means to use local matrix otherwise means global matrix.</param>
        </member>
        <member name="M:Aspose.ThreeD.Pose.AddBonePose(Aspose.ThreeD.Node,Aspose.ThreeD.Utilities.Matrix4)">
            <summary>
            Saves pose transformation matrix for the given bone node. 
            Global transformation matrix is implied.
            </summary>
            <param name="node">Bone Node.</param>
            <param name="matrix">Transformation matrix.</param>
        </member>
        <member name="T:Aspose.ThreeD.CustomObject">
            <summary>
            Meta data or custom objects used in 3D files are managed by this class.
            All custom properties are saved as dynamic properties.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.CustomObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.CustomObject"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.CustomObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.CustomObject"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.SceneIO.Open(Aspose.ThreeD.Formats.ImportContext,System.Threading.CancellationToken)">
            <summary>
            </summary>
            <param name="ctx"></param>
            <param name="cancellationToken"></param>
            <exception cref="T:Aspose.ThreeD.ImportException"/>
        </member>
        <member name="T:Aspose.ThreeD.FileFormatType">
            <summary>
            File format type
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.FBX">
            <summary>
            FBX file format type
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.STL">
            <summary>
            STL file format type
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.WavefrontOBJ">
            <summary>
            Wavefront OBJ format type
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.Discreet3DS">
            <summary>
            Discreet 3D Studio's file format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.COLLADA">
            <summary>
            Khronos Group's Collada file format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.Universal3D">
            <summary>
            Universal 3D file format type
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.PDF">
            <summary>
            Portable Document Format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.GLTF">
            <summary>
            Khronos Group's glTF
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.DXF">
            <summary>
            AutoCAD DXF
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.PLY">
            <summary>
            Polygon File Format or Stanford Triangle Format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.X">
            <summary>
            DirectX's X File
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.Draco">
            <summary>
            Google Draco Mesh
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.Microsoft3MF">
            <summary>
            3D Manufacturing Format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.Rvm">
            <summary>
            AVEVA Plant Design Management System Model.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.ASE">
            <summary>
            3D Studio Max's ASCII Scene Exporter format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.Zip">
            <summary>
            Zip archive that contains other 3d file format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.STEP">
            <summary>
            ISO 10303-21 STEP file
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.IFC">
            <summary>
            ISO 16739-1 Industry Foundation Classes data model.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.SiemensJT">
            <summary>
            Siemen PLM Software NX's JT File
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.AMF">
            <summary>
            Additive manufacturing file format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.VRML">
            <summary>
            The Virtual Reality Modeling Language
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.HTML5">
            <summary>
            HTML5 File
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.Aspose3DWeb">
            <summary>
            Aspose.3D Web format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormatType.PRC">
            <summary>
            Adobe's PRC Format 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.FileFormatType.Extension">
            <summary>
            The extension name of this file format, started with .
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.FileFormatType.ToString">
            <summary>
            Get the name of this file format type
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="M:Aspose.ThreeD.FileFormatType.ToString"/>.</returns>
        </member>
        <member name="T:Aspose.ThreeD.FileContentType">
            <summary>
            File content type
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileContentType.Binary">
            <summary>
            Binary format type, such as binary FBX, binary STL
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileContentType.ASCII">
            <summary>
            ASCII format type, such as ASCII FBX, ASCII STL
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.FileFormat">
            <summary>
            File format definition
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX6100ASCII">
            <summary>
            ASCII FBX file format, with 6.1.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX6100Binary">
            <summary>
            Binary FBX file format, with 6.1.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX7200ASCII">
            <summary>
            ASCII FBX file format, with 7.2.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX7200Binary">
            <summary>
            Binary FBX file format, with 7.2.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX7300ASCII">
            <summary>
            ASCII FBX file format, with 7.3.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX7300Binary">
            <summary>
            Binary FBX file format, with 7.3.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX7400ASCII">
            <summary>
            ASCII FBX file format, with 7.4.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX7400Binary">
            <summary>
            Binary FBX file format, with 7.4.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX7500ASCII">
            <summary>
            ASCII FBX file format, with 7.5.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.FBX7500Binary">
            <summary>
            Binary FBX file format, with 7.5.0 version
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.STLBinary">
            <summary>
            Binary STL file format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.STLASCII">
            <summary>
            ASCII STL file format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.WavefrontOBJ">
            <summary>
            Wavefront's Obj file format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.Discreet3DS">
            <summary>
            3D Studio's file format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.Collada">
            <summary>
            Collada file format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.Universal3D">
            <summary>
            Universal3D file format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.GLTF">
            <summary>
            Khronos Group's glTF
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.GLTF2">
            <summary>
            Khronos Group's glTF version 2.0
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.GLTF_Binary">
            <summary>
            Khronos Group's glTF in Binary format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.GLTF2_Binary">
            <summary>
            Khronos Group's glTF version 2.0
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.PDF">
            <summary>
            Adobe's Portable Document Format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.DXF">
            <summary>
            AutoCAD DXF
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.PLY">
            <summary>
            Polygon File Format or Stanford Triangle Format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.XBinary">
            <summary>
            DirectX X File in binary format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.XText">
            <summary>
            DirectX X File in binary format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.Draco">
            <summary>
            Google Draco Mesh
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.Microsoft3MF">
            <summary>
            Microsoft 3D Manufacturing Format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.RvmText">
            <summary>
            AVEVA Plant Design Management System Model in text format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.RvmBinary">
            <summary>
            AVEVA Plant Design Management System Model in binary format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.ASE">
            <summary>
            3D Studio Max's ASCII Scene Exporter format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.STEP">
            <summary>
            ISO 10303-21 STEP file.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.IFC">
            <summary>
            ISO 16739-1 Industry Foundation Classes data model.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.SiemensJT8">
            <summary>
            Siemens JT File Version 8
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.SiemensJT9">
            <summary>
            Siemens JT File Version 9
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.AMF">
            <summary>
            Additive manufacturing file format
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.VRML">
            <summary>
            The Virtual Reality Modeling Language
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.PRC">
            <summary>
            Adobe's PRC File
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.Aspose3DWeb">
            <summary>
            Aspose.3D Web format.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.HTML5">
            <summary>
            HTML5 File
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.FileFormat.Zip">
            <summary>
            Zip archive that contains other 3d file format.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.FileFormat.Version">
            <summary>
            Gets file format version
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.FileFormat.Extension">
            <summary>
            Gets the extension name of this type.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.FileFormat.ContentType">
            <summary>
            Gets file format content type
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.FileFormat.FileFormatType">
            <summary>
            Gets file format type
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.FileFormat.#ctor(Aspose.ThreeD.FileFormatType,System.Version,Aspose.ThreeD.FileContentType,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Aspose.ThreeD.FileFormat"/>
            </summary>
            <param name="formatType">File format type</param>
            <param name="version">Version</param>
            <param name="contentType">Content type</param>
            <param name="extension">Extension name</param>
        </member>
        <member name="M:Aspose.ThreeD.FileFormat.Detect(System.IO.Stream,System.String)">
            <summary>
            Detect the file format from data stream, file name is optional for guessing types that has no magic header.
            </summary>
            <param name="stream"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.FileFormat.Detect(System.String)">
            <summary>
            Detect the file format from file name, file must be readable so Aspose.3D can detect the file format through file header.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.FileFormat.CreateLoadOptions">
            <summary>
            Create a default load options for this file format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.FileFormat.CreateSaveOptions">
            <summary>
            Create a default save options for this file format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.FileFormat.ToString">
            <summary>
            Formats to string
            </summary>
            <returns>Object string</returns>
        </member>
        <member name="T:Aspose.ThreeD.TimeMode">
            <summary>
            Time mode.
            </summary>
            <remarks>
            NTSCDropFrame is used for broadcasting operations where clock time must be (almost) in sync with time code. To bring back color NTSC time code with clock time, this mode drops 2 frames per minute except for every 10 minutes (00, 10, 20, 30, 40, 50). 108 frames are dropped per hour. Over 24 hours the error is 2 frames and 1/4 of a frame. A time-code of 01:00:03:18 equals a clock time of 01:00:00:00
            NTSCFullFrame represents a time address and therefore is NOT IN SYNC with clock time. A time code of 01:00:00:00 equals a clock time of 01:00:03:18.
            </remarks>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.DefaultMode">
            <summary>
            The default mode.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames120">
            <summary>
            120 frames/s
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames100">
            <summary>
            100 frames/s
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames60">
            <summary>
            60 frames/s
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames50">
            <summary>
            50 frames/s
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames48">
            <summary>
            48 frames/s
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames30">
            <summary>
            30 frames/s (black and white NTSC)
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames30Drop">
            <summary>
            30 frames/s (use when display in frame is selected, equivalent to NTSC drop) 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.NTSCDropFrame">
            <summary>
            ~29.97 frames/s drop color NTSC 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.NTSCFullFrame">
            <summary>
            ~29.97 frames/s color NTSC 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.PAL">
            <summary>
             25 frames/s PAL/SECAM 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames24">
            <summary>
             24 frames/s Film/Cinema 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames1000">
            <summary>
             1000 milli/s (use for date time) 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.FilmFullFrame">
            <summary>
            ~23.976 frames/s 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Custom">
            <summary>
            Custom frame rate value 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames96">
            <summary>
            96 frames/s 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames72">
            <summary>
            72 frames/s 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.TimeMode.Frames59dot94">
            <summary>
            ~59.94 frames/s 
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.AssetInfo">
            <summary>
            Information of asset.
            Asset information can be attached to a <see cref="T:Aspose.ThreeD.Scene"/>.
            Child <see cref="T:Aspose.ThreeD.Scene"/> can have its own <see cref="T:Aspose.ThreeD.AssetInfo"/> to override parent's definition.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.AssetInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.AssetInfo"/> class.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.AssetInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.AssetInfo"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.CreationTime">
            <summary>
            Gets or Sets the creation time of this asset
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.ModificationTime">
            <summary>
            Gets or Sets the modification time of this asset
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.Ambient">
            <summary>
            Gets or Sets the default ambient color of this asset
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.Url">
            <summary>
            Gets or Sets the URL of this asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.ApplicationVendor">
            <summary>
            Gets or sets the application vendor's name
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.ApplicationName">
            <summary>
            Gets or sets the application that created this asset
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.ApplicationVersion">
            <summary>
            Gets or sets the version of the application that created this asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.Title">
            <summary>
            Gets or sets the title of this asset
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.Subject">
            <summary>
            Gets or sets the subject of this asset
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.Author">
            <summary>
            Gets or sets the author of this asset
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.Keywords">
            <summary>
            Gets or sets the keywords of this asset
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.Revision">
            <summary>
            Gets or sets the revision number of this asset, usually used in version control system.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.Comment">
            <summary>
            Gets or sets the comment of this asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.UnitName">
            <summary>
            Gets or sets the unit of length used in this asset.
            e.g. cm/m/km/inch/feet
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.UnitScaleFactor">
            <summary>
            Gets or sets the scale factor to real-world meter.
            </summary>
            <remarks>
            This is ignored during serialization if the unit name is null.
            </remarks>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.CoordinatedSystem">
            <summary>
            Gets or sets the coordinate system used in this asset.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.AssetInfo.UpVector">
            <summary>
            Gets or sets the up-vector used in this asset.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.BonePose">
            <summary>
            The <see cref="T:Aspose.ThreeD.BonePose"/> contains the transformation matrix for a bone node
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.BonePose.Node">
            <summary>
            Gets or sets the scene node, points to a skinned skeleton node
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.BonePose.Matrix">
            <summary>
            Gets or sets the transform matrix of the node in current pose. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.BonePose.IsLocal">
            <summary>
            Gets or sets if the matrix is defined in local coordinate.
            </summary>
            <value>true if this instance is local space; otherwise, false means global space.</value>
        </member>
        <member name="T:Aspose.ThreeD.A3DObject">
            <summary>
            The base class of all Aspose.ThreeD objects, all sub classes will support dynamic properties. 
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.A3DObject.name">
            <summary>
            The name of the current object.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.A3DObject.properties">
            <summary>
            The properties of the current object.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.A3DObject.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:Aspose.ThreeD.A3DObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.A3DObject"/> class.
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:Aspose.ThreeD.A3DObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.A3DObject"/> class with no name.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.A3DObject.RemoveProperty(Aspose.ThreeD.Property)">
            <summary>
            Removes a dynamic property.
            </summary>
            <param name="property">Which property to remove</param>
            <returns>true if the property is successfully removed</returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DObject.RemoveProperty(System.String)">
            <summary>
            Remove the specified property identified by name
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DObject.GetProperty(System.String)">
            <summary>
            Get the value of specified property
            </summary>
            <param name="property">Property name</param>
            <returns>The value of the found property</returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DObject.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of specified property
            </summary>
            <param name="property">Property name</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:Aspose.ThreeD.A3DObject.SetNativeProperty(System.String,System.Object)">
            <summary>
            set the value of the specified native property
            </summary>
            <returns>true means successed, and false means cannot find this property</returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DObject.GetNativeProperty(System.String,System.Object@)">
            <summary>
            Gets the value of specified native property
            </summary>
            <param name="name"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Aspose.ThreeD.A3DObject.FindProperty(System.String)">
            <summary>
            Finds the property.
            It can be a dynamic property (Created by CreateDynamicProperty/SetProperty) 
            or native property(Identified by its name)
            </summary>
            <returns>The property.</returns>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="P:Aspose.ThreeD.A3DObject.Properties">
            <summary>
            Gets the collection of all properties.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.PropertyFlags">
            <summary>
            Property's flags
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.PropertyFlags.None">
            <summary>
            The property has no flags
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.PropertyFlags.NotSerializable">
            <summary>
            This property is not serializable
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.PropertyFlags.UserDefined">
            <summary>
            This is a user defined property
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.PropertyFlags.Animatable">
            <summary>
            The property is animatable
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.PropertyFlags.Animated">
            <summary>
            The property is animated
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.PropertyFlags.Hidden">
            <summary>
            The property is marked as hidden.
            </summary>
        </member>
        <member name="T:Aspose.ThreeD.Property">
            <summary>
             Class to hold user-defined properties. 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Property.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Aspose.ThreeD.Property.Name">
            <summary>
             Gets the name of the property 
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Property.ValueType">
            <summary>
            Gets the type of the property value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="M:Aspose.ThreeD.Property.InitType(System.Type)">
            <summary>
            Initializes the property's type.
            </summary>
            <param name="t">Type.</param>
        </member>
        <member name="M:Aspose.ThreeD.Property.GetBindPoint(Aspose.ThreeD.Animation.AnimationNode,System.Boolean)">
            <summary>
            Gets the property bind point on specified animation instance.
            </summary>
            <param name="anim">On which animation to create the bind point.</param>
            <param name="create">Create the property bind point if it's not found.</param>
            <returns>The property bind point on specified animation instance</returns>
        </member>
        <member name="M:Aspose.ThreeD.Property.GetKeyframeSequence(Aspose.ThreeD.Animation.AnimationNode,System.Boolean)">
            <summary>
            Gets the keyframe sequence on specified animation instance.
            </summary>
            <param name="anim">On which animation to create the keyframe sequence.</param>
            <param name="create">Create the keyframe sequence if it's not found.</param>
            <returns>The keyframe sequence on specified animation instance</returns>
        </member>
        <member name="M:Aspose.ThreeD.Property.#ctor(Aspose.ThreeD.A3DObject,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Property"/> class.
            </summary>
            <param name="owner">Owner.</param>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Property.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Aspose.ThreeD.Property"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Aspose.ThreeD.Property"/>.</returns>
        </member>
        <member name="T:Aspose.ThreeD.Entity">
            <summary>
            The base class of all entities.
            Entity represents a concrete object that attached under a node like <see cref="T:Aspose.ThreeD.Entities.Light"/>/<see cref="T:Aspose.ThreeD.Entities.Geometry"/>.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entity.renderError">
            <summary>
            If there's something wrong during the rendering, renderer will turn this on so it will no longer renderable.
            </summary>
        </member>
        <member name="F:Aspose.ThreeD.Entity.contentVersion">
            <summary>
            This version number will get changed whenever the content is modified.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entity"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Aspose.ThreeD.Entity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Aspose.ThreeD.Entity"/> class.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entity.ParentNodes">
            <summary>
            Gets all parent nodes, an entity can be attached to multiple parent nodes for geometry instancing
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="P:Aspose.ThreeD.Entity.Excluded">
            <summary>
            Gets or sets wheather to exclude this entity during exporting.
            </summary>
        </member>
        <member name="P:Aspose.ThreeD.Entity.ParentNode">
            <summary>
            Gets or sets the first parent node, if set the first parent node, this entity will be detached from other parent nodes.
            </summary>
            <value>The parent node.</value>
        </member>
        <member name="M:Aspose.ThreeD.Entity.GetBoundingBox">
            <summary>
            Gets the bounding box of current entity in its object space coordinate system.
            </summary>
        </member>
        <member name="M:Aspose.ThreeD.Entity.GetEntityRendererKey">
            <summary>
            Gets the key of the entity renderer registered in the renderer 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Aspose.ThreeD.TypedSubCollection`2">
            <summary>
            Expose a set of objects as a typed sub collection with specified type
            All collection operations are mapped to A3DObject's source object managements.
            </summary>
        </member>
        <member name="F:Aspose.Crypto.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:Aspose.Crypto.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="F:Aspose.Crypto.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:Aspose.Crypto.BigInteger.smallPrimes">
            <summary>
            	Table of primes below 2000.
            </summary>
            <remarks>
            	<para>
            	This table was generated using Mathematica 4.1 using the following function:
            	</para>
            	<para>
            		<code>
            		PrimeTable [x_] := Prime [Range [1, PrimePi [x]]]
            		PrimeTable [6000]
            		</code>
            	</para>
            </remarks>
        </member>
        <member name="M:Aspose.Crypto.BigInteger.TestBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:Aspose.Crypto.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="T:Aspose.Crypto.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:Aspose.Crypto.BigInteger.Kernel.AddSameSign(Aspose.Crypto.BigInteger,Aspose.Crypto.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:Aspose.Crypto.BigInteger.Kernel.Compare(Aspose.Crypto.BigInteger,Aspose.Crypto.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:Aspose.Crypto.BigInteger.Kernel.SingleByteDivideInPlace(Aspose.Crypto.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="T:Aspose.Crypto.Pkcs1">
            <summary>
            Provides different Public-Key Cryptography Standards methods.
            </summary>
        </member>
        <member name="T:Aspose.Crypto.Rsa">
            <summary>
            Performs RSA encryption.
            </summary>
        </member>
        <member name="T:Aspose.License.Hackers.RsaSignatureVerifier">
            <summary>
            Performs RSA digital signature verification.
            </summary>
        </member>
        <member name="T:Aspose.License.Hackers.SmartComparator1">
            <summary>
            One of the comparators used for complication of byte buffers comparison.
            </summary>
        </member>
        <member name="M:Aspose.License.Hackers.SmartComparator1.AddBuffer1(System.IO.MemoryStream,System.Byte[],System.Int32)">
            <summary>
            The first buffer to compare should be passed here.
            </summary>
            <param name="dummyParam1"></param>
            <param name="buffer1">The buffer.</param>
            <param name="dummyParam2"></param>
            <returns></returns>
        </member>
        <member name="T:Aspose.License.Hackers.SmartComparator2">
            <summary>
            One of the comparators used for complication of byte buffers comparison.
            </summary>
        </member>
        <member name="M:Aspose.License.Hackers.SmartComparator2.#ctor(Aspose.License.Hackers.SmartComparator1,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            The second buffer to compare must be passed here.
            </summary>
            <param name="dummyParam1"></param>
            <param name="buffer2">The buffer.</param>
            <param name="dummyParam2"></param>
            <param name="dummyParam3"></param>
        </member>
        <member name="M:Aspose.License.Hackers.SmartComparator2.AddComparator1(System.Int32[],Aspose.License.Hackers.SmartComparator1)">
            <summary>
            The first comparator must be added here.
            </summary>
            <param name="dummyParam1"></param>
            <param name="comparator1">The comparator.</param>
            <returns></returns>
        </member>
        <member name="M:Aspose.License.Hackers.SmartComparator2.PerformComparison1(System.Boolean)">
            <summary>
            Performs comparison of the second half of the buffers.
            </summary>
            <param name="dummyParam1"></param>
        </member>
        <member name="M:Aspose.License.Hackers.SmartComparator2.PassControlToComparator3(System.String,System.Boolean)">
            <summary>
            Passes control to the comparator 3.
            </summary>
            <param name="dummyParam1"></param>
            <param name="isDummy">Must be false to really pass control.</param>
        </member>
        <member name="T:Aspose.License.Hackers.SmartComparator3">
            <summary>
            One of the comparators used for complication of byte buffers comparison.
            </summary>
        </member>
        <member name="M:Aspose.License.Hackers.SmartComparator3.#ctor(Aspose.License.Hackers.SmartComparator2)">
            <summary>
            Comparator 2 should be passed here.
            </summary>
            <param name="comparator2">Comparator 2.</param>
        </member>
        <member name="T:Aspose.License.Hackers.VerificationSupervisor">
            <summary>
            Contains flags set by the meaningful comparer methods. This is necessary to ensure
            that crackers have not cut out the entry point of the verification algorithm located
            in LicenseCore.VerifySignature() and all the methods have been called. The flags should
            be set by 3 comparer methods subsequently, each method must check if the previous method
            has been invoked. 
            
            Also see SignatureInvalidFlag in this class.
            </summary>
        </member>
        <member name="M:Aspose.License.Hackers.VerificationSupervisor.Clear">
            <summary>
            Made accessible so license unit tests can reset the static state properly.
            </summary>
        </member>
        <member name="M:Aspose.License.Hackers.VerificationSupervisor.EnsureIfAllMethodsInvoked">
            <summary>
            Returns 0x100 if all methods have been invoked properly, returns 0x1000 otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dynabic.Metered.BillingGateway">
             <summary>
             This is the primary interface to the BanckleBilling Gateway.
             </summary>
             <remarks>
             This class interacts with:
             <ul>
             <li><see cref="T:Dynabic.Metered.SubscriptionService">Subscriptions</see></li>
             </ul>  
             </remarks>
             <example>
             Quick Start Example:
             <code>
             using System
             using BanckleBilling
            
             namespace BanckleBillingExample
             {
                 class Program
                 {
                     static void Main(string[] args)
                     {
                         var gateway = new BillingGateway
                         {
                             Environment = Environment.PRODUCTION,
                             PublicKey = "a_public_key",
                             PrivateKey = "a_private_key"
                         }
            
                         var request = new SubscriptionRequest
                         {
                             ProductId = 11,
                             ...
                             CustomerRequest = new CustomerRequest
                             {
                                 Name = "John Doe",
                                 ...
                             }
                         }
            
                         SubscriptionResponse subscription = gateway.Subscription.Create(request)
            
                         Console.WriteLine(String.Format("Subscription ID: {0}", subscription.Id))
                         Console.WriteLine(String.Format("Status: {0}", subscription.Status))
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Dynabic.Metered.Crypto.RemoveUtf8BomIfPresent(System.String)">
            <summary>
            Remove the UTF8 BOM, if present (BILLING-757)
            this causes the client/server signatures to not correspond, 
            although the content and the key are identical
            </summary>
        </member>
        <member name="T:Dynabic.Metered.PricingPlan">
            <summary>
            Represents basic information about a PricingPlan
            </summary>
        </member>
        <member name="P:Dynabic.Metered.PricingPlan.Id">
            <summary>
            Id of the PricingPlan record
            </summary>
        </member>
        <member name="P:Dynabic.Metered.PricingPlan.Name">
            <summary>
            Name of the PricingPlan
            </summary>
        </member>
        <member name="P:Dynabic.Metered.PricingPlan.ProductItems">
            <summary>
            A list of ProductItems represented as a collection of ProductItem objects
            </summary>
        </member>
        <member name="P:Dynabic.Metered.PricingPlan.ProductId">
            <summary>
            Id of the Product to which PricingPlan is attached
            </summary>
        </member>
        <member name="T:Dynabic.Metered.PricingPlanList">
            <summary>
            A list of PricingPlans
            </summary>
        </member>
        <member name="T:Dynabic.Metered.Product">
            <summary>
            Represents a Product.
            </summary> 
        </member>
        <member name="P:Dynabic.Metered.Product.Id">
            <summary>
            Product's unique identifier
            </summary>
        </member>
        <member name="P:Dynabic.Metered.Product.Name">
            <summary>
            Name of the Product
            </summary>
        </member>
        <member name="P:Dynabic.Metered.Product.PricingPlans">
            <summary>
            A list of Pricing Plans represented as a collection of PricingPlanRequest objects
            </summary>
        </member>
        <member name="T:Dynabic.Metered.ProductItem">
            <summary>
            Product Item
            </summary>
        </member>
        <member name="P:Dynabic.Metered.ProductItem.Id">
            <summary>
            ProductItem's unique identifier. It is generated and managed by database
            </summary>
        </member>
        <member name="P:Dynabic.Metered.ProductItem.Name">
            <summary>
            Name of the ProductItem
            </summary>
        </member>
        <member name="T:Dynabic.Metered.ProductItemList">
            <summary>
            A list of ProductItems
            </summary>
        </member>
        <member name="T:Dynabic.Metered.ProductList">
            <summary>
            A list of Products
            </summary>
        </member>
        <member name="T:Dynabic.Metered.Subscription">
            <summary>
            Represents a Subscription
            (Customers make Subscriptions to Products)
            </summary>
        </member>
        <member name="P:Dynabic.Metered.Subscription.SubscriptionPricingPlans">
            <summary>
            A list of SubscriptionPricingPlans to be assigned to the Subscription
            </summary>
        </member>
        <member name="P:Dynabic.Metered.Subscription.FilteredStatus">
            <summary>
            Actual status of the Subscription (e.g. Active, Trialing, BillNotPaid, Expired etc.
            </summary>
        </member>
        <member name="P:Dynabic.Metered.SubscriptionItem.SubscriptionId">
            <summary>
            The subscription identifier
            </summary>
        </member>
        <member name="P:Dynabic.Metered.SubscriptionItem.ProductItemId">
            <summary>
            The product item identifier
            </summary>
        </member>
        <member name="P:Dynabic.Metered.SubscriptionItem.Quantity">
            <summary>
            The value of the quantity
            </summary>
        </member>
        <member name="P:Dynabic.Metered.SubscriptionItem.UpdateDescription">
            <summary>
            The update details
            </summary>
        </member>
        <member name="P:Dynabic.Metered.SubscriptionItem.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Dynabic.Metered.SubscriptionItem.UnitName">
            <summary>
            The unit name
            </summary>
        </member>
        <member name="P:Dynabic.Metered.SubscriptionItem.IsQuantityAccumulated">
            <summary>
            Whether this item is an acumulator. When set to true it
            will influence the way subscription items are updated.
            </summary>
        </member>
        <member name="T:Dynabic.Metered.SubscriptionItemList">
            <summary>
            A lists of the subscription's components.
            </summary>
        </member>
        <member name="T:Dynabic.Metered.SubscriptionPricingPlan">
            <summary>
            Represents basic information about a PricingPlan
            </summary>
        </member>
        <member name="P:Dynabic.Metered.SubscriptionPricingPlan.Id">
            <summary>
            Id of the PricingPlan record
            </summary>
        </member>
        <member name="P:Dynabic.Metered.SubscriptionPricingPlan.PricingPlan">
            <summary>
            Product price plan of this subscription
            </summary>
        </member>
        <member name="T:Dynabic.Metered.SubscriptionPricingPlansList">
            <summary>
            A list of PricingPlans
            </summary>
        </member>
        <member name="T:Dynabic.Metered.SubscriptionService">
            <summary>
            Provides metered license related RESTful API calls
            </summary>
        </member>
        <member name="M:Dynabic.Metered.SubscriptionService.GetProductById(System.Int64)">
            <summary>
            Gets a Product by Id.
            </summary>
            <param name="id">The Id of the Product to be retrieved. </param>
            <returns>A Product object corresponding to the specified ProductId. </returns>
        </member>
        <member name="M:Dynabic.Metered.SubscriptionService.UpdateSubscriptionItems(System.Int64,Dynabic.Metered.SubscriptionItemList)">
            <summary>
            Updates the subscription item.
            </summary>
            <param name="id"> The Id of the Subscription </param>
            <param name="items">The subscription items.</param>
        </member>
        <member name="M:Dynabic.Metered.SubscriptionService.GetSubscriptionItems(System.Int64)">
            <summary>
            Gets the subscription items.
            </summary>
            <param name="id">The subscription id.</param>
            <returns>SubscriptionItemList</returns>
        </member>
        <member name="T:Dynabic.Metered.SubscriptionsList">
            <summary>
            A list of Subscriptions represented as a collection of SubscriptionResponse objects
            </summary>
        </member>
    </members>
</doc>
